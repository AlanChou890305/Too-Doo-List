import React, {
  useState,
  useEffect,
  useRef,
  useCallback,
  createContext,
  useContext,
} from "react";
import VersionUpdateModal from "./src/components/VersionUpdateModal";
import { versionService } from "./src/services/versionService";

// Áç≤ÂèñÈáçÂÆöÂêë URL
const getRedirectUrl = () => {
  const env = process.env.EXPO_PUBLIC_APP_ENV || "development";

  const urls = {
    development: "https://to-do-mvp.vercel.app",
    production: "https://to-do-mvp.vercel.app", // Production ‰ΩøÁî®Ê≠£ÂºèÁ∂≤Âüü
    staging: "https://to-do-staging.vercel.app", // Staging ‰ΩøÁî®Ê∏¨Ë©¶Á∂≤Âüü
  };

  return urls[env] || urls.production;
};

// Ë™øË©¶Ë≥áË®ä - Âº∑Âà∂ÈáçÊñ∞ÈÉ®ÁΩ≤
console.log("üö®üö®üö® Áí∞Â¢ÉËÆäÊï∏Ë™øË©¶ÈñãÂßã üö®üö®üö®");
console.log(
  "üîç APP DEBUG - EXPO_PUBLIC_APP_ENV:",
  process.env.EXPO_PUBLIC_APP_ENV
);
console.log(
  "üîç APP DEBUG - EXPO_PUBLIC_SUPABASE_URL_DEV:",
  process.env.EXPO_PUBLIC_SUPABASE_URL_DEV
);
console.log(
  "üîç APP DEBUG - EXPO_PUBLIC_SUPABASE_URL:",
  process.env.EXPO_PUBLIC_SUPABASE_URL
);
console.log(
  "üîç APP DEBUG - ÊâÄÊúâÁí∞Â¢ÉËÆäÊï∏:",
  Object.keys(process.env).filter((key) => key.startsWith("EXPO_PUBLIC"))
);
console.log("üîç APP DEBUG - Âº∑Âà∂ÈáçÊñ∞ÈÉ®ÁΩ≤Ëß∏ÁôºÂô® - DEV Áí∞Â¢ÉË™øË©¶");
console.log("üö®üö®üö® Áí∞Â¢ÉËÆäÊï∏Ë™øË©¶ÁµêÊùü üö®üö®üö®");

// Ê∑ªÂä†Êõ¥ÊòéÈ°ØÁöÑË™øË©¶Ë≥áË®ä
console.log("üî•üî•üî• TESTFLIGHT DEBUG START üî•üî•üî•");
console.log(
  "üî• CURRENT ENVIRONMENT:",
  process.env.EXPO_PUBLIC_APP_ENV || "NOT SET"
);
console.log(
  "üî• SUPABASE URL DEV:",
  process.env.EXPO_PUBLIC_SUPABASE_URL_DEV || "NOT SET"
);
console.log(
  "üî• SUPABASE URL STAGING:",
  process.env.EXPO_PUBLIC_SUPABASE_URL_STAGING || "NOT SET"
);
console.log(
  "üî• SUPABASE URL:",
  process.env.EXPO_PUBLIC_SUPABASE_URL || "NOT SET"
);
console.log("üî•üî•üî• TESTFLIGHT DEBUG END üî•üî•üî•");
import Svg, { Path, Circle, Rect, Line, Ellipse } from "react-native-svg";
import ReactGA from "react-ga4";
import * as AuthSession from "expo-auth-session";
import * as WebBrowser from "expo-web-browser";
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Modal,
  ScrollView,
  TextInput,
  FlatList,
  Alert,
  Image,
  PanResponder,
  Animated,
  Linking,
  Platform,
  Dimensions,
  KeyboardAvoidingView,
  Keyboard,
} from "react-native";

// üö® CRITICAL: Handle OAuth callback IMMEDIATELY before React initializes
// This ensures the redirect happens as fast as possible
if (Platform.OS === "web" && typeof window !== "undefined") {
  const currentUrl = window.location.href;
  const url = new URL(currentUrl);

  // Check if this is an OAuth callback
  const isOAuthCallback =
    url.pathname.includes("/auth/callback") &&
    (url.hash.includes("access_token") || url.search.includes("code="));

  if (isOAuthCallback) {
    console.log(
      "üö® [IMMEDIATE] OAuth callback detected, redirecting to native app..."
    );
    console.log("üö® [IMMEDIATE] Current URL:", currentUrl);

    // Determine the correct URL scheme based on hostname
    let appScheme = "too-doo-list"; // Default: production
    if (window.location.hostname.includes("to-do-dev")) {
      appScheme = "too-doo-list-dev"; // Development
    }
    // Note: to-do-staging.vercel.app and to-do-mvp.vercel.app both use production scheme

    console.log("üö® [IMMEDIATE] Using app scheme:", appScheme);

    // Build redirect URL
    let redirectUrl;
    if (url.hash.includes("access_token")) {
      const hashParams = new URLSearchParams(url.hash.substring(1));
      const accessToken = hashParams.get("access_token");
      const refreshToken = hashParams.get("refresh_token");
      const expiresIn = hashParams.get("expires_in");
      const tokenType = hashParams.get("token_type");

      redirectUrl = `${appScheme}://auth/callback#access_token=${accessToken}&refresh_token=${refreshToken}&expires_in=${expiresIn}&token_type=${tokenType}`;
    } else if (url.search.includes("code=")) {
      const code = url.searchParams.get("code");
      const state = url.searchParams.get("state") || "";
      redirectUrl = `${appScheme}://auth/callback?code=${code}&state=${state}`;
    }

    if (redirectUrl) {
      console.log("üö® [IMMEDIATE] Redirecting to:", redirectUrl);
      window.location.href = redirectUrl;

      // Show a message to the user
      setTimeout(() => {
        document.body.innerHTML =
          '<div style="font-family: -apple-system, sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; flex-direction: column;"><div style="font-size: 20px; margin-bottom: 20px;">Login successful!</div><div style="font-size: 16px; color: #666;">Please return to the To Do app.</div></div>';
      }, 100);
    }
  }
}

// Global error handler for uncaught errors
if (Platform.OS !== "web") {
  const originalConsoleError = console.error;
  console.error = (...args) => {
    originalConsoleError("[ERROR]", ...args);
  };

  // Log app startup
  console.log("‚úÖ App.js loaded successfully");
  console.log("Platform:", Platform.OS);
  // Don't check process.env here - it may not be available yet in native builds
  console.log("App initialization starting...");
}

import { supabase } from "./supabaseClient";
import {
  SafeAreaView,
  useSafeAreaInsets,
} from "react-native-safe-area-context";

// Services
import { TaskService } from "./src/services/taskService";
import { UserService } from "./src/services/userService";
import {
  registerForPushNotificationsAsync,
  scheduleTaskNotification,
  cancelTaskNotification,
} from "./src/services/notificationService";

// Notification Config
import { getActiveReminderMinutes } from "./src/config/notificationConfig";

// Theme Config
import { getTheme, lightTheme, darkTheme } from "./src/config/theme";

// Storage
import AsyncStorage from "@react-native-async-storage/async-storage";

// Navigation
import {
  NavigationContainer,
  useNavigation,
  useFocusEffect,
} from "@react-navigation/native";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { createStackNavigator } from "@react-navigation/stack";

// UI Components
import { MaterialIcons } from "@expo/vector-icons";
import {
  GestureHandlerRootView,
  PanGestureHandler,
  State,
  Swipeable,
} from "react-native-gesture-handler";
import DateTimePicker from "@react-native-community/datetimepicker";

// Fonts
import { useFonts } from "expo-font";
import {
  Roboto_400Regular,
  Roboto_500Medium,
  Roboto_700Bold,
} from "@expo-google-fonts/roboto";
import {
  NotoSansTC_400Regular,
  NotoSansTC_500Medium,
  NotoSansTC_700Bold,
} from "@expo-google-fonts/noto-sans-tc";

const TASKS_STORAGE_KEY = "TASKS_STORAGE_KEY";
const LANGUAGE_STORAGE_KEY = "LANGUAGE_STORAGE_KEY";

// Translation dictionaries
const translations = {
  en: {
    settings: "Settings",
    userName: "User Name",
    account: "Account",
    logout: "Log Out",
    comingSoon: "Coming soon...",
    terms: "Terms of Use",
    privacy: "Privacy Policy",
    version: "Version",
    general: "General",
    legal: "Legal",
    calendar: "Calendar",
    noTasks: "No tasks for this day.",
    addTask: "What needs to be done?",
    createTask: "Create Task",
    editTask: "Edit Task",
    taskPlaceholder: "Enter your task here...",
    timePlaceholder: "Enter time (HH:MM)",
    link: "Link",
    linkPlaceholder: "Add a link",
    taskLabel: "Task",
    date: "Date",
    datePlaceholder: "Enter date (YYYY-MM-DD)",
    note: "Note",
    notePlaceholder: "Add a note",
    save: "Save",
    update: "Update",
    cancel: "Cancel",
    confirm: "Confirm",
    delete: "Delete",
    logoutConfirm: "Are you sure you want to log out of the app?",
    logout: "Log Out",
    deleteConfirm: "Are you sure you want to delete this task?",
    done: "Done",
    moveHint: "Tap a date to move",
    moveTask: "Move Task",
    moveTaskAlert: "Now tap a date on the calendar to move this task.",
    language: "Language",
    english: "English",
    chinese: "ÁπÅÈ´î‰∏≠Êñá(Âè∞ÁÅ£)",
    months: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ],
    weekDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    logoutSuccess: "Successfully logged out!",
    alreadyLoggedOut: "You are already logged out.",
    logoutError: "Failed to log out. Please try again.",
    accountType: "Account Type",
    // Terms of Use translations
    termsTitle: "Terms of Use",
    termsLastUpdated: "Last updated:",
    termsAcceptance: "1. Acceptance of Terms",
    termsAcceptanceText:
      'Welcome to To Do ("we," "our company," or "the Service Provider"). By accessing, downloading, installing, or using our task management application, you acknowledge that you have read, understood, and agree to be bound by these Terms of Use. If you do not agree to any part of these terms, please discontinue use of the Service immediately.',
    termsDescription: "2. Service Description",
    termsDescriptionText:
      "To Do is a comprehensive personal task management application designed to help users effectively organize and manage their daily tasks and schedules. Our Service provides the following key features:\n‚Ä¢ Task creation, editing, and deletion\n‚Ä¢ Calendar integration and task scheduling\n‚Ä¢ Google Single Sign-On (SSO) authentication\n‚Ä¢ Cross-device data synchronization\n‚Ä¢ Task reminder notifications\n‚Ä¢ Personalized settings and preference management\n‚Ä¢ Secure cloud storage and backup",
    termsAccounts: "3. User Accounts and Authentication",
    termsAccountsText:
      "Account Creation:\n‚Ä¢ You must create an account using Google Single Sign-On (SSO)\n‚Ä¢ You must be at least 13 years old to use this Service\n‚Ä¢ You agree to provide accurate, complete, and truthful information\n‚Ä¢ You are responsible for maintaining the security of your account\n\nAccount Responsibilities:\n‚Ä¢ You are responsible for maintaining the confidentiality of your account credentials\n‚Ä¢ You are fully responsible for all activities that occur under your account\n‚Ä¢ You must immediately notify us of any unauthorized use of your account\n‚Ä¢ You may not transfer your account to any third party\n‚Ä¢ You must comply with all applicable laws and regulations",
    termsContent: "4. User Content and Data Ownership",
    termsContentText:
      "Content Ownership:\n‚Ä¢ You retain complete ownership of all content you create within the App\n‚Ä¢ This includes, but is not limited to, task titles, descriptions, notes, links, and attachments\n‚Ä¢ You maintain all intellectual property rights to your content\n\nData Usage:\n‚Ä¢ You are solely responsible for your content and data\n‚Ä¢ We do not claim ownership of your personal tasks or information\n‚Ä¢ You grant us necessary technical permissions to provide the Service\n‚Ä¢ We will not use your personal content for commercial purposes\n‚Ä¢ We respect your privacy and data protection rights",
    termsAcceptableUse: "5. Acceptable Use Policy",
    termsAcceptableUseText:
      "You agree not to:\n‚Ä¢ Use the Service for any unlawful purpose or in violation of any applicable laws\n‚Ä¢ Attempt to gain unauthorized access to the App or its related systems\n‚Ä¢ Interfere with, disrupt, or damage the normal operation of the Service\n‚Ä¢ Create, upload, or share harmful, offensive, discriminatory, or rights-violating content\n‚Ä¢ Engage in any activities that may compromise the security of the Service\n‚Ä¢ Use automated tools or bots to access the Service\n‚Ä¢ Reverse engineer, decompile, or disassemble the App\n‚Ä¢ Violate any third-party rights or intellectual property laws",
    termsPrivacy: "6. Privacy and Data Protection",
    termsPrivacyText:
      "We take your privacy seriously. Our data processing practices are governed by our Privacy Policy, which provides detailed information about how we collect, use, store, and protect your personal information.\n\nImportant Points:\n‚Ä¢ Please carefully review our Privacy Policy\n‚Ä¢ By using the Service, you consent to our data processing practices\n‚Ä¢ We implement industry-standard security measures to protect your data\n‚Ä¢ You have the right to control your personal information\n‚Ä¢ We comply with applicable data protection laws and regulations",
    termsAvailability: "7. Service Availability and Maintenance",
    termsAvailabilityText:
      "Service Commitment:\n‚Ä¢ We strive to provide a stable and reliable service experience\n‚Ä¢ However, we cannot guarantee absolute uninterrupted service\n‚Ä¢ We maintain high availability standards and monitor our systems continuously\n\nMaintenance and Updates:\n‚Ä¢ We may perform scheduled maintenance that temporarily affects service\n‚Ä¢ We reserve the right to modify, suspend, or discontinue the Service at any time\n‚Ä¢ We will provide advance notice of significant changes when possible\n‚Ä¢ We schedule maintenance during off-peak hours whenever possible\n‚Ä¢ We regularly update the Service to improve functionality and security",
    termsLiability: "8. Limitation of Liability and Disclaimers",
    termsLiabilityText:
      "Disclaimers:\n‚Ä¢ The Service is provided 'as is' without warranties of any kind, express or implied\n‚Ä¢ We do not guarantee error-free, uninterrupted, or completely secure service\n‚Ä¢ We disclaim all warranties regarding merchantability, fitness for a particular purpose, and non-infringement\n\nLimitation of Liability:\n‚Ä¢ To the maximum extent permitted by law, we shall not be liable for:\n  - Direct, indirect, incidental, or consequential damages\n  - Any losses resulting from use or inability to use the Service\n  - Data loss, business interruption, or other commercial losses\n  - Damages exceeding the amount paid for the Service in the past 12 months",
    termsChanges: "9. Modifications to Terms",
    termsChangesText:
      "Right to Modify:\n‚Ä¢ We reserve the right to modify these Terms of Use at any time\n‚Ä¢ Significant changes will be communicated through in-app notifications or email\n‚Ä¢ Modified terms will take effect immediately upon posting\n‚Ä¢ We will provide at least 30 days' notice for material changes\n\nAcceptance of Changes:\n‚Ä¢ Your continued use of the Service constitutes acceptance of modified terms\n‚Ä¢ If you disagree with the changes, please discontinue use and delete your account\n‚Ä¢ We recommend reviewing these terms periodically to stay informed of updates\n‚Ä¢ You can access the current terms at any time through the App",
    termsContact: "10. Contact Information and Dispute Resolution",
    termsContactText:
      "Technical Support:\n‚Ä¢ For technical issues, please contact us through the in-app support feature\n‚Ä¢ We will respond to your inquiries within a reasonable timeframe\n‚Ä¢ Support is available during business hours (Monday-Friday, 9 AM - 6 PM)\n\nDispute Resolution:\n‚Ä¢ We encourage resolving disputes through friendly negotiation\n‚Ä¢ These terms are governed by the laws of the jurisdiction where our company is incorporated\n‚Ä¢ Any legal proceedings should be brought in the appropriate courts\n‚Ä¢ We are committed to fair and transparent dispute resolution processes",
    termsAcknowledgment:
      "Thank you for choosing To Do. By using our Service, you acknowledge that you have thoroughly read, understood, and agree to be bound by these Terms of Use. We are committed to providing you with an excellent task management experience.",
    // Privacy Policy translations
    privacyTitle: "Privacy Policy",
    privacyLastUpdated: "Last updated:",
    privacyIntroduction: "1. Policy Overview",
    privacyIntroductionText:
      'To Do ("we," "our company," or "the Service Provider") recognizes the importance of personal privacy and is committed to protecting the security of your personal data. This Privacy Policy provides detailed information about how we collect, use, store, protect, and share your personal information when you use the To Do task management application.\n\nWe are committed to complying with relevant laws and regulations, including data protection laws, to ensure your privacy rights are fully protected.',
    privacyInformation: "2. Types of Personal Data We Collect",
    privacyAccountInfo: "Account-Related Data:",
    privacyAccountInfoText:
      "Basic Account Information:\n‚Ä¢ Email address (obtained through Google SSO)\n‚Ä¢ Display name (customizable)\n‚Ä¢ Profile picture (if provided by Google account)\n‚Ä¢ Account creation time and last login time\n\nTask Management Data:\n‚Ä¢ Task titles, descriptions, and detailed content\n‚Ä¢ Task due dates and reminder times\n‚Ä¢ Task categories, priorities, and tags\n‚Ä¢ Task links and attachment information\n‚Ä¢ Task completion status and history\n\nUsage Behavior Data:\n‚Ä¢ Application usage frequency and patterns\n‚Ä¢ Feature usage preferences and settings\n‚Ä¢ Device information and operating system version\n‚Ä¢ Error reports and performance data (anonymized)",
    privacyUse: "3. Purposes and Legal Basis for Data Processing",
    privacyUseText:
      "We use your personal data for the following purposes:\n\nService Provision:\n‚Ä¢ Provide core task management functionality\n‚Ä¢ Sync your task data across devices\n‚Ä¢ Send task reminder notifications\n‚Ä¢ Maintain and improve service quality\n\nTechnical Support:\n‚Ä¢ Diagnose and resolve technical issues\n‚Ä¢ Provide customer service and technical support\n‚Ä¢ Conduct system maintenance and updates\n\nSecurity Protection:\n‚Ä¢ Prevent unauthorized access\n‚Ä¢ Detect and prevent fraudulent activities\n‚Ä¢ Protect system and data security\n\nLegal Basis:\n‚Ä¢ Based on your explicit consent\n‚Ä¢ To fulfill our service contract with you\n‚Ä¢ To comply with legal obligations\n‚Ä¢ To protect our legitimate interests",
    privacyStorage: "4. Data Storage and Security Protection Measures",
    privacyStorageText:
      "Data Storage:\n‚Ä¢ Secure storage using Supabase cloud infrastructure\n‚Ä¢ Data distributed across multiple geographic locations\n‚Ä¢ Regular data backup and disaster recovery testing\n‚Ä¢ Redundant systems to ensure data availability\n\nSecurity Measures:\n‚Ä¢ Industry-standard encryption technology (AES-256)\n‚Ä¢ Data transmission encrypted using TLS 1.3\n‚Ä¢ Multi-layered access control and authentication\n‚Ä¢ Regular security vulnerability scans and penetration testing\n‚Ä¢ Comprehensive data access logging and monitoring systems\n‚Ä¢ Regular security audits and compliance assessments\n\nPersonnel Management:\n‚Ä¢ Only authorized personnel can access personal data\n‚Ä¢ All employees sign confidentiality agreements\n‚Ä¢ Regular privacy protection training\n‚Ä¢ Established data processing standard operating procedures",
    privacySharing: "5. Data Sharing and Third-Party Disclosure",
    privacySharingText:
      "We commit not to sell, rent, or trade your personal data. We only share your data in the following circumstances:\n\nWith Your Consent:\n‚Ä¢ When you have given explicit consent\n‚Ä¢ You may withdraw consent at any time\n‚Ä¢ Clear opt-in mechanisms for data sharing\n\nLegal Requirements:\n‚Ä¢ To comply with court orders or legal requirements\n‚Ä¢ To cooperate with government investigations\n‚Ä¢ To protect our legitimate rights and interests\n‚Ä¢ To respond to valid legal requests\n\nService Providers:\n‚Ä¢ Collaborate with trusted third-party service providers (such as Google, Supabase)\n‚Ä¢ Sign strict data protection agreements\n‚Ä¢ Ensure third parties follow the same privacy protection standards\n‚Ä¢ Regularly review third-party compliance\n‚Ä¢ Maintain oversight of data processing activities\n\nEmergency Situations:\n‚Ä¢ To protect your life or the lives of others\n‚Ä¢ To prevent significant harm from occurring\n‚Ä¢ To respond to public health emergencies",
    privacyThirdParty: "6. Third-Party Service Integration",
    privacyThirdPartyText:
      "This application integrates the following third-party services:\n\nGoogle Services:\n‚Ä¢ Google Single Sign-On (SSO) authentication\n‚Ä¢ Used for identity verification and account management\n‚Ä¢ Subject to Google's Privacy Policy\n‚Ä¢ Limited data sharing for authentication purposes\n\nSupabase Platform:\n‚Ä¢ Cloud database and backend services\n‚Ä¢ Provides secure data storage and API services\n‚Ä¢ Subject to Supabase's data protection policy\n‚Ä¢ Encrypted data transmission and storage\n\nImportant Reminders:\n‚Ä¢ These third-party services have their own privacy policies\n‚Ä¢ We encourage you to review the relevant policies\n‚Ä¢ We regularly review third-party service compliance\n‚Ä¢ We take immediate appropriate action if security issues are discovered\n‚Ä¢ We maintain contracts that require data protection standards",
    privacyRights: "7. Your Privacy Rights",
    privacyRightsText:
      "Under applicable laws and regulations, you have the following rights:\n\nRight of Access:\n‚Ä¢ Request information about the personal data we hold about you\n‚Ä¢ Understand the purposes and methods of data processing\n‚Ä¢ Obtain information about data processing activities\n‚Ä¢ Receive a copy of your personal data\n\nRight of Rectification:\n‚Ä¢ Request correction of inaccurate personal data\n‚Ä¢ Request completion of incomplete personal data\n‚Ä¢ Modify some data through app settings\n‚Ä¢ Update your profile information\n\nRight of Erasure:\n‚Ä¢ Request deletion of your personal data\n‚Ä¢ Delete your account and associated data\n‚Ä¢ Request restriction of data processing in specific circumstances\n‚Ä¢ Right to be forgotten\n\nRight of Data Portability:\n‚Ä¢ Request your data in a structured format\n‚Ä¢ Transfer data to other service providers\n‚Ä¢ Download backup of your task data\n‚Ä¢ Export your data in common formats\n\nRight to Withdraw Consent:\n‚Ä¢ Withdraw consent for data processing at any time\n‚Ä¢ Stop receiving certain types of notifications\n‚Ä¢ Adjust privacy setting preferences\n‚Ä¢ Opt out of marketing communications",
    privacyRetention: "8. Data Retention Periods",
    privacyRetentionText:
      "We retain your personal data according to the following principles:\n\nDuring Account Active Period:\n‚Ä¢ Retain data continuously while your account is active\n‚Ä¢ Used for service provision and technical support\n‚Ä¢ Maintain service quality and security\n‚Ä¢ Support account recovery if needed\n\nAfter Account Deletion:\n‚Ä¢ Immediately delete personally identifiable data\n‚Ä¢ Anonymized statistical data may be retained for analysis\n‚Ä¢ Legal requirement exceptions apply\n‚Ä¢ Complete data removal within 30 days\n\nSpecial Circumstances:\n‚Ä¢ May extend retention during legal proceedings\n‚Ä¢ May extend retention during security incident investigations\n‚Ä¢ Maximum retention not exceeding 7 years (legal requirement limit)\n‚Ä¢ Compliance with regulatory requirements\n\nData Destruction:\n‚Ä¢ Use secure deletion technology\n‚Ä¢ Ensure data cannot be recovered\n‚Ä¢ Regular verification of deletion effectiveness\n‚Ä¢ Certificate of data destruction when required",
    privacyChildren: "9. Children's Privacy Protection",
    privacyChildrenText:
      "Age Restrictions:\n‚Ä¢ This service is not intended for children under 13\n‚Ä¢ We do not knowingly collect personal data from children under 13\n‚Ä¢ We immediately delete any such data if discovered\n‚Ä¢ Age verification mechanisms in place\n\nParental Supervision:\n‚Ä¢ We recommend parental supervision of minor children using this service\n‚Ä¢ Please contact us immediately if you discover inappropriate use\n‚Ä¢ We will cooperate with parents for appropriate handling\n‚Ä¢ Parental consent required for users under 16\n\nSpecial Protection:\n‚Ä¢ More cautious data processing for minors\n‚Ä¢ Additional privacy protection measures\n‚Ä¢ Regular policy reviews\n‚Ä¢ Enhanced security for minor accounts\n‚Ä¢ Educational resources for parents",
    privacyInternational: "10. International Data Transfers",
    privacyInternationalText:
      "Transfer Scope:\n‚Ä¢ Your data may be transferred to regions outside your country\n‚Ä¢ Primarily for cloud services and technical support\n‚Ä¢ Follow international data protection standards\n‚Ä¢ Limited to necessary service operations\n\nProtection Measures:\n‚Ä¢ Sign data protection agreements with recipients\n‚Ä¢ Ensure appropriate technical and organizational measures\n‚Ä¢ Regular assessment of transfer security\n‚Ä¢ Compliance with relevant international regulations\n‚Ä¢ Standard Contractual Clauses where applicable\n\nYour Rights:\n‚Ä¢ Request information about data transfer details\n‚Ä¢ Request restrictions on international transfers\n‚Ä¢ Withdraw consent for transfers at any time\n‚Ä¢ Object to transfers based on legitimate interests",
    privacyChanges: "11. Policy Updates and Notifications",
    privacyChangesText:
      "Update Process:\n‚Ä¢ We regularly review and update this Privacy Policy\n‚Ä¢ Significant changes will be announced 30 days in advance\n‚Ä¢ Notify through in-app notifications or email\n‚Ä¢ Update date displayed at the top of the policy\n‚Ä¢ Version control and change tracking\n\nTypes of Changes:\n‚Ä¢ Addition of new data collection types\n‚Ä¢ Modification of data use purposes\n‚Ä¢ Updates to security protection measures\n‚Ä¢ Adjustments to your rights content\n‚Ä¢ Changes in legal requirements\n\nAcceptance of Changes:\n‚Ä¢ Continued use of the service constitutes acceptance of the new policy\n‚Ä¢ If you disagree with changes, you may discontinue use and delete your account\n‚Ä¢ We recommend reviewing the latest policy content regularly\n‚Ä¢ Clear communication about material changes\n‚Ä¢ Easy access to previous versions",
    privacyContact: "12. Contact Us and Complaint Channels",
    privacyContactText:
      "Privacy Inquiries:\n‚Ä¢ In-app support feature\n‚Ä¢ Email: privacy@todo-app.com\n‚Ä¢ We will respond within 7 business days\n‚Ä¢ Dedicated privacy officer contact\n\nData Protection Complaints:\n‚Ä¢ Submit complaints if you have concerns about data processing\n‚Ä¢ We take every complaint seriously\n‚Ä¢ Provide clear processing results and explanations\n‚Ä¢ Escalation procedures for unresolved issues\n\nRegulatory Authorities:\n‚Ä¢ Contact relevant supervisory authorities if dissatisfied with our response\n‚Ä¢ Data Protection Authority in your jurisdiction\n‚Ä¢ Legal remedies available\n‚Ä¢ Independent dispute resolution mechanisms",
    privacyAcknowledgment:
      "Thank you for trusting To Do. We are committed to continuously improving our privacy protection measures to provide you with secure and reliable task management services. If you have any privacy-related questions, please don't hesitate to contact us.",
    googleAccount: "Google Account",
    logout: "Log Out",
    selectTime: "Select Time",
    hour: "Hour",
    minute: "Min",
    done: "Done",
    time: "Time",
    today: "Today",
    taskReminder: "Task Reminder",
    // ‰∏çÂêåÊó∂Èó¥ÁÇπÁöÑÈÄöÁü•ÊñáÂ≠ó
    reminder30minTitle: "Task Starting Soon",
    reminder30minBody: "Your task is starting in 30 minutes",
    reminder10minTitle: "Task Starting Soon",
    reminder10minBody: "Your task is starting in 10 minutes",
    reminder5minTitle: "Task Starting Soon",
    reminder5minBody: "Your task is starting in 5 minutes",
    notificationPermission: "Notification Permission",
    notificationPermissionMessage:
      "To Do needs notification permission to remind you about your tasks 30 minutes before they're due.",
    enableNotifications: "Enable Notifications",
    notLater: "Not Now",
    theme: "Theme",
    lightMode: "Light Mode",
    darkMode: "Dark Mode",
    appearance: "Appearance",
    byContinuing: "By continuing, you agree to our",
    and: "and",
    // Reminder settings
    reminderSettings: "Reminder",
    reminder30min: "30 minutes before",
    reminder10min: "10 minutes before",
    reminder5min: "5 minutes before",
    reminderEnabled: "Enable",
    reminderDisabled: "Reminders disabled",
    reminderNote:
      "Reminders will only be sent for tasks that have a scheduled time",
    // Version update translations
    versionUpdateAvailable: "Version Update Available",
    forceUpdateRequired: "This update is required",
    currentVersion: "Current Version",
    latestVersion: "Latest Version",
    whatsNew: "What's New",
    updateBenefits: "Update Benefits",
    bugFixes: "Bug fixes and stability improvements",
    newFeatures: "New features and improvements",
    securityUpdates: "Security updates",
    performanceImprovements: "Performance optimizations",
    updateLater: "Update Later",
    updateNow: "Update Now",
    error: "Error",
    updateLinkError:
      "Unable to open update link. Please manually check for updates in App Store or TestFlight.",
  },
  zh: {
    settings: "Ë®≠ÂÆö",
    userName: "‰ΩøÁî®ËÄÖÂêçÁ®±",
    account: "Â∏≥Ëôü",
    logout: "ÁôªÂá∫",
    comingSoon: "Êï¨Ë´ãÊúüÂæÖ...",
    terms: "‰ΩøÁî®Ê¢ùÊ¨æ",
    privacy: "Èö±ÁßÅÊîøÁ≠ñ",
    version: "ÁâàÊú¨",
    general: "‰∏ÄËà¨",
    legal: "Ê≥ïÂæã",
    calendar: "Ë°å‰∫ãÊõÜ",
    noTasks: "ÈÄôÂ§©Ê≤íÊúâ‰ªªÂãô„ÄÇ",
    addTask: "ÈúÄË¶ÅÂÅö‰ªÄÈ∫ºÔºü",
    createTask: "Êñ∞Â¢û‰ªªÂãô",
    editTask: "Á∑®ËºØ‰ªªÂãô",
    taskPlaceholder: "Âú®ÈÄôË£°Ëº∏ÂÖ•ÊÇ®ÁöÑ‰ªªÂãô...",
    timePlaceholder: "Ëº∏ÂÖ•ÊôÇÈñì (HH:MM)",
    link: "ÈÄ£Áµê",
    linkPlaceholder: "Ê∑ªÂä†ÈÄ£Áµê",
    taskLabel: "‰ªªÂãô",
    date: "Êó•Êúü",
    datePlaceholder: "Ëº∏ÂÖ•Êó•Êúü (YYYY-MM-DD)",
    note: "ÂÇôË®ª",
    notePlaceholder: "Ê∑ªÂä†ÂÇôË®ª",
    save: "ÂÑ≤Â≠ò",
    update: "Êõ¥Êñ∞",
    cancel: "ÂèñÊ∂à",
    confirm: "Á¢∫Ë™ç",
    delete: "Âà™Èô§",
    logoutConfirm: "ÊÇ®Á¢∫ÂÆöË¶ÅÁôªÂá∫ÊáâÁî®Á®ãÂºèÂóéÔºü",
    logout: "ÁôªÂá∫",
    deleteConfirm: "ÊÇ®Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÂÄã‰ªªÂãôÂóéÔºü",
    done: "ÂÆåÊàê",
    moveHint: "ÈªûÈÅ∏Êó•Êúü‰ª•ÁßªÂãï",
    moveTask: "ÁßªÂãï‰ªªÂãô",
    moveTaskAlert: "Ë´ãÈªûÈÅ∏Êó•ÊõÜ‰∏äÁöÑÊó•Êúü‰ª•ÁßªÂãïÊ≠§‰ªªÂãô„ÄÇ",
    language: "Ë™ûË®Ä",
    english: "English",
    chinese: "ÁπÅÈ´î‰∏≠Êñá(Âè∞ÁÅ£)",
    months: [
      "‰∏ÄÊúà",
      "‰∫åÊúà",
      "‰∏âÊúà",
      "ÂõõÊúà",
      "‰∫îÊúà",
      "ÂÖ≠Êúà",
      "‰∏ÉÊúà",
      "ÂÖ´Êúà",
      "‰πùÊúà",
      "ÂçÅÊúà",
      "ÂçÅ‰∏ÄÊúà",
      "ÂçÅ‰∫åÊúà",
    ],
    weekDays: ["Êó•", "‰∏Ä", "‰∫å", "‰∏â", "Âõõ", "‰∫î", "ÂÖ≠"],
    logoutSuccess: "ÊàêÂäüÁôªÂá∫ÔºÅ",
    alreadyLoggedOut: "ÊÇ®Â∑≤Á∂ìÁôªÂá∫„ÄÇ",
    logoutError: "ÁôªÂá∫Â§±Êïó„ÄÇË´ãÂÜçË©¶‰∏ÄÊ¨°„ÄÇ",
    accountType: "Â∏≥ËôüÈ°ûÂûã",
    // Terms of Use translations
    termsTitle: "‰ΩøÁî®Ê¢ùÊ¨æ",
    termsLastUpdated: "ÊúÄÂæåÊõ¥Êñ∞Ôºö",
    termsAcceptance: "1. Ê¢ùÊ¨æÊé•Âèó",
    termsAcceptanceText:
      "Ê≠°Ëøé‰ΩøÁî® To DoÔºà„ÄåÊàëÂÄë„Äç„ÄÅ„ÄåÊú¨ÂÖ¨Âè∏„ÄçÊàñ„ÄåÊúçÂãôÊèê‰æõËÄÖ„ÄçÔºâ„ÄÇÁï∂ÊÇ®Ë®™Âïè„ÄÅ‰∏ãËºâ„ÄÅÂÆâË£ùÊàñ‰ΩøÁî®Êú¨ÊáâÁî®Á®ãÂºèÊôÇÔºåÂç≥Ë°®Á§∫ÊÇ®Â∑≤Èñ±ËÆÄ„ÄÅÁêÜËß£‰∏¶ÂêåÊÑèÂèóÊú¨‰ΩøÁî®Ê¢ùÊ¨æÁöÑÁ¥ÑÊùü„ÄÇÂ¶ÇÊûúÊÇ®‰∏çÂêåÊÑèÊú¨Ê¢ùÊ¨æÁöÑ‰ªª‰ΩïÈÉ®ÂàÜÔºåË´ãÁ´ãÂç≥ÂÅúÊ≠¢‰ΩøÁî®Êú¨ÊúçÂãô„ÄÇ",
    termsDescription: "2. ÊúçÂãôÊèèËø∞",
    termsDescriptionText:
      "To Do ÊòØ‰∏ÄÊ¨æÂÄã‰∫∫‰ªªÂãôÁÆ°ÁêÜÊáâÁî®Á®ãÂºèÔºåÊó®Âú®Âπ´Âä©Áî®Êà∂ÊúâÊïàÁµÑÁπîÂíåÁÆ°ÁêÜÊó•Â∏∏‰ªªÂãô„ÄÇÊú¨ÊúçÂãôÊèê‰æõ‰ª•‰∏ã‰∏ªË¶ÅÂäüËÉΩÔºö\n‚Ä¢ ‰ªªÂãôÂâµÂª∫„ÄÅÁ∑®ËºØÂíåÂà™Èô§\n‚Ä¢ Êó•ÊõÜÊï¥ÂêàËàá‰ªªÂãôÊéíÁ®ã\n‚Ä¢ Google ÂñÆ‰∏ÄÁôªÂÖ•ÔºàSSOÔºâË™çË≠â\n‚Ä¢ Ë∑®Ë£ùÁΩÆË≥áÊñôÂêåÊ≠•\n‚Ä¢ ‰ªªÂãôÊèêÈÜíÈÄöÁü•\n‚Ä¢ ÂÄã‰∫∫ÂåñË®≠ÂÆöËàáÂÅèÂ•ΩÁÆ°ÁêÜ",
    termsAccounts: "3. Áî®Êà∂Â∏≥ËôüËàáË™çË≠â",
    termsAccountsText:
      "Â∏≥ËôüÂâµÂª∫Ôºö\n‚Ä¢ ÊÇ®ÂøÖÈ†àÈÄèÈÅé Google ÂñÆ‰∏ÄÁôªÂÖ•ÔºàSSOÔºâÂâµÂª∫Â∏≥Ëôü\n‚Ä¢ ÊÇ®ÂøÖÈ†àÂπ¥Êªø 13 Ê≠≤ÊâçËÉΩ‰ΩøÁî®Êú¨ÊúçÂãô\n‚Ä¢ ÊÇ®ÂêåÊÑèÊèê‰æõÁúüÂØ¶„ÄÅÊ∫ñÁ¢∫‰∏îÂÆåÊï¥ÁöÑÂÄã‰∫∫Ë≥áË®ä\n\nÂ∏≥ËôüË≤¨‰ªªÔºö\n‚Ä¢ ÊÇ®ÊúâË≤¨‰ªªÁ∂≠Ë≠∑Â∏≥ËôüÂØÜÁ¢ºÁöÑÊ©üÂØÜÊÄß\n‚Ä¢ ÊÇ®Â∞çÂ∏≥Ëôü‰∏ãÁôºÁîüÁöÑÊâÄÊúâÊ¥ªÂãïË≤†ÂÆåÂÖ®Ë≤¨‰ªª\n‚Ä¢ Â¶ÇÁôºÁèæÊú™Á∂ìÊéàÊ¨ä‰ΩøÁî®ÊÇ®ÁöÑÂ∏≥ËôüÔºåË´ãÁ´ãÂç≥ÈÄöÁü•ÊàëÂÄë\n‚Ä¢ ÊÇ®‰∏çÂæóÂ∞áÂ∏≥ËôüËΩâËÆìÁµ¶Á¨¨‰∏âÊñπ",
    termsContent: "4. Áî®Êà∂ÂÖßÂÆπËàáË≥áÊñôÊâÄÊúâÊ¨ä",
    termsContentText:
      "ÂÖßÂÆπÊâÄÊúâÊ¨äÔºö\n‚Ä¢ ÊÇ®‰øùÁïôÂ∞çÂú®ÊáâÁî®Á®ãÂºè‰∏≠ÂâµÂª∫ÁöÑÊâÄÊúâÂÖßÂÆπÁöÑÂÆåÊï¥ÊâÄÊúâÊ¨ä\n‚Ä¢ ÂåÖÊã¨‰ΩÜ‰∏çÈôêÊñº‰ªªÂãôÊ®ôÈ°å„ÄÅÊèèËø∞„ÄÅÂÇôË®ª„ÄÅÈÄ£ÁµêÁ≠â\n\nË≥áÊñô‰ΩøÁî®Ôºö\n‚Ä¢ ÊÇ®Â∞çËá™Â∑±ÁöÑÂÖßÂÆπÂíåË≥áÊñôË≤†ÂÆåÂÖ®Ë≤¨‰ªª\n‚Ä¢ ÊàëÂÄë‰∏çÊúÉËÅ≤Á®±ÊìÅÊúâÊÇ®ÁöÑÂÄã‰∫∫‰ªªÂãôÊàñË≥áË®äÁöÑÊâÄÊúâÊ¨ä\n‚Ä¢ ÊÇ®Êéà‰∫àÊàëÂÄëÊèê‰æõÊúçÂãôÊâÄÈúÄÁöÑÂøÖË¶ÅÊäÄË°ìÊ¨äÈôê\n‚Ä¢ ÊàëÂÄë‰∏çÊúÉÂ∞áÊÇ®ÁöÑÂÄã‰∫∫ÂÖßÂÆπÁî®ÊñºÂïÜÊ•≠ÁõÆÁöÑ",
    termsAcceptableUse: "5. ÂèØÊé•ÂèóÁöÑ‰ΩøÁî®ÊîøÁ≠ñ",
    termsAcceptableUseText:
      "ÊÇ®ÂêåÊÑè‰∏çÊúÉÔºö\n‚Ä¢ Â∞áÊú¨ÊúçÂãôÁî®Êñº‰ªª‰ΩïÈùûÊ≥ïÁõÆÁöÑÊàñÈÅïÂèç‰ªª‰ΩïÈÅ©Áî®Ê≥ïÂæã\n‚Ä¢ ÂòóË©¶Êú™Á∂ìÊéàÊ¨äÂ≠òÂèñÊú¨ÊáâÁî®Á®ãÂºèÊàñÂÖ∂Áõ∏ÈóúÁ≥ªÁµ±\n‚Ä¢ Âπ≤Êìæ„ÄÅÁ†¥Â£ûÊàñÊêçÂÆ≥Êú¨ÊúçÂãôÁöÑÊ≠£Â∏∏ÈÅã‰Ωú\n‚Ä¢ ÂâµÂª∫„ÄÅ‰∏äÂÇ≥ÊàñÂàÜ‰∫´ÊúâÂÆ≥„ÄÅÂÜíÁäØÊÄß„ÄÅÊ≠ßË¶ñÊÄßÊàñ‰æµÁäØ‰ªñ‰∫∫Ê¨äÂà©ÁöÑÂÖßÂÆπ\n‚Ä¢ ÈÄ≤Ë°å‰ªª‰ΩïÂèØËÉΩÊêçÂÆ≥ÊúçÂãôÂÆâÂÖ®ÊÄßÁöÑÊ¥ªÂãï\n‚Ä¢ ‰ΩøÁî®Ëá™ÂãïÂåñÂ∑•ÂÖ∑ÊàñÊ©üÂô®‰∫∫Â≠òÂèñÊú¨ÊúçÂãô",
    termsPrivacy: "6. Èö±ÁßÅËàáË≥áÊñô‰øùË≠∑",
    termsPrivacyText:
      "ÊàëÂÄëÈ´òÂ∫¶ÈáçË¶ñÊÇ®ÁöÑÈö±ÁßÅÊ¨ä„ÄÇÊú¨ÊúçÂãôÁöÑË≥áÊñôËôïÁêÜÈÅµÂæ™ÊàëÂÄëÁöÑÈö±ÁßÅÊîøÁ≠ñÔºåË©≤ÊîøÁ≠ñË©≥Á¥∞Ë™™ÊòéÊàëÂÄëÂ¶Ç‰ΩïÊî∂ÈõÜ„ÄÅ‰ΩøÁî®„ÄÅÂÑ≤Â≠òÂíå‰øùË≠∑ÊÇ®ÁöÑÂÄã‰∫∫Ë≥áË®ä„ÄÇ\n\nÈáçË¶ÅÊèêÈÜíÔºö\n‚Ä¢ Ë´ã‰ªîÁ¥∞Èñ±ËÆÄÊàëÂÄëÁöÑÈö±ÁßÅÊîøÁ≠ñ\n‚Ä¢ ‰ΩøÁî®Êú¨ÊúçÂãôÂç≥Ë°®Á§∫ÊÇ®ÂêåÊÑèÊàëÂÄëÁöÑË≥áÊñôËôïÁêÜÊñπÂºè\n‚Ä¢ ÊàëÂÄëÊé°Áî®Ê•≠ÁïåÊ®ôÊ∫ñÁöÑÂÆâÂÖ®Êé™ÊñΩ‰øùË≠∑ÊÇ®ÁöÑË≥áÊñô\n‚Ä¢ ÊÇ®ÊúâÊ¨äÊéßÂà∂Ëá™Â∑±ÁöÑÂÄã‰∫∫Ë≥áÊñô",
    termsAvailability: "7. ÊúçÂãôÂèØÁî®ÊÄßËàáÁ∂≠Ë≠∑",
    termsAvailabilityText:
      "ÊúçÂãôÊâøË´æÔºö\n‚Ä¢ ÊàëÂÄëËá¥ÂäõÊñºÊèê‰æõÁ©©ÂÆöÂèØÈù†ÁöÑÊúçÂãôÈ´îÈ©ó\n‚Ä¢ ‰ΩÜÁÑ°Ê≥ï‰øùË≠âÊúçÂãôÁöÑÁµïÂ∞ç‰∏çÈñìÊñ∑ÊÄß\n\nÁ∂≠Ë≠∑ËàáÊõ¥Êñ∞Ôºö\n‚Ä¢ ÊàëÂÄëÂèØËÉΩÊúÉÈÄ≤Ë°åÂÆöÊúüÁ∂≠Ë≠∑ÔºåÊúüÈñìÂèØËÉΩÊö´ÊôÇÂΩ±ÈüøÊúçÂãô\n‚Ä¢ ÊàëÂÄë‰øùÁïôÈö®ÊôÇ‰øÆÊîπ„ÄÅÊö´ÂÅúÊàñÁµÇÊ≠¢ÊúçÂãôÁöÑÊ¨äÂà©\n‚Ä¢ ÈáçÂ§ßËÆäÊõ¥Â∞áÊèêÂâçÈÄöÁü•Áî®Êà∂\n‚Ä¢ ÊàëÂÄëÊúÉÁõ°ÂäõÂ∞áÁ∂≠Ë≠∑ÊôÇÈñìÂÆâÊéíÂú®ÈùûÈ´òÂ≥∞ÊôÇÊÆµ",
    termsLiability: "8. Ë≤¨‰ªªÈôêÂà∂ËàáÂÖçË≤¨ËÅ≤Êòé",
    termsLiabilityText:
      "ÂÖçË≤¨ËÅ≤ÊòéÔºö\n‚Ä¢ Êú¨ÊúçÂãôÊåâ„ÄåÁèæÁãÄ„ÄçÊèê‰æõÔºå‰∏çÊèê‰æõ‰ªª‰ΩïÊòéÁ§∫ÊàñÊöóÁ§∫ÁöÑ‰øùË≠â\n‚Ä¢ ÊàëÂÄë‰∏ç‰øùË≠âÊúçÂãôÁöÑÁÑ°ÈåØË™§ÊÄß„ÄÅ‰∏çÈñìÊñ∑ÊÄßÊàñÂÆåÂÖ®ÂÆâÂÖ®ÊÄß\n\nË≤¨‰ªªÈôêÂà∂Ôºö\n‚Ä¢ Âú®Ê≥ïÂæãÂÖÅË®±ÁöÑÊúÄÂ§ßÁØÑÂúçÂÖßÔºåÊàëÂÄë‰∏çÂ∞ç‰ª•‰∏ãÊêçÂÆ≥ÊâøÊìîË≤¨‰ªªÔºö\n  - Áõ¥Êé•„ÄÅÈñìÊé•„ÄÅÂÅ∂ÁÑ∂ÊàñÂæåÊûúÊÄßÊêçÂÆ≥\n  - Âõ†‰ΩøÁî®ÊàñÁÑ°Ê≥ï‰ΩøÁî®Êú¨ÊúçÂãôËÄåÈÄ†ÊàêÁöÑ‰ªª‰ΩïÊêçÂ§±\n  - Ë≥áÊñôÈÅ∫Â§±„ÄÅÊ•≠Âãô‰∏≠Êñ∑ÊàñÂÖ∂‰ªñÂïÜÊ•≠ÊêçÂ§±",
    termsChanges: "9. Ê¢ùÊ¨æ‰øÆÊîπ",
    termsChangesText:
      "‰øÆÊîπÊ¨äÂà©Ôºö\n‚Ä¢ ÊàëÂÄë‰øùÁïôÈö®ÊôÇ‰øÆÊîπÊú¨‰ΩøÁî®Ê¢ùÊ¨æÁöÑÊ¨äÂà©\n‚Ä¢ ÈáçÂ§ß‰øÆÊîπÂ∞áÈÄèÈÅéÊáâÁî®Á®ãÂºèÂÖßÈÄöÁü•ÊàñÈõªÂ≠êÈÉµ‰ª∂ÂëäÁü•\n‚Ä¢ ‰øÆÊîπÂæåÁöÑÊ¢ùÊ¨æÂ∞áÂú®ÁôºÂ∏ÉÂæåÁ´ãÂç≥ÁîüÊïà\n\nÊé•Âèó‰øÆÊîπÔºö\n‚Ä¢ ÊÇ®ÁπºÁ∫å‰ΩøÁî®Êú¨ÊúçÂãôÂç≥Ë°®Á§∫Êé•Âèó‰øÆÊîπÂæåÁöÑÊ¢ùÊ¨æ\n‚Ä¢ Â¶Ç‰∏çÂêåÊÑè‰øÆÊîπÂÖßÂÆπÔºåË´ãÂÅúÊ≠¢‰ΩøÁî®Êú¨ÊúçÂãô‰∏¶Âà™Èô§Â∏≥Ëôü\n‚Ä¢ Âª∫Ë≠∞ÊÇ®ÂÆöÊúüÊü•ÁúãÊú¨Ê¢ùÊ¨æ‰ª•‰∫ÜËß£ÊúÄÊñ∞ËÆäÊõ¥",
    termsContact: "10. ËÅØÁµ°Ë≥áË®äËàáÁà≠Ë≠∞Ëß£Ê±∫",
    termsContactText:
      "ÊäÄË°ìÊîØÊè¥Ôºö\n‚Ä¢ Â¶ÇÈÅáÊäÄË°ìÂïèÈ°åÔºåË´ãÈÄèÈÅéÊáâÁî®Á®ãÂºèÂÖßÊîØÊè¥ÂäüËÉΩËÅØÁπ´ÊàëÂÄë\n‚Ä¢ ÊàëÂÄëÂ∞áÂú®ÂêàÁêÜÊôÇÈñìÂÖßÂõûÊáâÊÇ®ÁöÑË©¢Âïè\n\nÁà≠Ë≠∞Ëß£Ê±∫Ôºö\n‚Ä¢ Â¶ÇÁôºÁîüÁà≠Ë≠∞ÔºåÊàëÂÄëÈºìÂãµÈÄèÈÅéÂèãÂ•ΩÂçîÂïÜËß£Ê±∫\n‚Ä¢ Êú¨Ê¢ùÊ¨æÂèó‰∏≠ËèØÊ∞ëÂúãÊ≥ïÂæãÁÆ°ËΩÑ\n‚Ä¢ ‰ªª‰ΩïÊ≥ïÂæãË®¥Ë®üÊáâÂêëÊúâÁÆ°ËΩÑÊ¨äÁöÑÊ≥ïÈô¢ÊèêËµ∑",
    termsAcknowledgment:
      "ÊÑüË¨ùÊÇ®ÈÅ∏Êìá To Do„ÄÇÈÄèÈÅé‰ΩøÁî®Êú¨ÊúçÂãôÔºåÊÇ®Á¢∫Ë™çÂ∑≤ÂÖÖÂàÜÈñ±ËÆÄ„ÄÅÁêÜËß£‰∏¶ÂêåÊÑèÂèóÊú¨‰ΩøÁî®Ê¢ùÊ¨æÁöÑÁ¥ÑÊùü„ÄÇÊàëÂÄëÊâøË´æÁÇ∫ÊÇ®Êèê‰æõÂÑ™Ë≥™ÁöÑ‰ªªÂãôÁÆ°ÁêÜÊúçÂãôÈ´îÈ©ó„ÄÇ",
    // Privacy Policy translations
    privacyTitle: "Èö±ÁßÅÊîøÁ≠ñ",
    privacyLastUpdated: "ÊúÄÂæåÊõ¥Êñ∞Ôºö",
    privacyIntroduction: "1. ÊîøÁ≠ñÊ¶ÇËø∞",
    privacyIntroductionText:
      "To DoÔºà„ÄåÊàëÂÄë„Äç„ÄÅ„ÄåÊú¨ÂÖ¨Âè∏„ÄçÊàñ„ÄåÊúçÂãôÊèê‰æõËÄÖ„ÄçÔºâÊ∑±Áü•ÂÄã‰∫∫Èö±ÁßÅÁöÑÈáçË¶ÅÊÄßÔºå‰∏¶Ëá¥ÂäõÊñº‰øùË≠∑ÊÇ®ÁöÑÂÄã‰∫∫Ë≥áÊñôÂÆâÂÖ®„ÄÇÊú¨Èö±ÁßÅÊîøÁ≠ñË©≥Á¥∞Ë™™ÊòéÊàëÂÄëÂ¶Ç‰ΩïÊî∂ÈõÜ„ÄÅ‰ΩøÁî®„ÄÅÂÑ≤Â≠ò„ÄÅ‰øùË≠∑ÂíåÂàÜ‰∫´ÊÇ®Âú®‰ΩøÁî® To Do ‰ªªÂãôÁÆ°ÁêÜÊáâÁî®Á®ãÂºèÊôÇÊèê‰æõÁöÑÂÄã‰∫∫Ë≥áË®ä„ÄÇ\n\nÊàëÂÄëÊâøË´æÈÅµÂæ™Áõ∏ÈóúÊ≥ïÂæãÊ≥ïË¶èÔºåÂåÖÊã¨„ÄäÂÄã‰∫∫Ë≥áÊñô‰øùË≠∑Ê≥ï„ÄãÁ≠âÔºåÁ¢∫‰øùÊÇ®ÁöÑÈö±ÁßÅÊ¨äÂæóÂà∞ÂÖÖÂàÜ‰øùË≠∑„ÄÇ",
    privacyInformation: "2. ÊàëÂÄëÊî∂ÈõÜÁöÑÂÄã‰∫∫Ë≥áÊñôÈ°ûÂûã",
    privacyAccountInfo: "Â∏≥ËôüÁõ∏ÈóúË≥áÊñôÔºö",
    privacyAccountInfoText:
      "Âü∫Êú¨Â∏≥ËôüË≥áË®äÔºö\n‚Ä¢ ÈõªÂ≠êÈÉµ‰ª∂Âú∞ÂùÄÔºàÈÄèÈÅé Google SSO ÂèñÂæóÔºâ\n‚Ä¢ È°ØÁ§∫ÂêçÁ®±ÔºàÂèØËá™Ë®ÇÔºâ\n‚Ä¢ ÂÄã‰∫∫Ë≥áÊñôÂúñÁâáÔºàÂ¶Ç Google Â∏≥ËôüÊèê‰æõÔºâ\n‚Ä¢ Â∏≥ËôüÂâµÂª∫ÊôÇÈñìÂíåÊúÄÂæåÁôªÂÖ•ÊôÇÈñì\n\n‰ªªÂãôÁÆ°ÁêÜË≥áÊñôÔºö\n‚Ä¢ ‰ªªÂãôÊ®ôÈ°å„ÄÅÊèèËø∞ÂíåË©≥Á¥∞ÂÖßÂÆπ\n‚Ä¢ ‰ªªÂãôÊà™Ê≠¢Êó•ÊúüÂíåÊèêÈÜíÊôÇÈñì\n‚Ä¢ ‰ªªÂãôÂàÜÈ°û„ÄÅÂÑ™ÂÖàÁ¥öÂíåÊ®ôÁ±§\n‚Ä¢ ‰ªªÂãôÈÄ£ÁµêÂíåÈôÑ‰ª∂Ë≥áË®ä\n‚Ä¢ ‰ªªÂãôÂÆåÊàêÁãÄÊÖãÂíåÊ≠∑Âè≤Ë®òÈåÑ\n\n‰ΩøÁî®Ë°åÁÇ∫Ë≥áÊñôÔºö\n‚Ä¢ ÊáâÁî®Á®ãÂºè‰ΩøÁî®È†ªÁéáÂíåÊ®°Âºè\n‚Ä¢ ÂäüËÉΩ‰ΩøÁî®ÂÅèÂ•ΩÂíåË®≠ÂÆö\n‚Ä¢ Ë£ùÁΩÆË≥áË®äÂíå‰ΩúÊ•≠Á≥ªÁµ±ÁâàÊú¨\n‚Ä¢ ÈåØË™§Â†±ÂëäÂíåÊïàËÉΩË≥áÊñôÔºàÂåøÂêçÂåñÔºâ",
    privacyUse: "3. ÂÄã‰∫∫Ë≥áÊñô‰ΩøÁî®ÁõÆÁöÑËàáÊ≥ïÂæã‰æùÊìö",
    privacyUseText:
      "ÊàëÂÄë‰ΩøÁî®ÊÇ®ÁöÑÂÄã‰∫∫Ë≥áÊñôÁî®Êñº‰ª•‰∏ãÁõÆÁöÑÔºö\n\nÊúçÂãôÊèê‰æõÔºö\n‚Ä¢ Êèê‰æõ‰ªªÂãôÁÆ°ÁêÜÊ†∏ÂøÉÂäüËÉΩ\n‚Ä¢ Ë∑®Ë£ùÁΩÆÂêåÊ≠•ÊÇ®ÁöÑ‰ªªÂãôË≥áÊñô\n‚Ä¢ ÁôºÈÄÅ‰ªªÂãôÊèêÈÜíÈÄöÁü•\n‚Ä¢ Á∂≠Ë≠∑ÂíåÊîπÂñÑÊúçÂãôÂìÅË≥™\n\nÊäÄË°ìÊîØÊè¥Ôºö\n‚Ä¢ Ë®∫Êñ∑ÂíåËß£Ê±∫ÊäÄË°ìÂïèÈ°å\n‚Ä¢ Êèê‰æõÂÆ¢Êà∂ÊúçÂãôÂíåÊäÄË°ìÊîØÊè¥\n‚Ä¢ ÈÄ≤Ë°åÁ≥ªÁµ±Á∂≠Ë≠∑ÂíåÊõ¥Êñ∞\n\nÂÆâÂÖ®Èò≤Ë≠∑Ôºö\n‚Ä¢ Èò≤Ê≠¢Êú™Á∂ìÊéàÊ¨äÁöÑÂ≠òÂèñ\n‚Ä¢ ÂÅµÊ∏¨ÂíåÈò≤ÁØÑË©êÊ¨∫Ë°åÁÇ∫\n‚Ä¢ ‰øùË≠∑Á≥ªÁµ±ÂíåË≥áÊñôÂÆâÂÖ®\n\nÊ≥ïÂæã‰æùÊìöÔºö\n‚Ä¢ Âü∫ÊñºÊÇ®ÁöÑÊòéÁ¢∫ÂêåÊÑè\n‚Ä¢ ÁÇ∫Â±•Ë°åËàáÊÇ®ÁöÑÊúçÂãôÂêàÁ¥Ñ\n‚Ä¢ ÁÇ∫ÈÅµÂÆàÊ≥ïÂæãÁæ©Âãô\n‚Ä¢ ÁÇ∫‰øùË≠∑ÊàëÂÄëÁöÑÂêàÊ≥ïÊ¨äÁõä",
    privacyStorage: "4. Ë≥áÊñôÂÑ≤Â≠òËàáÂÆâÂÖ®‰øùË≠∑Êé™ÊñΩ",
    privacyStorageText:
      "Ë≥áÊñôÂÑ≤Â≠òÔºö\n‚Ä¢ ‰ΩøÁî® Supabase Èõ≤Á´ØÂü∫Á§éË®≠ÊñΩÈÄ≤Ë°åÂÆâÂÖ®ÂÑ≤Â≠ò\n‚Ä¢ Ë≥áÊñôÂàÜÊï£ÂÑ≤Â≠òÂú®Â§öÂÄãÂú∞ÁêÜ‰ΩçÁΩÆ\n‚Ä¢ ÂÆöÊúüÈÄ≤Ë°åË≥áÊñôÂÇô‰ªΩÂíåÁÅΩÈõ£ÊÅ¢Âæ©Ê∏¨Ë©¶\n\nÂÆâÂÖ®Êé™ÊñΩÔºö\n‚Ä¢ Êé°Áî®Ê•≠ÁïåÊ®ôÊ∫ñÁöÑÂä†ÂØÜÊäÄË°ìÔºàAES-256Ôºâ\n‚Ä¢ Ë≥áÊñôÂÇ≥Ëº∏‰ΩøÁî® TLS 1.3 Âä†ÂØÜ\n‚Ä¢ ÂØ¶ÊñΩÂ§öÂ±§Ê¨°Â≠òÂèñÊéßÂà∂ÂíåË∫´‰ªΩÈ©óË≠â\n‚Ä¢ ÂÆöÊúüÈÄ≤Ë°åÂÆâÂÖ®ÊºèÊ¥ûÊéÉÊèèÂíåÊª≤ÈÄèÊ∏¨Ë©¶\n‚Ä¢ Âª∫Á´ãÂÆåÊï¥ÁöÑË≥áÊñôÂ≠òÂèñÊó•Ë™åÂíåÁõ£ÊéßÁ≥ªÁµ±\n\n‰∫∫Âì°ÁÆ°ÁêÜÔºö\n‚Ä¢ ÂÉÖÊéàÊ¨äÂøÖË¶Å‰∫∫Âì°ÂèØÂ≠òÂèñÂÄã‰∫∫Ë≥áÊñô\n‚Ä¢ ÊâÄÊúâÂì°Â∑•Á∞ΩÁΩ≤‰øùÂØÜÂçîË≠∞\n‚Ä¢ ÂÆöÊúüÈÄ≤Ë°åÈö±ÁßÅ‰øùË≠∑ÂüπË®ì\n‚Ä¢ Âª∫Á´ãË≥áÊñôËôïÁêÜÊ®ôÊ∫ñ‰ΩúÊ•≠Á®ãÂ∫è",
    privacySharing: "5. Ë≥áÊñôÂàÜ‰∫´ËàáÁ¨¨‰∏âÊñπÊè≠Èú≤",
    privacySharingText:
      "ÊàëÂÄëÊâøË´æ‰∏çÊúÉÂá∫ÂîÆ„ÄÅÂá∫ÁßüÊàñ‰∫§ÊòìÊÇ®ÁöÑÂÄã‰∫∫Ë≥áÊñô„ÄÇÊàëÂÄëÂÉÖÂú®‰ª•‰∏ãÊÉÖÊ≥Å‰∏ãÂàÜ‰∫´ÊÇ®ÁöÑË≥áÊñôÔºö\n\nÁ∂ìÊÇ®ÂêåÊÑèÔºö\n‚Ä¢ Âú®ÊÇ®ÊòéÁ¢∫ÂêåÊÑèÁöÑÊÉÖÊ≥Å‰∏ã\n‚Ä¢ ÊÇ®ÂèØÈö®ÊôÇÊí§ÂõûÂêåÊÑè\n\nÊ≥ïÂæãË¶ÅÊ±ÇÔºö\n‚Ä¢ ÁÇ∫ÈÅµÂÆàÊ≥ïÈô¢ÂëΩ‰ª§ÊàñÊ≥ïÂæãË¶èÂÆö\n‚Ä¢ ÁÇ∫ÈÖçÂêàÊîøÂ∫úÊ©üÈóúË™øÊü•\n‚Ä¢ ÁÇ∫‰øùË≠∑ÊàëÂÄëÁöÑÂêàÊ≥ïÊ¨äÁõä\n\nÊúçÂãôÊèê‰æõËÄÖÔºö\n‚Ä¢ ËàáÂèØ‰ø°Ë≥¥ÁöÑÁ¨¨‰∏âÊñπÊúçÂãôÂïÜÂêà‰ΩúÔºàÂ¶Ç Google„ÄÅSupabaseÔºâ\n‚Ä¢ Á∞ΩÁΩ≤Âö¥Ê†ºÁöÑË≥áÊñô‰øùË≠∑ÂçîË≠∞\n‚Ä¢ Á¢∫‰øùÁ¨¨‰∏âÊñπÈÅµÂæ™Áõ∏ÂêåÁöÑÈö±ÁßÅ‰øùË≠∑Ê®ôÊ∫ñ\n‚Ä¢ ÂÆöÊúüÂØ©Êü•Á¨¨‰∏âÊñπÂêàË¶èÁãÄÊ≥Å\n\nÁ∑äÊÄ•ÊÉÖÊ≥ÅÔºö\n‚Ä¢ ÁÇ∫‰øùË≠∑ÊÇ®Êàñ‰ªñ‰∫∫ÁöÑÁîüÂëΩÂÆâÂÖ®\n‚Ä¢ ÁÇ∫Èò≤Ê≠¢ÈáçÂ§ßÊêçÂÆ≥ÁôºÁîü",
    privacyThirdParty: "6. Á¨¨‰∏âÊñπÊúçÂãôÊï¥Âêà",
    privacyThirdPartyText:
      "Êú¨ÊáâÁî®Á®ãÂºèÊï¥Âêà‰ª•‰∏ãÁ¨¨‰∏âÊñπÊúçÂãôÔºö\n\nGoogle ÊúçÂãôÔºö\n‚Ä¢ Google ÂñÆ‰∏ÄÁôªÂÖ•ÔºàSSOÔºâË™çË≠â\n‚Ä¢ Áî®ÊñºË∫´‰ªΩÈ©óË≠âÂíåÂ∏≥ËôüÁÆ°ÁêÜ\n‚Ä¢ ÈÅµÂæ™ Google Èö±ÁßÅÊîøÁ≠ñ\n\nSupabase Âπ≥Âè∞Ôºö\n‚Ä¢ Èõ≤Á´ØË≥áÊñôÂ∫´ÂíåÂæåÁ´ØÊúçÂãô\n‚Ä¢ Êèê‰æõÂÆâÂÖ®ÁöÑË≥áÊñôÂÑ≤Â≠òÂíå API ÊúçÂãô\n‚Ä¢ ÈÅµÂæ™ Supabase Ë≥áÊñô‰øùË≠∑ÊîøÁ≠ñ\n\nÈáçË¶ÅÊèêÈÜíÔºö\n‚Ä¢ ÈÄô‰∫õÁ¨¨‰∏âÊñπÊúçÂãôÊúâÂÖ∂Áç®Á´ãÁöÑÈö±ÁßÅÊîøÁ≠ñ\n‚Ä¢ Âª∫Ë≠∞ÊÇ®Ë©≥Á¥∞Èñ±ËÆÄÁõ∏ÈóúÊîøÁ≠ñ\n‚Ä¢ ÊàëÂÄëÊúÉÂÆöÊúüÂØ©Êü•Á¨¨‰∏âÊñπÊúçÂãôÁöÑÂêàË¶èÊÄß\n‚Ä¢ Â¶ÇÁôºÁèæÂÆâÂÖ®ÂïèÈ°åÔºåÊàëÂÄëÊúÉÁ´ãÂç≥Êé°ÂèñÈÅ©Áï∂Êé™ÊñΩ",
    privacyRights: "7. ÊÇ®ÁöÑÈö±ÁßÅÊ¨äÂà©",
    privacyRightsText:
      "Ê†πÊìöÁõ∏ÈóúÊ≥ïÂæãÊ≥ïË¶èÔºåÊÇ®‰∫´Êúâ‰ª•‰∏ãÊ¨äÂà©Ôºö\n\nË≥áÊñôÂ≠òÂèñÊ¨äÔºö\n‚Ä¢ Êü•Ë©¢ÊàëÂÄëÊåÅÊúâÁöÑÊÇ®ÁöÑÂÄã‰∫∫Ë≥áÊñô\n‚Ä¢ ‰∫ÜËß£Ë≥áÊñôËôïÁêÜÁöÑÁõÆÁöÑÂíåÊñπÂºè\n‚Ä¢ ÂèñÂæóË≥áÊñôËôïÁêÜÁöÑÁõ∏ÈóúË≥áË®ä\n\nË≥áÊñôÊõ¥Ê≠£Ê¨äÔºö\n‚Ä¢ Ë¶ÅÊ±ÇÊõ¥Ê≠£‰∏çÊ≠£Á¢∫ÁöÑÂÄã‰∫∫Ë≥áÊñô\n‚Ä¢ Ë¶ÅÊ±ÇË£úÂÖÖ‰∏çÂÆåÊï¥ÁöÑÂÄã‰∫∫Ë≥áÊñô\n‚Ä¢ ÈÄèÈÅéÊáâÁî®Á®ãÂºèË®≠ÂÆöËá™Ë°å‰øÆÊîπÈÉ®ÂàÜË≥áÊñô\n\nË≥áÊñôÂà™Èô§Ê¨äÔºö\n‚Ä¢ Ë¶ÅÊ±ÇÂà™Èô§ÊÇ®ÁöÑÂÄã‰∫∫Ë≥áÊñô\n‚Ä¢ Âà™Èô§ÊÇ®ÁöÑÂ∏≥ËôüÂíåÁõ∏ÈóúË≥áÊñô\n‚Ä¢ Âú®ÁâπÂÆöÊÉÖÊ≥Å‰∏ãË¶ÅÊ±ÇÈôêÂà∂Ë≥áÊñôËôïÁêÜ\n\nË≥áÊñôÂèØÊîúÊ¨äÔºö\n‚Ä¢ Ë¶ÅÊ±Ç‰ª•ÁµêÊßãÂåñÊ†ºÂºèÂèñÂæóÊÇ®ÁöÑË≥áÊñô\n‚Ä¢ Â∞áË≥áÊñôËΩâÁßªËá≥ÂÖ∂‰ªñÊúçÂãôÊèê‰æõËÄÖ\n‚Ä¢ ‰∏ãËºâÊÇ®ÁöÑ‰ªªÂãôË≥áÊñôÂÇô‰ªΩ\n\nÂêåÊÑèÊí§ÂõûÊ¨äÔºö\n‚Ä¢ Èö®ÊôÇÊí§ÂõûÂ∞çË≥áÊñôËôïÁêÜÁöÑÂêåÊÑè\n‚Ä¢ ÂÅúÊ≠¢Êé•Êî∂ÁâπÂÆöÈ°ûÂûãÁöÑÈÄöÁü•\n‚Ä¢ Ë™øÊï¥Èö±ÁßÅË®≠ÂÆöÂÅèÂ•Ω",
    privacyRetention: "8. Ë≥áÊñô‰øùÁïôÊúüÈôê",
    privacyRetentionText:
      "ÊàëÂÄëÊ†πÊìö‰ª•‰∏ãÂéüÂâá‰øùÁïôÊÇ®ÁöÑÂÄã‰∫∫Ë≥áÊñôÔºö\n\nÂ∏≥ËôüÂ≠òÁ∫åÊúüÈñìÔºö\n‚Ä¢ Âú®ÊÇ®ÁöÑÂ∏≥ËôüÊúâÊïàÊúüÈñìÊåÅÁ∫å‰øùÁïô\n‚Ä¢ Áî®ÊñºÊèê‰æõÊúçÂãôÂíåÊäÄË°ìÊîØÊè¥\n‚Ä¢ Á∂≠Ë≠∑ÊúçÂãôÂìÅË≥™ÂíåÂÆâÂÖ®ÊÄß\n\nÂ∏≥ËôüÂà™Èô§ÂæåÔºö\n‚Ä¢ Á´ãÂç≥Âà™Èô§ÂÄã‰∫∫Ë≠òÂà•Ë≥áÊñô\n‚Ä¢ ÂåøÂêçÂåñÁµ±Ë®àË≥áÊñôÂèØ‰øùÁïôÁî®ÊñºÂàÜÊûê\n‚Ä¢ Ê≥ïÂæãË¶ÅÊ±Ç‰øùÁïôÁöÑË≥áÊñôÈô§Â§ñ\n\nÁâπÊÆäÊÉÖÊ≥ÅÔºö\n‚Ä¢ Ê≥ïÂæãË®¥Ë®üÊúüÈñìÂèØËÉΩÂª∂Èï∑‰øùÁïô\n‚Ä¢ ÂÆâÂÖ®‰∫ã‰ª∂Ë™øÊü•ÊúüÈñìÂèØËÉΩÂª∂Èï∑‰øùÁïô\n‚Ä¢ ÊúÄÂ§ö‰∏çË∂ÖÈÅé 7 Âπ¥ÔºàÊ≥ïÂæãË¶ÅÊ±Ç‰∏äÈôêÔºâ\n\nË≥áÊñôÈä∑ÊØÄÔºö\n‚Ä¢ ‰ΩøÁî®ÂÆâÂÖ®Âà™Èô§ÊäÄË°ì\n‚Ä¢ Á¢∫‰øùË≥áÊñôÁÑ°Ê≥ïÂæ©Âéü\n‚Ä¢ ÂÆöÊúüÊ™¢Êü•Âà™Èô§ÊïàÊûú",
    privacyChildren: "9. Êú™ÊàêÂπ¥‰∫∫Èö±ÁßÅ‰øùË≠∑",
    privacyChildrenText:
      "Âπ¥ÈΩ°ÈôêÂà∂Ôºö\n‚Ä¢ Êú¨ÊúçÂãô‰∏çÈÅ©Áî®Êñº 13 Ê≠≤‰ª•‰∏ãÁöÑÂÖíÁ´•\n‚Ä¢ ÊàëÂÄë‰∏çÊúÉÊïÖÊÑèÊî∂ÈõÜ 13 Ê≠≤‰ª•‰∏ãÂÖíÁ´•ÁöÑÂÄã‰∫∫Ë≥áÊñô\n‚Ä¢ Â¶ÇÁôºÁèæÊ≠§È°ûÊÉÖÊ≥ÅÔºåÊàëÂÄëÊúÉÁ´ãÂç≥Âà™Èô§Áõ∏ÈóúË≥áÊñô\n\nÂÆ∂Èï∑Áõ£Ë≠∑Ôºö\n‚Ä¢ Âª∫Ë≠∞ÂÆ∂Èï∑Áõ£Áù£Êú™ÊàêÂπ¥Â≠êÂ•≥‰ΩøÁî®Êú¨ÊúçÂãô\n‚Ä¢ Â¶ÇÁôºÁèæ‰∏çÁï∂‰ΩøÁî®ÔºåË´ãÁ´ãÂç≥ËÅØÁπ´ÊàëÂÄë\n‚Ä¢ ÊàëÂÄëÊúÉÈÖçÂêàÂÆ∂Èï∑ÈÄ≤Ë°åÈÅ©Áï∂ËôïÁêÜ\n\nÁâπÊÆä‰øùË≠∑Ôºö\n‚Ä¢ Â∞çÊú™ÊàêÂπ¥‰∫∫ÁöÑË≥áÊñôËôïÁêÜÊõ¥Âä†Ë¨πÊÖé\n‚Ä¢ Êèê‰æõÈ°çÂ§ñÁöÑÈö±ÁßÅ‰øùË≠∑Êé™ÊñΩ\n‚Ä¢ ÂÆöÊúüÂØ©Êü•Áõ∏ÈóúÊîøÁ≠ñ",
    privacyInternational: "10. ÂúãÈöõË≥áÊñôÂÇ≥Ëº∏",
    privacyInternationalText:
      "ÂÇ≥Ëº∏ÁØÑÂúçÔºö\n‚Ä¢ ÊÇ®ÁöÑË≥áÊñôÂèØËÉΩÂÇ≥Ëº∏Ëá≥Âè∞ÁÅ£‰ª•Â§ñÁöÑÂú∞ÂçÄ\n‚Ä¢ ‰∏ªË¶ÅÁî®ÊñºÈõ≤Á´ØÊúçÂãôÂíåÊäÄË°ìÊîØÊè¥\n‚Ä¢ ÈÅµÂæ™ÂúãÈöõË≥áÊñô‰øùË≠∑Ê®ôÊ∫ñ\n\n‰øùË≠∑Êé™ÊñΩÔºö\n‚Ä¢ ËàáÊé•Êî∂ÊñπÁ∞ΩÁΩ≤Ë≥áÊñô‰øùË≠∑ÂçîË≠∞\n‚Ä¢ Á¢∫‰øùÈÅ©Áï∂ÁöÑÊäÄË°ìÂíåÁµÑÁπîÊé™ÊñΩ\n‚Ä¢ ÂÆöÊúüË©ï‰º∞ÂÇ≥Ëº∏ÂÆâÂÖ®ÊÄß\n‚Ä¢ ÈÅµÂÆàÁõ∏ÈóúÂúãÈöõÊ≥ïË¶è\n\nÊÇ®ÁöÑÊ¨äÂà©Ôºö\n‚Ä¢ ÂèØË¶ÅÊ±Ç‰∫ÜËß£Ë≥áÊñôÂÇ≥Ëº∏Ë©≥ÊÉÖ\n‚Ä¢ ÂèØË¶ÅÊ±ÇÈôêÂà∂ÂúãÈöõÂÇ≥Ëº∏\n‚Ä¢ ÂèØÈö®ÊôÇÊí§ÂõûÂÇ≥Ëº∏ÂêåÊÑè",
    privacyChanges: "11. ÊîøÁ≠ñÊõ¥Êñ∞ËàáÈÄöÁü•",
    privacyChangesText:
      "Êõ¥Êñ∞Á®ãÂ∫èÔºö\n‚Ä¢ ÊàëÂÄëÊúÉÂÆöÊúüÂØ©Êü•ÂíåÊõ¥Êñ∞Êú¨Èö±ÁßÅÊîøÁ≠ñ\n‚Ä¢ ÈáçÂ§ßËÆäÊõ¥ÊúÉÊèêÂâç 30 Â§©ÈÄöÁü•\n‚Ä¢ ÈÄèÈÅéÊáâÁî®Á®ãÂºèÂÖßÈÄöÁü•ÊàñÈõªÂ≠êÈÉµ‰ª∂ÂëäÁü•\n‚Ä¢ Êõ¥Êñ∞Êó•ÊúüÊúÉÈ°ØÁ§∫Âú®ÊîøÁ≠ñÈ†ÇÈÉ®\n\nËÆäÊõ¥È°ûÂûãÔºö\n‚Ä¢ Êñ∞Â¢ûË≥áÊñôÊî∂ÈõÜÈ°ûÂûã\n‚Ä¢ ‰øÆÊîπË≥áÊñô‰ΩøÁî®ÁõÆÁöÑ\n‚Ä¢ Êõ¥Êñ∞ÂÆâÂÖ®‰øùË≠∑Êé™ÊñΩ\n‚Ä¢ Ë™øÊï¥ÊÇ®ÁöÑÊ¨äÂà©ÂÖßÂÆπ\n\nÊé•ÂèóËÆäÊõ¥Ôºö\n‚Ä¢ ÁπºÁ∫å‰ΩøÁî®ÊúçÂãôÂç≥Ë°®Á§∫Êé•ÂèóÊñ∞ÊîøÁ≠ñ\n‚Ä¢ Â¶Ç‰∏çÂêåÊÑèËÆäÊõ¥ÔºåÂèØÂÅúÊ≠¢‰ΩøÁî®‰∏¶Âà™Èô§Â∏≥Ëôü\n‚Ä¢ Âª∫Ë≠∞ÂÆöÊúüÊü•ÁúãÊúÄÊñ∞ÊîøÁ≠ñÂÖßÂÆπ",
    privacyContact: "12. ËÅØÁµ°ÊàëÂÄëËàáÁî≥Ë®¥ÁÆ°ÈÅì",
    privacyContactText:
      "Èö±ÁßÅÂïèÈ°åË´ÆË©¢Ôºö\n‚Ä¢ ÊáâÁî®Á®ãÂºèÂÖßÊîØÊè¥ÂäüËÉΩ\n‚Ä¢ ÈõªÂ≠êÈÉµ‰ª∂Ôºöprivacy@todo-app.com\n‚Ä¢ ÊàëÂÄëÊúÉÂú® 7 ÂÄãÂ∑•‰ΩúÂ§©ÂÖßÂõûË¶Ü\n\nË≥áÊñô‰øùË≠∑Áî≥Ë®¥Ôºö\n‚Ä¢ Â¶ÇÂ∞çË≥áÊñôËôïÁêÜÊúâÁñëÊÖÆÔºåÂèØÊèêÂá∫Áî≥Ë®¥\n‚Ä¢ ÊàëÂÄëÊúÉË™çÁúüËôïÁêÜÊØè‰ª∂Áî≥Ë®¥\n‚Ä¢ Êèê‰æõÊòéÁ¢∫ÁöÑËôïÁêÜÁµêÊûúÂíåË™™Êòé\n\nÁõ£ÁÆ°Ê©üÈóúÔºö\n‚Ä¢ Â¶ÇÂ∞çËôïÁêÜÁµêÊûú‰∏çÊªøÔºåÂèØÂêë‰∏ªÁÆ°Ê©üÈóúÁî≥Ë®¥\n‚Ä¢ Âè∞ÁÅ£ÂÄã‰∫∫Ë≥áÊñô‰øùË≠∑ÂßîÂì°ÊúÉ\n‚Ä¢ Áõ∏ÈóúÊ≥ïÂæãÊïëÊøüÁÆ°ÈÅì",
    privacyAcknowledgment:
      "ÊÑüË¨ùÊÇ®‰ø°‰ªª To Do„ÄÇÊàëÂÄëÊâøË´æÊåÅÁ∫åÊîπÈÄ≤Èö±ÁßÅ‰øùË≠∑Êé™ÊñΩÔºåÁÇ∫ÊÇ®Êèê‰æõÂÆâÂÖ®ÂèØÈù†ÁöÑ‰ªªÂãôÁÆ°ÁêÜÊúçÂãô„ÄÇÂ¶ÇÊúâ‰ªª‰ΩïÈö±ÁßÅÁõ∏ÈóúÂïèÈ°åÔºåË´ãÈö®ÊôÇËàáÊàëÂÄëËÅØÁπ´„ÄÇ",
    googleAccount: "Google Â∏≥Ëôü",
    logout: "ÁôªÂá∫",
    selectTime: "ÈÅ∏ÊìáÊôÇÈñì",
    hour: "ÊôÇ",
    minute: "ÂàÜ",
    done: "ÂÆåÊàê",
    time: "ÊôÇÈñì",
    today: "‰ªäÂ§©",
    taskReminder: "‰ªªÂãôÊèêÈÜí",
    // ‰∏çÂêåÊôÇÈñìÈªûÁöÑÈÄöÁü•ÊñáÂ≠ó
    reminder30minTitle: "‰ªªÂãôÂç≥Â∞áÈñãÂßã",
    reminder30minBody: "ÊÇ®ÁöÑ‰ªªÂãôÂ∞áÂú® 30 ÂàÜÈêòÂæåÈñãÂßã",
    reminder10minTitle: "‰ªªÂãôÂç≥Â∞áÈñãÂßã",
    reminder10minBody: "ÊÇ®ÁöÑ‰ªªÂãôÂ∞áÂú® 10 ÂàÜÈêòÂæåÈñãÂßã",
    reminder5minTitle: "‰ªªÂãôÂç≥Â∞áÈñãÂßã",
    reminder5minBody: "ÊÇ®ÁöÑ‰ªªÂãôÂ∞áÂú® 5 ÂàÜÈêòÂæåÈñãÂßã",
    notificationPermission: "ÈÄöÁü•Ê¨äÈôê",
    notificationPermissionMessage:
      "To Do ÈúÄË¶ÅÈÄöÁü•Ê¨äÈôêÊâçËÉΩÂú®‰ªªÂãôÈñãÂßãÂâç 30 ÂàÜÈêòÊèêÈÜíÊÇ®„ÄÇ",
    enableNotifications: "ÂïüÁî®ÈÄöÁü•",
    notLater: "Êö´‰∏çÂïüÁî®",
    theme: "‰∏ªÈ°å",
    lightMode: "Ê∑∫Ëâ≤Ê®°Âºè",
    darkMode: "Ê∑±Ëâ≤Ê®°Âºè",
    appearance: "Â§ñËßÄ",
    byContinuing: "ÁπºÁ∫å‰ΩøÁî®Âç≥Ë°®Á§∫ÊÇ®ÂêåÊÑèÊàëÂÄëÁöÑ",
    and: "Âíå",
    // ÊèêÈÜíË®≠ÂÆö
    reminderSettings: "ÊèêÈÜí",
    reminder30min: "30ÂàÜÈêòÂâç",
    reminder10min: "10ÂàÜÈêòÂâç",
    reminder5min: "5ÂàÜÈêòÂâç",
    reminderEnabled: "ÂïüÁî®",
    reminderDisabled: "ÊèêÈÜíÂ∑≤ÂÅúÁî®",
    reminderNote: "ÊèêÈÜíÂÉÖÊúÉÁôºÈÄÅÁµ¶Â∑≤Ë®≠ÂÆöÊôÇÈñìÁöÑ‰ªªÂãô",
    // ÁâàÊú¨Êõ¥Êñ∞ÁøªË≠Ø
    versionUpdateAvailable: "ÁâàÊú¨Êõ¥Êñ∞ÂèØÁî®",
    forceUpdateRequired: "Ê≠§Êõ¥Êñ∞ÁÇ∫ÂøÖË¶ÅÊõ¥Êñ∞",
    currentVersion: "Áï∂ÂâçÁâàÊú¨",
    latestVersion: "ÊúÄÊñ∞ÁâàÊú¨",
    whatsNew: "Êõ¥Êñ∞ÂÖßÂÆπ",
    updateBenefits: "Êõ¥Êñ∞Â•ΩËôï",
    bugFixes: "ÈåØË™§‰øÆÊ≠£ÂíåÁ©©ÂÆöÊÄßÊîπÂñÑ",
    newFeatures: "Êñ∞ÂäüËÉΩÂíåÊîπÈÄ≤",
    securityUpdates: "ÂÆâÂÖ®ÊÄßÊõ¥Êñ∞",
    performanceImprovements: "ÊÄßËÉΩÂÑ™Âåñ",
    updateLater: "Á®çÂæåÊõ¥Êñ∞",
    updateNow: "Á´ãÂç≥Êõ¥Êñ∞",
    error: "ÈåØË™§",
    updateLinkError:
      "ÁÑ°Ê≥ïÈñãÂïüÊõ¥Êñ∞ÈÄ£ÁµêÔºåË´ãÊâãÂãïÂâçÂæÄ App Store Êàñ TestFlight Ê™¢Êü•Êõ¥Êñ∞„ÄÇ",
  },
};

// Language context
const LanguageContext = createContext({
  language: "en",
  setLanguage: () => {},
  t: translations.en,
});

// Theme context
const ThemeContext = createContext({
  theme: lightTheme,
  themeMode: "light",
  setThemeMode: () => {},
  toggleTheme: () => {},
});

function getToday() {
  const today = new Date();
  const year = today.getFullYear();
  const month = String(today.getMonth() + 1).padStart(2, "0");
  const day = String(today.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}

// Ê†ºÂºèÂåñÊôÇÈñìÁÇ∫ HH:MMÔºàÁßªÈô§ÁßíÊï∏Ôºâ
function formatTimeDisplay(time) {
  if (!time) return "";
  if (typeof time !== "string") return time;

  // Â¶ÇÊûúÊòØ HH:MM:SS Ê†ºÂºèÔºåÂè™Âèñ HH:MM
  if (time.length > 5 && time.includes(":")) {
    return time.substring(0, 5);
  }

  return time;
}

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();

const SplashScreen = ({ navigation }) => {
  const { theme } = useContext(ThemeContext);
  const { t } = useContext(LanguageContext);
  const [hasNavigated, setHasNavigated] = useState(false);
  const [isSigningIn, setIsSigningIn] = useState(false);

  useEffect(() => {
    // Handle OAuth callback if this is a redirect from OAuth
    const handleOAuthCallback = async () => {
      try {
        // Only handle OAuth callback on web platform
        if (Platform.OS !== "web" || typeof window === "undefined") {
          console.log(
            "OAuth callback: Not on web platform, skipping callback handling"
          );
          return;
        }

        console.log("OAuth callback: Starting callback handling");
        console.log("OAuth callback: Current URL:", window.location.href);

        // Check if we should redirect to native app
        // This happens when OAuth was initiated from a native app (TestFlight/Production)
        const url = new URL(window.location.href);
        const shouldRedirectToNative =
          url.pathname.includes("auth/callback") &&
          (url.hash.includes("access_token") || url.search.includes("code="));

        if (shouldRedirectToNative) {
          console.log(
            "OAuth callback: Detected native app OAuth flow, preparing redirect..."
          );

          // Determine the correct URL scheme based on hostname
          let appScheme = "too-doo-list"; // Default: production
          if (window.location.hostname.includes("to-do-dev")) {
            appScheme = "too-doo-list-dev"; // Development
          }
          // Note: to-do-staging.vercel.app and to-do-mvp.vercel.app both use production scheme

          console.log("OAuth callback: Using app scheme:", appScheme);

          // Extract auth params from URL
          let redirectUrl;
          if (url.hash.includes("access_token")) {
            // Hash fragment with tokens
            const hashParams = new URLSearchParams(url.hash.substring(1));
            const accessToken = hashParams.get("access_token");
            const refreshToken = hashParams.get("refresh_token");
            const expiresIn = hashParams.get("expires_in");
            const tokenType = hashParams.get("token_type");

            redirectUrl = `${appScheme}://auth/callback#access_token=${accessToken}&refresh_token=${refreshToken}&expires_in=${expiresIn}&token_type=${tokenType}`;
          } else if (url.search.includes("code=")) {
            // Query params with code
            const code = url.searchParams.get("code");
            const state = url.searchParams.get("state") || "";
            redirectUrl = `${appScheme}://auth/callback?code=${code}&state=${state}`;
          }

          if (redirectUrl) {
            console.log(
              "OAuth callback: Redirecting to native app:",
              redirectUrl
            );
            try {
              window.location.href = redirectUrl;
              // Show user message after attempting redirect
              setTimeout(() => {
                alert(
                  "Please return to the To Do app. The login was successful!"
                );
              }, 1000);
              return;
            } catch (redirectError) {
              console.error(
                "OAuth callback: Failed to redirect to native app:",
                redirectError
              );
            }
          }
        }

        // Check for OAuth errors in the URL
        const urlParams = new URLSearchParams(window.location.search);
        const oauthError = urlParams.get("error");
        const errorDescription = urlParams.get("error_description");

        if (oauthError) {
          console.error("OAuth callback: OAuth error detected:", {
            error: oauthError,
            errorCode: urlParams.get("error_code"),
            errorDescription: decodeURIComponent(errorDescription || ""),
          });

          // Handle specific database error
          if (
            oauthError === "server_error" &&
            errorDescription?.includes("Database error saving new user")
          ) {
            console.error(
              "OAuth callback: Database error - new user cannot be saved"
            );
            console.error("Full OAuth error details:", {
              error: oauthError,
              errorCode: urlParams.get("error_code"),
              errorDescription: decodeURIComponent(errorDescription || ""),
              fullUrl:
                Platform.OS === "web" && typeof window !== "undefined"
                  ? window.location.href
                  : "N/A",
            });

            // Try to handle the error gracefully by attempting to create user settings manually
            try {
              // The user might still be authenticated even if database setup failed
              const {
                data: { user },
                error: userError,
              } = await supabase.auth.getUser();

              if (user) {
                // Try to create user settings manually
                const { error: settingsError } = await supabase
                  .from("user_settings")
                  .upsert({
                    user_id: user.id,
                    language: "en",
                    theme: "light",
                    notifications_enabled: true,
                  });

                if (settingsError) {
                  console.error(
                    "Failed to create user settings:",
                    settingsError
                  );
                  console.error("Settings error details:", {
                    message: settingsError.message,
                    details: settingsError.details,
                    hint: settingsError.hint,
                    code: settingsError.code,
                  });

                  // Try to get more detailed error information
                  console.error(
                    "Full settings error object:",
                    JSON.stringify(settingsError, null, 2)
                  );

                  // Check if user_settings table exists and is accessible
                  const { data: tableCheck, error: tableError } = await supabase
                    .from("user_settings")
                    .select("id")
                    .limit(1);

                  alert(
                    "Account created but some settings could not be saved. You can continue using the app."
                  );
                } else {
                  alert("Account created successfully! Welcome to To Do!");
                }

                // Navigate to main app even if there were some issues
                navigateToMainApp();
                return;
              }
            } catch (manualError) {
              console.error("Manual user creation failed:", manualError);
            }

            alert(
              "Unable to create new user account. Please contact support or try with a different Google account."
            );
            return;
          }

          // Handle other OAuth errors
          alert(
            `Authentication error: ${decodeURIComponent(
              errorDescription || oauthError
            )}`
          );
          return;
        }

        // First, try to get the session from the URL if this is an OAuth callback
        const { data, sessionError } = await supabase.auth.getSession();

        if (sessionError) {
          console.error("OAuth callback: Error getting session:", sessionError);
          return;
        }

        console.log("OAuth callback: Session data:", data);

        if (data?.session) {
          console.log("OAuth callback: User session found");
          // Force a refresh of the auth state
          const {
            data: { user },
            error: userError,
          } = await supabase.auth.getUser();

          if (userError || !user) {
            console.error(
              "OAuth callback: Failed to get user after OAuth:",
              userError
            );
            return;
          }

          console.log("OAuth callback: User verified, navigating to main app");
          navigateToMainApp();
        } else {
          console.log("OAuth callback: No session found in callback");

          // Add fallback mechanisms for incognito mode or session issues

          // Try to get session with a delay (sometimes it takes time to propagate)
          setTimeout(async () => {
            try {
              const { data: fallbackData, error: fallbackError } =
                await supabase.auth.getSession();
              if (fallbackData?.session) {
                navigateToMainApp();
                return;
              }

              // Try one more time with getUser
              const {
                data: { user },
                error: userError,
              } = await supabase.auth.getUser();
              if (user && !userError) {
                navigateToMainApp();
                return;
              }
            } catch (fallbackError) {
              console.error("Fallback session recovery failed:", fallbackError);
            }
          }, 2000);

          // Try again after 5 seconds
          setTimeout(async () => {
            try {
              const {
                data: { user },
                error: userError,
              } = await supabase.auth.getUser();
              if (user && !userError) {
                navigateToMainApp();
                return;
              }
            } catch (finalError) {
              console.error("Final fallback failed:", finalError);
            }
          }, 5000);
        }
      } catch (error) {
        console.error("OAuth callback: Error handling OAuth callback:", error);
      }
    };

    // Navigate to main app
    const navigateToMainApp = () => {
      console.log("üìç [navigateToMainApp] Function called");

      if (hasNavigated) {
        console.log("üìç [navigateToMainApp] ‚ö†Ô∏è Already navigated, skipping");
        return;
      }

      if (!navigation) {
        console.error(
          "üìç [navigateToMainApp] ‚ùå Navigation object is not available"
        );
        return;
      }

      console.log(
        "üìç [navigateToMainApp] Navigation object exists, attempting reset..."
      );

      try {
        setHasNavigated(true);
        navigation.reset({
          index: 0,
          routes: [{ name: "MainTabs" }],
        });
        console.log("üìç [navigateToMainApp] ‚úÖ Navigation reset successful!");
      } catch (error) {
        console.error("üìç [navigateToMainApp] ‚ùå Navigation error:", error);
        console.error("üìç [navigateToMainApp] Error stack:", error.stack);
        setHasNavigated(false); // Reset flag on error
      }
    };

    // Set up auth state change listener
    const { data: { subscription: authSubscription } = {} } =
      supabase.auth.onAuthStateChange(async (event, session) => {
        console.log("Auth state changed:", { event, session });

        if (
          event === "SIGNED_IN" ||
          event === "INITIAL_SESSION" ||
          event === "TOKEN_REFRESHED"
        ) {
          try {
            console.log(`Processing ${event} event...`);

            // If we already have a session from the event, use it
            let currentSession = session;

            // If no session from event, try to get it
            if (!currentSession) {
              console.log("No session in event, fetching from Supabase...");
              const {
                data: { session: fetchedSession },
                error: sessionError,
              } = await supabase.auth.getSession();

              if (sessionError) {
                console.error("Error getting current session:", sessionError);
                return;
              }

              currentSession = fetchedSession;
            }

            if (!currentSession) {
              console.log("No session available after auth state change");
              return;
            }

            console.log("Session found, verifying user...");
            console.log("Session user email:", currentSession.user?.email);

            // Use user directly from session to avoid API call issues
            const user = currentSession.user;

            if (!user) {
              console.error("‚ùå No user in session");
              return;
            }

            console.log("‚úÖ User verified from session!");
            console.log("User email:", user.email);
            console.log("User ID:", user.id);

            // ÈáçÁΩÆÁôªÂÖ•ÁãÄÊÖã
            setIsSigningIn(false);

            // Êõ¥Êñ∞Áî®Êà∂Âπ≥Âè∞Ë≥áË®äÔºà‰∏çÈòªÊ≠¢ÁôªÂÖ•ÊµÅÁ®ãÔºâ
            UserService.updatePlatformInfo()
              .then(() => {
                console.log("üì± Platform info updated successfully");
              })
              .catch((platformError) => {
                console.error(
                  "‚ùå Error updating platform info:",
                  platformError
                );
              });

            console.log("üöÄ Navigating to main app...");
            // Check if already navigated to prevent double navigation
            if (!hasNavigated) {
              navigateToMainApp();
            } else {
              console.log("‚ö†Ô∏è Navigation skipped - already navigated");
            }
          } catch (error) {
            console.error("Error in auth state change handler:", error);
          }
        } else if (event === "SIGNED_OUT") {
          // Navigate back to splash screen when user logs out
          setHasNavigated(false); // Reset navigation flag
          navigation.reset({
            index: 0,
            routes: [{ name: "Splash" }],
          });
        }
      });

    // Listen for custom auth success event from deep link handling
    const handleCustomAuthSuccess = (event) => {
      console.log("Custom auth success event received:", event.detail);
      navigateToMainApp();
    };

    // Add event listener for custom auth success (web only)
    if (
      Platform.OS === "web" &&
      typeof window !== "undefined" &&
      typeof window.addEventListener === "function"
    ) {
      window.addEventListener("supabase-auth-success", handleCustomAuthSuccess);
    }

    // Cleanup auth subscription on unmount
    const cleanupAuthSubscription = () => {
      if (authSubscription?.unsubscribe) {
        authSubscription.unsubscribe();
      }
      // Remove custom event listener (web only)
      if (
        Platform.OS === "web" &&
        typeof window !== "undefined" &&
        typeof window.removeEventListener === "function"
      ) {
        window.removeEventListener(
          "supabase-auth-success",
          handleCustomAuthSuccess
        );
      }
    };

    // Check for existing session on mount
    const checkSession = async () => {
      try {
        console.log("[checkSession] Starting session check...");
        const {
          data: { session },
          error,
        } = await supabase.auth.getSession();

        if (error) {
          console.error("[checkSession] Error getting session:", error);
          return;
        }

        if (session) {
          console.log("[checkSession] Existing session found!");
          console.log("[checkSession] Session user ID:", session.user?.id);
          console.log(
            "[checkSession] Session expires at:",
            new Date(session.expires_at * 1000).toISOString()
          );

          // Verify the user is still valid
          const {
            data: { user },
            error: userError,
          } = await supabase.auth.getUser();

          if (userError || !user) {
            console.error(
              "[checkSession] Session invalid or user not found:",
              userError
            );
            console.error(
              "[checkSession] Attempting to clear invalid session..."
            );
            try {
              await supabase.auth.signOut();
            } catch (signOutError) {
              console.error("[checkSession] Error signing out:", signOutError);
            }
            return;
          }

          console.log("[checkSession] User verified:", {
            id: user.id,
            email: user.email,
            provider: user.app_metadata?.provider,
          });
          console.log("[checkSession] Navigating to main app...");
          // Check if already navigated to prevent double navigation
          if (!hasNavigated) {
            navigateToMainApp();
          } else {
            console.log(
              "‚ö†Ô∏è [checkSession] Navigation skipped - already navigated"
            );
          }
        } else {
          console.log(
            "[checkSession] No existing session found, showing login screen"
          );
        }
      } catch (error) {
        console.error("[checkSession] Unexpected error:", error);
        console.error("[checkSession] Error stack:", error.stack);
      }
    };

    // Handle deep linking for OAuth redirects
    const handleDeepLink = async (event) => {
      if (event?.url) {
        console.log("üîóüîóüîó [App.js Deep Link] Received:", event.url);

        // Check if this is an auth callback
        const isAuthCallback =
          event.url.includes("auth/callback") ||
          event.url.includes("access_token=") ||
          event.url.includes("code=") ||
          event.url.includes("error=");

        if (isAuthCallback) {
          console.log("üîóüîóüîó [App.js Deep Link] Auth callback detected!");

          try {
            // Parse the URL - handle custom scheme URLs
            let params;
            if (event.url.includes("#")) {
              // Hash parameters (direct token flow)
              const hashPart = event.url.split("#")[1];
              params = new URLSearchParams(hashPart);
              console.log("üîóüîóüîó [App.js Deep Link] Parsing from hash");
            } else if (event.url.includes("?")) {
              // Query parameters (PKCE flow)
              const queryPart = event.url.split("?")[1];
              params = new URLSearchParams(queryPart);
              console.log("üîóüîóüîó [App.js Deep Link] Parsing from query");
            } else {
              console.error(
                "üîóüîóüîó [App.js Deep Link] No parameters found in URL"
              );
              return;
            }

            const code = params.get("code");
            const accessToken = params.get("access_token");
            const refreshToken = params.get("refresh_token");
            const error = params.get("error");

            console.log("üîóüîóüîó [App.js Deep Link] Params:", {
              hasCode: !!code,
              hasAccessToken: !!accessToken,
              hasRefreshToken: !!refreshToken,
              hasError: !!error,
            });

            if (error) {
              console.error("üîóüîóüîó [App.js Deep Link] OAuth error:", error);
              Alert.alert(
                "Authentication Error",
                params.get("error_description") || error
              );
              return;
            }

            if (code) {
              // PKCE flow - exchange code for session
              console.log(
                "üîóüîóüîó [App.js Deep Link] Exchanging code for session..."
              );

              const { data, error: exchangeError } =
                await supabase.auth.exchangeCodeForSession(code);

              if (exchangeError) {
                console.error(
                  "üîóüîóüîó [App.js Deep Link] ‚ùå Code exchange failed:",
                  exchangeError
                );
                Alert.alert(
                  "Authentication Error",
                  "Failed to complete sign in. Please try again."
                );
                return;
              }

              console.log(
                "üîóüîóüîó [App.js Deep Link] ‚úÖ Code exchanged successfully!"
              );
              console.log(
                "üîóüîóüîó [App.js Deep Link] Session user:",
                data?.session?.user?.email
              );

              // Navigate to main app
              console.log(
                "üîóüîóüîó [App.js Deep Link] Navigating to main app..."
              );
              navigation.reset({
                index: 0,
                routes: [{ name: "MainTabs" }],
              });
            } else if (accessToken && refreshToken) {
              // Direct token flow
              console.log(
                "üîóüîóüîó [App.js Deep Link] Setting session with tokens..."
              );

              const { data, error: sessionError } =
                await supabase.auth.setSession({
                  access_token: accessToken,
                  refresh_token: refreshToken,
                });

              if (sessionError) {
                console.error(
                  "üîóüîóüîó [App.js Deep Link] ‚ùå Set session failed:",
                  sessionError
                );
                Alert.alert(
                  "Authentication Error",
                  "Failed to complete sign in. Please try again."
                );
                return;
              }

              console.log(
                "üîóüîóüîó [App.js Deep Link] ‚úÖ Session set successfully!"
              );

              // Navigate to main app
              console.log(
                "üîóüîóüîó [App.js Deep Link] Navigating to main app..."
              );
              navigation.reset({
                index: 0,
                routes: [{ name: "MainTabs" }],
              });
            } else {
              console.error(
                "üîóüîóüîó [App.js Deep Link] No code or tokens found in callback"
              );
            }
          } catch (error) {
            console.error(
              "üîóüîóüîó [App.js Deep Link] ‚ùå Error handling deep link:",
              error
            );
            console.error(
              "üîóüîóüîó [App.js Deep Link] Error stack:",
              error.stack
            );
          }
        } else {
          console.log(
            "üîóüîóüîó [App.js Deep Link] Not an auth callback, ignoring"
          );
        }
      }
    };

    // Check for initial URL if this is a web app
    const checkInitialUrl = async () => {
      if (Platform.OS === "web") {
        const url = new URL(window.location.href);
        // Check for OAuth callback in URL (hash or pathname)
        const hasAuthCallback =
          url.pathname.includes("auth/callback") ||
          url.hash.includes("access_token") ||
          url.hash.includes("error=") ||
          url.search.includes("code=");

        if (hasAuthCallback) {
          console.log("Initial URL is an auth callback:", url.href);
          console.log(
            "OAuth callback already handled at module level, skipping"
          );
          return;
        }
      } else {
        // For mobile, check if app was launched with a deep link
        console.log("Mobile platform detected, checking for initial URL...");

        try {
          const initialUrl = await Linking.getInitialURL();
          console.log("Initial URL:", initialUrl || "None");

          if (
            initialUrl &&
            (initialUrl.includes("auth/callback") ||
              initialUrl.includes("code=") ||
              initialUrl.includes("access_token="))
          ) {
            console.log("üîóüîóüîó [App.js] App launched with auth callback URL!");
            // Process the deep link
            await handleDeepLink({ url: initialUrl });
            return;
          }
        } catch (error) {
          console.error("Error getting initial URL:", error);
        }

        // If no auth callback in initial URL, check for existing session with retry
        console.log("No auth callback in initial URL, checking for session...");

        // Try multiple times with delays to handle OAuth callback timing
        for (let attempt = 1; attempt <= 3; attempt++) {
          try {
            console.log(`Session check attempt ${attempt}/3...`);

            const {
              data: { session },
              error,
            } = await supabase.auth.getSession();

            if (error) {
              console.error(
                `Error checking session (attempt ${attempt}):`,
                error
              );
            } else if (session) {
              console.log(
                `Mobile: Session found on attempt ${attempt}, navigating to main app`
              );
              navigation.reset({
                index: 0,
                routes: [{ name: "MainTabs" }],
              });
              return;
            } else {
              console.log(`No session found on attempt ${attempt}`);
            }

            // Wait before next attempt (except on last attempt)
            if (attempt < 3) {
              await new Promise((resolve) =>
                setTimeout(resolve, 1000 * attempt)
              );
            }
          } catch (error) {
            console.error(
              `Error in mobile session check (attempt ${attempt}):`,
              error
            );
          }
        }

        console.log(
          "All session check attempts completed, proceeding to check existing session"
        );
      }

      // If not an auth callback, check for existing session
      await checkSession();
    };

    // Add deep link listener
    const subscription = Linking.addEventListener("url", handleDeepLink);

    // Initial check for session or auth callback
    checkInitialUrl();

    // Add multiple fallback checks for OAuth
    const fallbackChecks = [
      setTimeout(async () => {
        console.log("Fallback 1: Checking session after 2 seconds");
        await checkSessionAndNavigate();
      }, 2000),

      setTimeout(async () => {
        console.log("Fallback 2: Checking session after 5 seconds");
        await checkSessionAndNavigate();
      }, 5000),

      setTimeout(async () => {
        console.log("Fallback 3: Final session check after 10 seconds");
        await checkSessionAndNavigate();
      }, 10000),
    ];

    const checkSessionAndNavigate = async () => {
      try {
        const {
          data: { session },
          error: sessionError,
        } = await supabase.auth.getSession();

        if (sessionError) {
          console.error("Fallback: Error getting session:", sessionError);
          return;
        }

        if (session) {
          console.log("Fallback: Session found, verifying user...");
          // Verify the user before navigating
          const {
            data: { user },
            error: userError,
          } = await supabase.auth.getUser();

          if (userError || !user) {
            console.error("Fallback: User verification failed:", userError);
            return;
          }

          console.log("Fallback: User verified, navigating to main app");
          navigateToMainApp();
          return true; // Success
        } else {
          console.log("Fallback: No session found");
          return false;
        }
      } catch (error) {
        console.error("Fallback: Error in session check:", error);
        return false;
      }
    };

    // Cleanup
    return () => {
      // Clear all fallback timeouts
      fallbackChecks.forEach((timeoutId) => clearTimeout(timeoutId));
      if (subscription?.remove) {
        subscription.remove();
      } else if (subscription) {
        // Fallback for older React Native versions
        Linking.removeEventListener("url", handleDeepLink);
      }
      cleanupAuthSubscription();
    };
  }, [navigation]);

  // Add a debug effect to log navigation state changes
  useEffect(() => {
    // Check if navigation and addListener are available
    if (navigation && typeof navigation.addListener === "function") {
      const unsubscribe = navigation.addListener("state", (e) => {
        console.log("Navigation state changed:", e.data.state);
      });
      return unsubscribe;
    }
    // Return empty cleanup function if addListener is not available
    return () => {};
  }, [navigation]);

  const handleGoogleSignIn = async () => {
    // Prevent multiple simultaneous sign-in attempts
    if (isSigningIn) {
      console.log("‚ö†Ô∏è Sign-in already in progress, ignoring duplicate request");
      return;
    }

    setIsSigningIn(true);
    console.log("üîê Google Authentication - Starting...");
    try {
      console.log("VERBOSE: Starting Google authentication process");

      if (!supabase) {
        console.error("CRITICAL: Supabase client is NOT initialized");
        throw new Error("Supabase client is not initialized");
      }

      // First, check for an existing session
      const {
        data: { session: existingSession },
        error: sessionError,
      } = await supabase.auth.getSession();

      if (sessionError) {
        console.error("CRITICAL: Error checking session:", sessionError);
        throw sessionError;
      }

      if (existingSession) {
        console.log("VERBOSE: User is already signed in");
        // Let the auth state change listener handle navigation
        console.log("‚è≥ Waiting for auth state listener to navigate...");
        return;
      }

      // Use the correct redirect URL for Expo
      const getRedirectUrl = () => {
        if (Platform.OS !== "web") {
          // For standalone apps (TestFlight), use Vercel callback page based on environment
          // The page will redirect back to app using custom URI scheme
          const currentEnv = process.env.EXPO_PUBLIC_APP_ENV || "development";
          console.log(
            "üîç DEBUG - Current environment for redirect:",
            currentEnv
          );
          console.log(
            "üîç DEBUG - All EXPO_PUBLIC env vars:",
            Object.keys(process.env).filter((key) =>
              key.startsWith("EXPO_PUBLIC")
            )
          );
          console.log(
            "üîç DEBUG - EXPO_PUBLIC_APP_ENV value:",
            process.env.EXPO_PUBLIC_APP_ENV
          );

          if (currentEnv === "development") {
            return "https://to-do-mvp.vercel.app/auth/callback";
          } else if (currentEnv === "staging") {
            return "https://to-do-staging.vercel.app/auth/callback";
          } else {
            // Production
            return "https://to-do-mvp.vercel.app/auth/callback";
          }
        }

        // For web, always return the current origin
        // Supabase will redirect back to the same page with auth tokens/code
        const currentOrigin = window.location.origin;
        console.log("VERBOSE: Current origin:", currentOrigin);

        // For web (both localhost and production), return current origin
        // This allows Supabase to redirect back to the same page with auth data
        return currentOrigin;
      };

      const redirectUrl = getRedirectUrl();
      console.log("VERBOSE: Using redirect URL:", redirectUrl);

      // Debug: Log current window location for web
      if (Platform.OS === "web") {
        console.log("VERBOSE: Current window location:", {
          origin: window.location.origin,
          href: window.location.href,
          pathname: window.location.pathname,
        });
      }

      // Start the OAuth flow
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: redirectUrl,
          queryParams: {
            access_type: "offline",
            prompt: "select_account",
          },
          skipBrowserRedirect: Platform.OS !== "web", // Skip browser redirect on mobile
        },
      });

      if (error) {
        console.error("CRITICAL: OAuth sign-in failed:", error);
        throw error;
      }

      if (data?.url) {
        console.log("VERBOSE: Opening auth URL in browser");
        console.log("VERBOSE: Auth URL:", data.url);
        if (Platform.OS === "web") {
          // For web, we need to redirect to the auth URL
          console.log("VERBOSE: Redirecting to:", data.url);
          // Use window.location.replace to avoid back button issues (web only)
          if (
            Platform.OS === "web" &&
            typeof window !== "undefined" &&
            window.location
          ) {
            window.location.replace(data.url);
          }
        } else {
          // For mobile, open the auth URL in a web browser
          console.log("VERBOSE: Opening OAuth browser session...");
          const result = await WebBrowser.openAuthSessionAsync(
            data.url,
            redirectUrl
          );
          console.log("VERBOSE: Auth session result:", result);

          // ‚úÖ KEY FIX: The result.url contains the OAuth callback URL
          // We need to manually process it since iOS doesn't automatically trigger the deep link
          if (result.type === "success" && result.url) {
            console.log(
              "üéØ [CRITICAL] WebBrowser returned with URL, processing manually..."
            );
            console.log("üéØ [CRITICAL] Returned URL:", result.url);

            // Parse and handle the OAuth callback URL directly
            try {
              let params;
              if (result.url.includes("#")) {
                const hashPart = result.url.split("#")[1];
                params = new URLSearchParams(hashPart);
                console.log("üéØ [CRITICAL] Parsing from hash");
              } else if (result.url.includes("?")) {
                const queryPart = result.url.split("?")[1];
                params = new URLSearchParams(queryPart);
                console.log("üéØ [CRITICAL] Parsing from query");
              }

              if (params) {
                const code = params.get("code");
                const accessToken = params.get("access_token");
                const refreshToken = params.get("refresh_token");
                const error = params.get("error");

                console.log("üéØ [CRITICAL] OAuth params:", {
                  hasCode: !!code,
                  hasAccessToken: !!accessToken,
                  hasRefreshToken: !!refreshToken,
                  hasError: !!error,
                });

                if (error) {
                  console.error("üéØ [CRITICAL] OAuth error:", error);
                  Alert.alert(
                    "Authentication Error",
                    params.get("error_description") || error
                  );
                  return;
                }

                if (code) {
                  // Exchange code for session
                  console.log("üéØ [CRITICAL] Exchanging code for session...");

                  const { data: sessionData, error: exchangeError } =
                    await supabase.auth.exchangeCodeForSession(code);

                  if (exchangeError) {
                    console.error(
                      "üéØ [CRITICAL] ‚ùå Code exchange failed:",
                      exchangeError
                    );
                    Alert.alert(
                      "Authentication Error",
                      "Failed to complete sign in. Please try again."
                    );
                    return;
                  }

                  console.log("üéØ [CRITICAL] ‚úÖ Code exchanged successfully!");
                  console.log("üéØ [CRITICAL] Session:", {
                    hasSession: !!sessionData?.session,
                    userEmail: sessionData?.session?.user?.email,
                  });

                  // Don't navigate here - let auth state listener handle it
                  // exchangeCodeForSession triggers SIGNED_IN event which will navigate
                  console.log(
                    "üéØ [CRITICAL] ‚è≥ Waiting for auth state listener to navigate..."
                  );
                  console.log(
                    "üéØ [CRITICAL] (SIGNED_IN event should trigger navigation)"
                  );

                  setIsSigningIn(false);
                  return;
                } else if (accessToken && refreshToken) {
                  // Direct token flow
                  console.log("üéØ [CRITICAL] Setting session with tokens...");

                  const { data: sessionData, error: sessionError } =
                    await supabase.auth.setSession({
                      access_token: accessToken,
                      refresh_token: refreshToken,
                    });

                  if (sessionError) {
                    console.error(
                      "üéØ [CRITICAL] ‚ùå Set session failed:",
                      sessionError
                    );
                    Alert.alert(
                      "Authentication Error",
                      "Failed to complete sign in. Please try again."
                    );
                    return;
                  }

                  console.log("üéØ [CRITICAL] ‚úÖ Session set successfully!");

                  // Don't navigate here - let auth state listener handle it
                  console.log(
                    "üéØ [CRITICAL] ‚è≥ Waiting for auth state listener to navigate..."
                  );

                  setIsSigningIn(false);
                  return;
                }
              }
            } catch (error) {
              console.error(
                "üéØ [CRITICAL] ‚ùå Error processing OAuth callback:",
                error
              );
              Alert.alert(
                "Authentication Error",
                "Failed to process authentication. Please try again."
              );
              return;
            }

            return;
          } else if (result.type === "cancel") {
            console.log("VERBOSE: User cancelled the auth flow");
            setIsSigningIn(false);
            Alert.alert(
              "Sign In Cancelled",
              "You cancelled the sign in process."
            );
            return;
          } else if (result.type === "dismiss") {
            console.log("VERBOSE: Auth flow was dismissed");
            setIsSigningIn(false);
            return;
          }

          // If we get here, something unexpected happened
          console.error("VERBOSE: Unexpected result type:", result.type);

          // Give the deep link handler more time to process the callback
          // The auth state listener will handle navigation automatically
          const checkSessionWithRetry = async (
            attempt = 1,
            maxAttempts = 5
          ) => {
            console.log(
              `[Auth Fallback] Session check attempt ${attempt}/${maxAttempts}...`
            );

            const {
              data: { session: newSession },
              error: sessionCheckError,
            } = await supabase.auth.getSession();

            if (sessionCheckError) {
              console.error(
                "[Auth Fallback] Error checking session:",
                sessionCheckError
              );
              if (attempt >= maxAttempts) {
                setIsSigningIn(false);
                Alert.alert(
                  "Authentication Error",
                  "Failed to complete sign in. Please try again."
                );
              }
              return;
            }

            if (!newSession) {
              console.log(
                `[Auth Fallback] No session found on attempt ${attempt}`
              );

              // Retry if we haven't reached max attempts
              if (attempt < maxAttempts) {
                const delay = 2000 * attempt; // Increasing delay: 2s, 4s, 6s, 8s
                console.log(`[Auth Fallback] Retrying in ${delay}ms...`);
                setTimeout(
                  () => checkSessionWithRetry(attempt + 1, maxAttempts),
                  delay
                );
              } else {
                console.error(
                  "[Auth Fallback] All attempts exhausted, no session found"
                );
                setIsSigningIn(false);
                Alert.alert(
                  "Sign In Issue",
                  "Authentication completed but session was not established. Please try signing in again.\n\nIf this persists, try restarting the app."
                );
              }
            } else {
              console.log(
                `[Auth Fallback] ‚úÖ Session found on attempt ${attempt}!`
              );
              console.log("[Auth Fallback] User:", newSession.user?.email);

              // Manually trigger navigation if auth listener hasn't done it yet
              console.log("[Auth Fallback] Manually triggering navigation...");
              setIsSigningIn(false);
              navigation.reset({
                index: 0,
                routes: [{ name: "MainTabs" }],
              });
            }
          };

          // Start checking after 2 seconds
          setTimeout(() => checkSessionWithRetry(1, 5), 2000);
        }
      } else {
        console.log("VERBOSE: No URL returned from OAuth");
      }
    } catch (error) {
      console.error("CRITICAL: Authentication Error:", {
        name: error?.name || "Unknown Error",
        message: error?.message || "No error message available",
        code: error?.code || "N/A",
        stack: error?.stack || "No stack trace available",
      });

      let errorMessage =
        "An unexpected error occurred during sign in. Please try again.";

      if (error?.message?.includes("popup_closed_by_user")) {
        errorMessage = "Sign in was cancelled. Please try again.";
      } else if (error?.message?.includes("network error")) {
        errorMessage =
          "Network error. Please check your internet connection and try again.";
      } else if (error?.message?.includes("invalid_grant")) {
        errorMessage = "Invalid credentials. Please try again.";
      } else if (error?.message?.includes("invalid_redirect_uri")) {
        errorMessage = `Invalid redirect URI. Please ensure ${redirectUrl} is added to your Supabase project's authorized redirect URLs.`;
      } else if (error?.message?.includes("OAuth provider not found")) {
        errorMessage =
          "Google OAuth is not properly configured. Please contact support.";
      } else if (error?.message?.includes("network error")) {
        errorMessage =
          "Network error. Please check your internet connection and try again.";
      }

      Alert.alert(
        "Sign In Error",
        errorMessage,
        [
          {
            text: "OK",
            style: "default",
            onPress: () => setIsSigningIn(false),
          },
          {
            text: "Retry",
            onPress: () => {
              setIsSigningIn(false);
              setTimeout(() => handleGoogleSignIn(), 100);
            },
            style: "cancel",
          },
        ],
        { cancelable: true }
      );
    } finally {
      console.log("üîê Google Authentication - Completed");
      setIsSigningIn(false);
    }
  };

  return (
    <SafeAreaView
      style={{
        flex: 1,
        backgroundColor: theme.background,
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <View
        style={{
          flex: 1,
          justifyContent: "center",
          alignItems: "center",
          width: "100%",
        }}
      >
        <Image
          source={require("./assets/logo.png")}
          style={{ width: 140, height: 140, marginBottom: 16 }}
          resizeMode="contain"
        />
        <Text
          style={{
            fontSize: 32,
            fontWeight: "bold",
            color: theme.text,
            marginBottom: 48,
            letterSpacing: 1,
          }}
        >
          To Do
        </Text>
        <View style={{ width: 260 }}>
          <TouchableOpacity
            style={{
              flexDirection: "row",
              alignItems: "center",
              backgroundColor: theme.card,
              borderColor: theme.cardBorder,
              borderWidth: 1,
              borderRadius: 4,
              paddingVertical: 12,
              justifyContent: "center",
              marginBottom: 10,
              width: "100%",
              shadowColor: theme.shadow,
              shadowOffset: { width: 0, height: 2 },
              shadowOpacity: theme.shadowOpacity,
              shadowRadius: 2,
              elevation: 1,
            }}
            onPress={handleGoogleSignIn}
            disabled={isSigningIn}
          >
            {isSigningIn ? (
              <Text
                style={{
                  color: theme.mode === "dark" ? theme.text : "#4285F4",
                  fontWeight: "bold",
                  fontSize: 16,
                }}
              >
                Signing in...
              </Text>
            ) : (
              <>
                <Image
                  source={require("./assets/google-logo.png")}
                  style={{ width: 24, height: 24, marginRight: 8 }}
                  resizeMode="contain"
                />
                <Text
                  style={{
                    color: theme.mode === "dark" ? theme.text : "#4285F4",
                    fontWeight: "bold",
                    fontSize: 16,
                  }}
                >
                  Sign in with Google
                </Text>
              </>
            )}
          </TouchableOpacity>
        </View>
      </View>
      <View
        style={{
          position: "absolute",
          bottom: 24,
          left: 0,
          right: 0,
          alignItems: "center",
        }}
      >
        <Text
          style={{
            color: theme.textSecondary,
            fontSize: 13,
            textAlign: "center",
          }}
        >
          {t.byContinuing}{" "}
          <Text
            style={{ color: theme.primary, fontWeight: "bold" }}
            onPress={() => navigation.navigate("Terms")}
          >
            {t.terms}
          </Text>{" "}
          {t.and}{" "}
          <Text
            style={{ color: theme.primary, fontWeight: "bold" }}
            onPress={() => navigation.navigate("Privacy")}
          >
            {t.privacy}
          </Text>
          .
        </Text>
      </View>
    </SafeAreaView>
  );
};

function TermsScreen() {
  const { t } = useContext(LanguageContext);
  const { theme } = useContext(ThemeContext);
  const navigation = useNavigation();
  return (
    <SafeAreaView
      style={{ flex: 1, backgroundColor: theme.backgroundSecondary }}
      accessibilityViewIsModal={true}
      accessibilityLabel="Terms of Use Screen"
    >
      {/* Custom Header with Back Chevron */}
      <View
        style={{
          backgroundColor: theme.backgroundSecondary,
          height: 64,
          flexDirection: "row",
          alignItems: "center",
          paddingLeft: 8,
        }}
      >
        <TouchableOpacity
          onPress={() => navigation.goBack()}
          style={{ padding: 10, marginRight: 4 }}
          hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
        >
          <Svg width={18} height={28}>
            <Line
              x1={12}
              y1={6}
              x2={4}
              y2={14}
              stroke={theme.text}
              strokeWidth={2.2}
              strokeLinecap="round"
            />
            <Line
              x1={4}
              y1={14}
              x2={12}
              y2={22}
              stroke={theme.text}
              strokeWidth={2.2}
              strokeLinecap="round"
            />
          </Svg>
        </TouchableOpacity>
      </View>
      <ScrollView
        style={{ flex: 1 }}
        contentContainerStyle={{
          paddingHorizontal: 24,
          paddingTop: 20,
          paddingBottom: 40,
          flexGrow: 1,
        }}
        showsVerticalScrollIndicator={true}
        bounces={true}
      >
        <Text
          style={{
            fontSize: 20,
            color: theme.text,
            fontWeight: "bold",
            marginBottom: 16,
            textAlign: "center",
          }}
        >
          {t.termsTitle}
        </Text>

        <Text
          style={{
            fontSize: 14,
            color: theme.textSecondary,
            marginBottom: 20,
            textAlign: "center",
          }}
        >
          {t.termsLastUpdated} {new Date().toLocaleDateString()}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.termsAcceptance}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.termsAcceptanceText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.termsDescription}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.termsDescriptionText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.termsAccounts}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.termsAccountsText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.termsContent}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.termsContentText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.termsAcceptableUse}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.termsAcceptableUseText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.termsPrivacy}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.termsPrivacyText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.termsAvailability}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.termsAvailabilityText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.termsLiability}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.termsLiabilityText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.termsChanges}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.termsChangesText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.termsContact}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 20,
            lineHeight: 22,
          }}
        >
          {t.termsContactText}
        </Text>

        <Text
          style={{
            fontSize: 14,
            color: theme.textTertiary,
            marginTop: 20,
            textAlign: "center",
            fontStyle: "italic",
          }}
        >
          {t.termsAcknowledgment}
        </Text>
      </ScrollView>
    </SafeAreaView>
  );
}

function PrivacyScreen() {
  const { t } = useContext(LanguageContext);
  const { theme } = useContext(ThemeContext);
  const navigation = useNavigation();
  return (
    <SafeAreaView
      style={{ flex: 1, backgroundColor: theme.backgroundSecondary }}
      accessibilityViewIsModal={true}
      accessibilityLabel="Privacy Policy Screen"
    >
      {/* Custom Header with Back Chevron */}
      <View
        style={{
          backgroundColor: theme.backgroundSecondary,
          height: 64,
          flexDirection: "row",
          alignItems: "center",
          paddingLeft: 8,
        }}
      >
        <TouchableOpacity
          onPress={() => navigation.goBack()}
          style={{ padding: 10, marginRight: 4 }}
          hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
        >
          <Svg width={18} height={28}>
            <Line
              x1={12}
              y1={6}
              x2={4}
              y2={14}
              stroke={theme.text}
              strokeWidth={2.2}
              strokeLinecap="round"
            />
            <Line
              x1={4}
              y1={14}
              x2={12}
              y2={22}
              stroke={theme.text}
              strokeWidth={2.2}
              strokeLinecap="round"
            />
          </Svg>
        </TouchableOpacity>
      </View>
      <ScrollView
        style={{ flex: 1 }}
        contentContainerStyle={{
          paddingHorizontal: 24,
          paddingTop: 20,
          paddingBottom: 40,
          flexGrow: 1,
        }}
        showsVerticalScrollIndicator={true}
        bounces={true}
      >
        <Text
          style={{
            fontSize: 20,
            color: theme.text,
            fontWeight: "bold",
            marginBottom: 16,
            textAlign: "center",
          }}
        >
          {t.privacyTitle}
        </Text>

        <Text
          style={{
            fontSize: 14,
            color: theme.textSecondary,
            marginBottom: 20,
            textAlign: "center",
          }}
        >
          {t.privacyLastUpdated} {new Date().toLocaleDateString()}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyIntroduction}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.privacyIntroductionText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyInformation}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          <Text style={{ fontWeight: "600" }}>{t.privacyAccountInfo}</Text>
          {"\n"}
          {t.privacyAccountInfoText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyUse}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.privacyUseText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyStorage}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.privacyStorageText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacySharing}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.privacySharingText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyThirdParty}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.privacyThirdPartyText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyRights}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.privacyRightsText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyRetention}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.privacyRetentionText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyChildren}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.privacyChildrenText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyInternational}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.privacyInternationalText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyChanges}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 16,
            lineHeight: 22,
          }}
        >
          {t.privacyChangesText}
        </Text>

        <Text
          style={{
            fontSize: 16,
            color: theme.text,
            fontWeight: "600",
            marginBottom: 8,
          }}
        >
          {t.privacyContact}
        </Text>
        <Text
          style={{
            fontSize: 15,
            color: theme.text,
            marginBottom: 20,
            lineHeight: 22,
          }}
        >
          {t.privacyContactText}
        </Text>

        <Text
          style={{
            fontSize: 14,
            color: theme.textTertiary,
            marginTop: 20,
            textAlign: "center",
            fontStyle: "italic",
          }}
        >
          {t.privacyAcknowledgment}
        </Text>
      </ScrollView>
    </SafeAreaView>
  );
}

function SettingScreen() {
  const { language, setLanguage, t } = useContext(LanguageContext);
  const { theme, themeMode, setThemeMode } = useContext(ThemeContext);
  const [modalVisible, setModalVisible] = useState(false);
  const [modalText, setModalText] = useState("");
  const [logoutModalVisible, setLogoutModalVisible] = useState(false);
  const [userName, setUserName] = useState("User");
  const [userProfile, setUserProfile] = useState(null);
  const [languageDropdownVisible, setLanguageDropdownVisible] = useState(false);
  const [themeDropdownVisible, setThemeDropdownVisible] = useState(false);
  const [reminderSettings, setReminderSettings] = useState({
    enabled: true,
    times: [30, 10], // È†êË®≠30ÂàÜÈêòÂíå10ÂàÜÈêòÂâçÊèêÈÜí
  });
  const [reminderDropdownVisible, setReminderDropdownVisible] = useState(false);
  const navigation = useNavigation();

  useEffect(() => {
    const getUserProfile = async () => {
      try {
        const profile = await UserService.getUserProfile();
        if (profile) {
          setUserProfile(profile);
          setUserName(profile.name);
        } else {
          setUserName("User");
        }
      } catch (error) {
        console.error("Error retrieving user profile:", error);
        setUserName("User");
      }
    };
    getUserProfile();
  }, []);

  // ËºâÂÖ•ÊèêÈÜíË®≠ÂÆö
  useEffect(() => {
    const loadReminderSettings = async () => {
      try {
        const settings = await UserService.getUserSettings();
        if (settings.reminder_settings) {
          setReminderSettings(settings.reminder_settings);
        }
      } catch (error) {
        console.error("Error loading reminder settings:", error);
      }
    };
    loadReminderSettings();
  }, []);

  // Áï∂È†ÅÈù¢Áç≤ÂæóÁÑ¶ÈªûÊôÇÔºåÈóúÈñâÊâÄÊúâ‰∏ãÊãâÈÅ∏ÂñÆ
  useFocusEffect(
    React.useCallback(() => {
      setLanguageDropdownVisible(false);
      setThemeDropdownVisible(false);
      setReminderDropdownVisible(false);
    }, [])
  );

  // Êõ¥Êñ∞ÊèêÈÜíË®≠ÂÆö
  const updateReminderSettings = async (newSettings) => {
    try {
      setReminderSettings(newSettings);
      await UserService.updateUserSettings({
        reminder_settings: newSettings,
      });
    } catch (error) {
      console.error("Error updating reminder settings:", error);
    }
  };

  const openModal = (text) => {
    setModalText(text);
    setModalVisible(true);
  };

  const handleLogout = async () => {
    try {
      setLogoutModalVisible(false);

      // Check if we have a valid session
      const {
        data: { session },
      } = await supabase.auth.getSession();

      if (!session) {
        navigation.reset({
          index: 0,
          routes: [{ name: "Splash" }],
        });
        return;
      }

      // Try to log out (using Supabase's signOut API)
      const { error } = await supabase.auth.signOut();

      if (error) {
        console.error("Log out error:", error);
        throw error;
      }

      // Navigate back to splash screen immediately after logout
      navigation.reset({
        index: 0,
        routes: [{ name: "Splash" }],
      });
    } catch (error) {
      console.error("Error logging out:", error);
      console.error("Error details:", {
        message: error?.message,
        name: error?.name,
        code: error?.code,
        stack: error?.stack,
      });

      // Show detailed error message
      const errorMessage =
        error?.message || "Failed to log out. Please try again.";
      setModalText(t.logoutError || errorMessage);
      setModalVisible(true);
    }
  };

  return (
    <SafeAreaView
      style={{ flex: 1, backgroundColor: theme.backgroundSecondary }}
    >
      <View
        style={{
          backgroundColor: theme.backgroundSecondary,
          height: 64,
          justifyContent: "center",
        }}
      >
        <Text
          style={{
            fontSize: 22,
            color: theme.text,
            fontWeight: "bold",
            letterSpacing: 0.5,
            textAlign: "left",
            paddingLeft: 24,
          }}
        >
          {t.settings}
        </Text>
      </View>
      <ScrollView
        style={{
          flex: 1,
          paddingHorizontal: 0,
          backgroundColor: theme.backgroundSecondary,
        }}
        showsVerticalScrollIndicator={false}
      >
        {/* Account Section Title */}
        <Text
          style={{
            color: theme.textSecondary,
            fontSize: 15,
            fontWeight: "bold",
            marginLeft: 28,
            marginTop: 18,
            marginBottom: 2,
            letterSpacing: 0.5,
          }}
        >
          {t.account}
        </Text>
        {/* Account Info Card */}
        <View
          style={{
            backgroundColor: theme.card,
            borderRadius: 14,
            marginHorizontal: 20,
            marginTop: 8,
            marginBottom: 0,
            padding: 20,
            shadowColor: theme.shadow,
            shadowOpacity: theme.shadowOpacity,
            shadowRadius: 8,
            elevation: 2,
          }}
        >
          <View
            style={{
              flexDirection: "row",
              alignItems: "center",
              marginBottom: 15,
            }}
          >
            {userProfile?.avatar_url && (
              <Image
                source={{ uri: userProfile.avatar_url }}
                style={{
                  width: 50,
                  height: 50,
                  borderRadius: 25,
                  marginRight: 15,
                }}
              />
            )}
            <View style={{ flex: 1 }}>
              <Text
                style={{
                  color: theme.text,
                  fontSize: 16,
                  marginBottom: 5,
                  fontWeight: "600",
                }}
              >
                {userProfile?.name || userName}
              </Text>
              <Text
                style={{
                  color: theme.textSecondary,
                  fontSize: 14,
                  marginBottom: 0,
                }}
              >
                {userProfile?.email || "No email available"}
              </Text>
            </View>
          </View>
          <View
            style={{
              borderTopWidth: 1,
              borderTopColor: theme.divider,
              paddingTop: 15,
            }}
          >
            <Text
              style={{
                color: theme.textTertiary,
                fontSize: 12,
                marginBottom: 5,
              }}
            >
              {t.accountType}
            </Text>
            <Text
              style={{ color: theme.primary, fontSize: 14, fontWeight: "500" }}
            >
              {t.googleAccount}
            </Text>
          </View>
        </View>
        {/* General Section Title */}
        <Text
          style={{
            color: theme.textSecondary,
            fontSize: 15,
            fontWeight: "bold",
            marginLeft: 28,
            marginTop: 18,
            marginBottom: 2,
            letterSpacing: 0.5,
          }}
        >
          {t.general}
        </Text>
        {/* Language selection block */}
        <View
          style={{
            backgroundColor: theme.card,
            borderRadius: 14,
            marginHorizontal: 20,
            marginTop: 8,
            marginBottom: 0,
            overflow: "hidden",
            shadowColor: theme.shadow,
            shadowOpacity: theme.shadowOpacity,
            shadowRadius: 6,
            elevation: 1,
          }}
        >
          <TouchableOpacity
            onPress={() => {
              setLanguageDropdownVisible(!languageDropdownVisible);
              setThemeDropdownVisible(false); // ÈóúÈñâ‰∏ªÈ°å‰∏ãÊãâÈÅ∏ÂñÆ
              setReminderDropdownVisible(false); // ÈóúÈñâÊèêÈÜí‰∏ãÊãâÈÅ∏ÂñÆ
            }}
            activeOpacity={0.6}
            style={{
              flexDirection: "row",
              alignItems: "center",
              justifyContent: "space-between",
              paddingVertical: 12,
              paddingHorizontal: 20,
            }}
          >
            <View style={{ flex: 1 }}>
              <Text style={{ color: theme.text, fontSize: 16 }}>
                {t.language}
              </Text>
            </View>
            <View style={{ flexDirection: "row", alignItems: "center" }}>
              <Text
                style={{
                  color: theme.textSecondary,
                  fontSize: 14,
                  marginRight: 8,
                }}
              >
                {language === "en" ? t.english : t.chinese}
              </Text>
              <MaterialIcons
                name={
                  languageDropdownVisible
                    ? "keyboard-arrow-up"
                    : "keyboard-arrow-down"
                }
                size={20}
                color={theme.textTertiary}
                style={{ marginLeft: 6 }}
              />
            </View>
          </TouchableOpacity>

          {languageDropdownVisible && (
            <View
              style={{
                borderTopWidth: 1,
                borderTopColor: theme.divider,
                backgroundColor:
                  themeMode === "light" ? "#ffffff" : theme.backgroundTertiary,
              }}
            >
              <TouchableOpacity
                onPress={() => {
                  setLanguage("en");
                  setLanguageDropdownVisible(false);
                }}
                activeOpacity={0.6}
                style={{
                  paddingVertical: 12,
                  paddingHorizontal: 20,
                  backgroundColor:
                    language === "en" ? theme.calendarSelected : "transparent",
                }}
              >
                <Text
                  style={{
                    color:
                      language === "en" ? theme.primary : theme.textSecondary,
                    fontSize: 15,
                    fontWeight: language === "en" ? "600" : "400",
                  }}
                >
                  {t.english}
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                onPress={() => {
                  setLanguage("zh");
                  setLanguageDropdownVisible(false);
                }}
                activeOpacity={0.6}
                style={{
                  paddingVertical: 12,
                  paddingHorizontal: 20,
                  backgroundColor:
                    language === "zh" ? theme.calendarSelected : "transparent",
                }}
              >
                <Text
                  style={{
                    color:
                      language === "zh" ? theme.primary : theme.textSecondary,
                    fontSize: 15,
                    fontWeight: language === "zh" ? "600" : "400",
                  }}
                >
                  {t.chinese}
                </Text>
              </TouchableOpacity>
            </View>
          )}
        </View>

        {/* Theme selection block */}
        <View
          style={{
            backgroundColor: theme.card,
            borderRadius: 14,
            marginHorizontal: 20,
            marginTop: 8,
            marginBottom: 0,
            overflow: "hidden",
            shadowColor: theme.shadow,
            shadowOpacity: theme.shadowOpacity,
            shadowRadius: 6,
            elevation: 1,
          }}
        >
          <TouchableOpacity
            onPress={() => {
              setThemeDropdownVisible(!themeDropdownVisible);
              setLanguageDropdownVisible(false); // ÈóúÈñâË™ûË®Ä‰∏ãÊãâÈÅ∏ÂñÆ
              setReminderDropdownVisible(false); // ÈóúÈñâÊèêÈÜí‰∏ãÊãâÈÅ∏ÂñÆ
            }}
            activeOpacity={0.6}
            style={{
              flexDirection: "row",
              alignItems: "center",
              justifyContent: "space-between",
              paddingVertical: 12,
              paddingHorizontal: 20,
            }}
          >
            <View style={{ flex: 1 }}>
              <Text style={{ color: theme.text, fontSize: 16 }}>{t.theme}</Text>
            </View>
            <View style={{ flexDirection: "row", alignItems: "center" }}>
              <Text
                style={{
                  color: theme.textSecondary,
                  fontSize: 14,
                  marginRight: 8,
                }}
              >
                {themeMode === "light" ? t.lightMode : t.darkMode}
              </Text>
              <MaterialIcons
                name={
                  themeDropdownVisible
                    ? "keyboard-arrow-up"
                    : "keyboard-arrow-down"
                }
                size={20}
                color={theme.textTertiary}
                style={{ marginLeft: 6 }}
              />
            </View>
          </TouchableOpacity>

          {themeDropdownVisible && (
            <View
              style={{
                borderTopWidth: 1,
                borderTopColor: theme.divider,
                backgroundColor:
                  themeMode === "light" ? "#ffffff" : theme.backgroundTertiary,
              }}
            >
              <TouchableOpacity
                onPress={() => {
                  setThemeMode("light");
                  setThemeDropdownVisible(false);
                }}
                activeOpacity={0.6}
                style={{
                  paddingVertical: 12,
                  paddingHorizontal: 20,
                  backgroundColor:
                    themeMode === "light"
                      ? theme.calendarSelected
                      : "transparent",
                }}
              >
                <Text
                  style={{
                    color:
                      themeMode === "light"
                        ? theme.primary
                        : theme.textSecondary,
                    fontSize: 15,
                    fontWeight: themeMode === "light" ? "600" : "400",
                  }}
                >
                  {t.lightMode}
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                onPress={() => {
                  setThemeMode("dark");
                  setThemeDropdownVisible(false);
                }}
                activeOpacity={0.6}
                style={{
                  paddingVertical: 12,
                  paddingHorizontal: 20,
                  backgroundColor:
                    themeMode === "dark"
                      ? theme.calendarSelected
                      : "transparent",
                }}
              >
                <Text
                  style={{
                    color:
                      themeMode === "dark"
                        ? theme.primary
                        : theme.textSecondary,
                    fontSize: 15,
                    fontWeight: themeMode === "dark" ? "600" : "400",
                  }}
                >
                  {t.darkMode}
                </Text>
              </TouchableOpacity>
            </View>
          )}
        </View>

        {/* Reminder Settings Section */}
        <View
          style={{
            backgroundColor: theme.card,
            borderRadius: 14,
            marginHorizontal: 20,
            marginTop: 8,
            marginBottom: 0,
            overflow: "hidden",
            shadowColor: theme.shadow,
            shadowOpacity: theme.shadowOpacity,
            shadowRadius: 6,
            elevation: 1,
          }}
        >
          <TouchableOpacity
            onPress={() => {
              setReminderDropdownVisible(!reminderDropdownVisible);
              setLanguageDropdownVisible(false);
              setThemeDropdownVisible(false);
            }}
            activeOpacity={0.6}
            style={{
              flexDirection: "row",
              alignItems: "center",
              justifyContent: "space-between",
              paddingVertical: 12,
              paddingHorizontal: 20,
            }}
          >
            <View style={{ flex: 1 }}>
              <Text style={{ color: theme.text, fontSize: 16 }}>
                {t.reminderSettings}
              </Text>
            </View>
            <View style={{ flexDirection: "row", alignItems: "center" }}>
              <Text
                style={{
                  color: theme.textSecondary,
                  fontSize: 14,
                  marginRight: 8,
                }}
              >
                {reminderSettings.enabled
                  ? t.reminderEnabled
                  : t.reminderDisabled}
              </Text>
              <MaterialIcons
                name={
                  reminderDropdownVisible
                    ? "keyboard-arrow-up"
                    : "keyboard-arrow-down"
                }
                size={20}
                color={theme.textTertiary}
                style={{ marginLeft: 6 }}
              />
            </View>
          </TouchableOpacity>

          {reminderDropdownVisible && (
            <View
              style={{
                borderTopWidth: 1,
                borderTopColor: theme.divider,
                backgroundColor:
                  themeMode === "light" ? "#ffffff" : theme.backgroundTertiary,
                paddingVertical: 8,
              }}
            >
              {/* ÂïüÁî®/ÂÅúÁî®ÊèêÈÜí */}
              <TouchableOpacity
                onPress={() => {
                  updateReminderSettings({
                    ...reminderSettings,
                    enabled: !reminderSettings.enabled,
                  });
                }}
                activeOpacity={0.6}
                style={{
                  flexDirection: "row",
                  alignItems: "center",
                  justifyContent: "space-between",
                  paddingVertical: 12,
                  paddingHorizontal: 20,
                }}
              >
                <Text style={{ color: theme.text, fontSize: 15 }}>
                  {t.reminderEnabled}
                </Text>
                <MaterialIcons
                  name={
                    reminderSettings.enabled
                      ? "check-box"
                      : "check-box-outline-blank"
                  }
                  size={24}
                  color={
                    reminderSettings.enabled
                      ? theme.primary
                      : theme.textTertiary
                  }
                />
              </TouchableOpacity>

              {reminderSettings.enabled && (
                <>
                  <View
                    style={{ borderTopWidth: 1, borderTopColor: theme.divider }}
                  />

                  {/* ÊèêÈÜíÊôÇÈñìÈÅ∏È†Ö */}
                  {[
                    { value: 30, label: t.reminder30min },
                    { value: 10, label: t.reminder10min },
                    { value: 5, label: t.reminder5min },
                  ].map((option) => (
                    <TouchableOpacity
                      key={option.value}
                      onPress={() => {
                        const newTimes = reminderSettings.times.includes(
                          option.value
                        )
                          ? reminderSettings.times.filter(
                              (time) => time !== option.value
                            )
                          : [...reminderSettings.times, option.value].sort(
                              (a, b) => b - a
                            );

                        updateReminderSettings({
                          ...reminderSettings,
                          times: newTimes,
                        });
                      }}
                      activeOpacity={0.6}
                      style={{
                        flexDirection: "row",
                        alignItems: "center",
                        justifyContent: "space-between",
                        paddingVertical: 12,
                        paddingHorizontal: 20,
                      }}
                    >
                      <Text style={{ color: theme.text, fontSize: 15 }}>
                        {option.label}
                      </Text>
                      <MaterialIcons
                        name={
                          reminderSettings.times.includes(option.value)
                            ? "check-box"
                            : "check-box-outline-blank"
                        }
                        size={24}
                        color={
                          reminderSettings.times.includes(option.value)
                            ? theme.primary
                            : theme.textTertiary
                        }
                      />
                    </TouchableOpacity>
                  ))}

                  <View
                    style={{ borderTopWidth: 1, borderTopColor: theme.divider }}
                  />
                  <Text
                    style={{
                      color: theme.textTertiary,
                      fontSize: 12,
                      paddingHorizontal: 20,
                      paddingVertical: 8,
                      fontStyle: "italic",
                    }}
                  >
                    {t.reminderNote}
                  </Text>
                </>
              )}
            </View>
          )}
        </View>

        {/* Legal Section Title */}
        <Text
          style={{
            color: theme.textSecondary,
            fontSize: 15,
            fontWeight: "bold",
            marginLeft: 28,
            marginTop: 18,
            marginBottom: 2,
            letterSpacing: 0.5,
          }}
        >
          {t.legal}
        </Text>

        {/* Terms of Use */}
        <View
          style={{
            backgroundColor: theme.card,
            borderRadius: 14,
            marginHorizontal: 20,
            marginTop: 8,
            marginBottom: 0,
            overflow: "hidden",
            shadowColor: theme.shadow,
            shadowOpacity: theme.shadowOpacity,
            shadowRadius: 6,
            elevation: 1,
          }}
        >
          <TouchableOpacity
            onPress={() => navigation.navigate("Terms")}
            activeOpacity={0.6}
            style={{
              flexDirection: "row",
              alignItems: "center",
              justifyContent: "space-between",
              paddingVertical: 12,
              paddingHorizontal: 20,
            }}
          >
            <Text style={{ color: theme.text, fontSize: 16 }}>{t.terms}</Text>
            <MaterialIcons
              name="keyboard-arrow-right"
              size={20}
              color={theme.textTertiary}
            />
          </TouchableOpacity>
        </View>

        {/* Privacy Policy */}
        <View
          style={{
            backgroundColor: theme.card,
            borderRadius: 14,
            marginHorizontal: 20,
            marginTop: 8,
            marginBottom: 0,
            overflow: "hidden",
            shadowColor: theme.shadow,
            shadowOpacity: theme.shadowOpacity,
            shadowRadius: 6,
            elevation: 1,
          }}
        >
          <TouchableOpacity
            onPress={() => navigation.navigate("Privacy")}
            activeOpacity={0.6}
            style={{
              flexDirection: "row",
              alignItems: "center",
              justifyContent: "space-between",
              paddingVertical: 12,
              paddingHorizontal: 20,
            }}
          >
            <Text style={{ color: theme.text, fontSize: 16 }}>{t.privacy}</Text>
            <MaterialIcons
              name="keyboard-arrow-right"
              size={20}
              color={theme.textTertiary}
            />
          </TouchableOpacity>
        </View>

        {/* Log Out and Version Section */}
        <View
          style={{
            marginHorizontal: 20,
            marginTop: 8,
            marginBottom: 20,
            padding: 20,
          }}
        >
          <TouchableOpacity
            onPress={() => {
              setLogoutModalVisible(true);
            }}
            style={{
              backgroundColor: theme.card,
              paddingVertical: 12,
              paddingHorizontal: 24,
              borderRadius: 8,
              borderWidth: 1,
              borderColor: theme.cardBorder,
              alignItems: "center",
              marginBottom: 16,
              shadowColor: theme.shadow,
              shadowOpacity: theme.shadowOpacity,
              shadowRadius: 4,
              elevation: 1,
              width: "100%",
            }}
          >
            <Text
              style={{ color: theme.error, fontSize: 16, fontWeight: "600" }}
            >
              {t.logout || "Log out"}
            </Text>
          </TouchableOpacity>
          <Text
            style={{
              color: theme.textTertiary,
              fontSize: 14,
              textAlign: "center",
            }}
          >
            {t.version} {require("./package.json").version}
          </Text>
        </View>
      </ScrollView>

      <Modal
        visible={modalVisible}
        animationType="fade"
        transparent={true}
        onRequestClose={() => setModalVisible(false)}
        accessibilityViewIsModal={true}
        accessibilityLabel="Information Modal"
      >
        <TouchableOpacity
          style={{
            flex: 1,
            backgroundColor: theme.modalOverlay,
            justifyContent: "center",
            alignItems: "center",
          }}
          activeOpacity={1}
          onPress={() => setModalVisible(false)}
        >
          <View
            style={{
              backgroundColor: theme.modalBackground,
              padding: 32,
              borderRadius: 12,
              minWidth: 220,
              alignItems: "center",
            }}
          >
            <Text style={{ fontSize: 18, color: theme.text, marginBottom: 16 }}>
              {modalText}
            </Text>
            <TouchableOpacity
              onPress={() => setModalVisible(false)}
              style={{
                marginTop: 8,
                paddingVertical: 6,
                paddingHorizontal: 18,
                backgroundColor: theme.button,
                borderRadius: 8,
              }}
            >
              <Text style={{ color: theme.buttonText, fontSize: 16 }}>
                {t.cancel}
              </Text>
            </TouchableOpacity>
          </View>
        </TouchableOpacity>
      </Modal>

      {/* Logout Confirmation Modal */}
      <Modal
        visible={logoutModalVisible}
        animationType="fade"
        transparent={true}
        onRequestClose={() => setLogoutModalVisible(false)}
        accessibilityViewIsModal={true}
        accessibilityLabel="Logout Confirmation Modal"
      >
        <TouchableOpacity
          style={{
            flex: 1,
            backgroundColor: theme.modalOverlay,
            justifyContent: "center",
            alignItems: "center",
          }}
          activeOpacity={1}
          onPress={() => setLogoutModalVisible(false)}
        >
          <View
            style={{
              backgroundColor: theme.modalBackground,
              borderRadius: 12,
              minWidth: 280,
              maxWidth: 320,
              alignItems: "center",
              overflow: "hidden",
            }}
          >
            <View style={{ padding: 24, paddingBottom: 16 }}>
              <Text
                style={{
                  fontSize: 18,
                  color: theme.text,
                  textAlign: "center",
                  fontWeight: "600",
                  lineHeight: 24,
                }}
              >
                {t.logoutConfirm}
              </Text>
            </View>

            <View
              style={{
                height: 1,
                backgroundColor: theme.divider,
                width: "100%",
              }}
            />

            <View
              style={{
                flexDirection: "row",
                width: "100%",
              }}
            >
              <TouchableOpacity
                onPress={() => setLogoutModalVisible(false)}
                style={{
                  flex: 1,
                  paddingVertical: 16,
                  alignItems: "center",
                  borderRightWidth: 1,
                  borderRightColor: theme.divider,
                }}
              >
                <Text
                  style={{
                    color: theme.primary,
                    fontSize: 17,
                    fontWeight: "400",
                  }}
                >
                  {t.cancel}
                </Text>
              </TouchableOpacity>

              <TouchableOpacity
                onPress={handleLogout}
                style={{
                  flex: 1,
                  paddingVertical: 16,
                  alignItems: "center",
                }}
              >
                <Text
                  style={{
                    color: theme.error,
                    fontSize: 17,
                    fontWeight: "600",
                  }}
                >
                  {t.logout}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </TouchableOpacity>
      </Modal>
    </SafeAreaView>
  );
}

function CalendarScreen({ navigation, route }) {
  const { language, t } = useContext(LanguageContext);
  const { theme, themeMode } = useContext(ThemeContext);
  const insets = useSafeAreaInsets();
  const getCurrentDate = () => {
    const today = new Date();
    return today.toISOString().split("T")[0];
  };

  const [tasks, setTasks] = useState({});
  const [selectedDate, setSelectedDate] = useState(getCurrentDate());
  const [modalVisible, setModalVisible] = useState(false);
  const [moveMode, setMoveMode] = useState(false);
  const [taskToMove, setTaskToMove] = useState(null);
  const [editingTask, setEditingTask] = useState(null);
  const [visibleMonth, setVisibleMonth] = useState(
    new Date(getCurrentDate()).getMonth()
  );
  const [visibleYear, setVisibleYear] = useState(
    new Date(getCurrentDate()).getFullYear()
  );
  const [taskText, setTaskText] = useState("");
  const [taskTime, setTaskTime] = useState("");
  const [taskLink, setTaskLink] = useState("");
  const [taskDate, setTaskDate] = useState(selectedDate);
  const [taskNote, setTaskNote] = useState("");
  const [linkInputFocused, setLinkInputFocused] = useState(false);
  const [datePickerVisible, setDatePickerVisible] = useState(false);
  const [timePickerVisible, setTimePickerVisible] = useState(false);
  const [deleteConfirmVisible, setDeleteConfirmVisible] = useState(false);
  const [tempDate, setTempDate] = useState(null);
  const [tempTime, setTempTime] = useState(null);
  const scrollViewRef = useRef(null); // Êó•ÊõÜ ScrollView
  const modalScrollViewRef = useRef(null); // Modal ScrollView

  // Ê†ºÂºèÂåñÊó•ÊúüËº∏ÂÖ• (YYYY-MM-DD)
  const formatDateInput = (text) => {
    // ÁßªÈô§ÊâÄÊúâÈùûÊï∏Â≠óÂ≠óÁ¨¶
    const numbersOnly = text.replace(/\D/g, "");

    // ÈôêÂà∂Èï∑Â∫¶ÁÇ∫8‰ΩçÊï∏Â≠ó (YYYYMMDD)
    const limitedNumbers = numbersOnly.slice(0, 8);

    // Ê†πÊìöÈï∑Â∫¶Ê∑ªÂä†ÂàÜÈöîÁ¨¶
    if (limitedNumbers.length <= 4) {
      return limitedNumbers;
    } else if (limitedNumbers.length <= 6) {
      return `${limitedNumbers.slice(0, 4)}-${limitedNumbers.slice(4)}`;
    } else {
      return `${limitedNumbers.slice(0, 4)}-${limitedNumbers.slice(
        4,
        6
      )}-${limitedNumbers.slice(6)}`;
    }
  };

  // Ê†ºÂºèÂåñÊôÇÈñìËº∏ÂÖ• (HH:MM)
  const formatTimeInput = (text) => {
    // ÁßªÈô§ÊâÄÊúâÈùûÊï∏Â≠óÂ≠óÁ¨¶
    const numbersOnly = text.replace(/\D/g, "");

    // ÈôêÂà∂Èï∑Â∫¶ÁÇ∫4‰ΩçÊï∏Â≠ó (HHMM)
    const limitedNumbers = numbersOnly.slice(0, 4);

    // Ê†πÊìöÈï∑Â∫¶Ê∑ªÂä†ÂàÜÈöîÁ¨¶
    if (limitedNumbers.length <= 2) {
      return limitedNumbers;
    } else {
      return `${limitedNumbers.slice(0, 2)}:${limitedNumbers.slice(2)}`;
    }
  };

  // ÂêåÊ≠• taskDate Âíå selectedDate
  useEffect(() => {
    if (!modalVisible) {
      setTaskDate(selectedDate);
    }
  }, [selectedDate, modalVisible]);

  // Load tasks from Supabase
  useEffect(() => {
    const loadTasks = async () => {
      try {
        // È¶ñÂÖàÊ™¢Êü•Áî®Êà∂Ë™çË≠âÁãÄÊÖã
        const {
          data: { user },
          error: authError,
        } = await supabase.auth.getUser();

        if (!user) {
          console.log("No authenticated user found");
          setTasks({});
          return;
        }

        const tasksData = await TaskService.getTasks();
        setTasks(tasksData);
      } catch (error) {
        console.error("Error loading tasks:", error);
        // Fallback to empty tasks if there's an error
        setTasks({});
      }
    };

    loadTasks();
  }, []);

  // Note: We no longer need to save tasks to AsyncStorage
  // Tasks are automatically saved to Supabase when modified

  useEffect(() => {
    const today = getToday();
    setSelectedDate(today);
    const timer = setTimeout(centerToday, 500);
    return () => clearTimeout(timer);
  }, []);

  const centerToday = () => {
    if (!scrollViewRef.current) return;
    const todayDate = new Date(getToday());
    todayDate.setHours(12, 0, 0, 0);
    const firstDayOfMonth = new Date(visibleYear, visibleMonth, 1);
    const firstDayOfWeek = firstDayOfMonth.getDay();
    const firstSunday = new Date(firstDayOfMonth);
    firstSunday.setDate(firstDayOfMonth.getDate() - firstDayOfWeek);
    const diffInDays = Math.floor(
      (todayDate - firstSunday) / (1000 * 60 * 60 * 24)
    );
    const weekNumber = Math.floor(diffInDays / 7);
    const weekHeight = 50;
    const visibleWeeks = 4;
    const scrollPosition =
      weekNumber * weekHeight - (visibleWeeks / 2) * weekHeight;
    scrollViewRef.current.scrollTo({
      y: scrollPosition,
      animated: true,
    });
  };

  const openAddTask = (date) => {
    setEditingTask(null);
    setTaskText("");
    setTaskTime("");
    setTaskLink("");
    setTaskDate(date);
    setTaskNote("");
    setLinkInputFocused(false);
    setSelectedDate(date);
    setModalVisible(true);
  };

  const openEditTask = (task) => {
    setEditingTask(task);
    setTaskText(task.title);
    setTaskTime(formatTimeDisplay(task.time) || "");
    setTaskLink(task.link || "");
    setTaskDate(task.date);
    setTaskNote(task.note || "");
    setSelectedDate(task.date);
    setModalVisible(true);
  };

  const saveTask = async () => {
    if (taskText.trim() === "") return;
    if (taskDate.trim() === "") return;

    try {
      const targetDate = taskDate || selectedDate;

      if (editingTask) {
        console.log("Updating existing task:", editingTask.id);
        console.log("Update data:", {
          title: taskText,
          time: taskTime,
          link: taskLink,
          date: targetDate,
          note: taskNote,
        });

        // Cancel old notification if exists (ÊîØÊè¥Êñ∞ËàäÊ†ºÂºè)
        if (editingTask.notificationIds) {
          await cancelTaskNotification(editingTask.notificationIds);
        } else if (editingTask.notificationId) {
          await cancelTaskNotification(editingTask.notificationId);
        }

        // Update existing task
        const updatedTask = await TaskService.updateTask(editingTask.id, {
          title: taskText,
          time: taskTime,
          link: taskLink,
          date: targetDate,
          note: taskNote,
        });

        // Schedule notification for updated task (native only)
        if (Platform.OS !== "web") {
          const notificationIds = await scheduleTaskNotification(
            {
              id: updatedTask.id,
              text: taskText,
              date: targetDate,
              time: taskTime,
              notificationIds: editingTask.notificationIds, // ÂÇ≥ÈÅûËàäÁöÑ IDs ‰ª•‰æøÂèñÊ∂à
            },
            t.taskReminder,
            getActiveReminderMinutes(), // ÂæûÈÖçÁΩÆÊñá‰ª∂ËÆÄÂèñÊèêÈÜíÊôÇÈñì
            null, // userReminderSettings
            t // ÂÇ≥ÂÖ•ÁøªË≠ØÁâ©‰ª∂
          );

          if (notificationIds.length > 0) {
            // Store notification IDs in local state only (‰∏çÂ≠òÂà∞Ë≥áÊñôÂ∫´)
            updatedTask.notificationIds = notificationIds;
          }
        }

        if (editingTask.date !== targetDate) {
          // Date changed - remove from old date and add to new date
          const oldDayTasks = tasks[editingTask.date] || [];
          const newOldDayTasks = oldDayTasks.filter(
            (t) => t.id !== editingTask.id
          );

          const newDayTasks = tasks[targetDate] || [];
          const updatedNewDayTasks = [...newDayTasks, updatedTask];

          setTasks({
            ...tasks,
            [editingTask.date]: newOldDayTasks,
            [targetDate]: updatedNewDayTasks,
          });
        } else {
          // Same date - update in place
          const dayTasks = tasks[targetDate] || [];
          const updatedDayTasks = dayTasks.map((t) =>
            t.id === editingTask.id ? updatedTask : t
          );
          setTasks({ ...tasks, [targetDate]: updatedDayTasks });
        }
      } else {
        // Create new task
        const newTask = await TaskService.addTask({
          title: taskText,
          time: taskTime,
          link: taskLink,
          date: targetDate,
          note: taskNote,
          is_completed: false,
        });

        // Schedule notification for new task (native only)
        if (Platform.OS !== "web") {
          const notificationIds = await scheduleTaskNotification(
            {
              id: newTask.id,
              text: taskText,
              date: targetDate,
              time: taskTime,
            },
            t.taskReminder,
            getActiveReminderMinutes(), // ÂæûÈÖçÁΩÆÊñá‰ª∂ËÆÄÂèñÊèêÈÜíÊôÇÈñì
            null, // userReminderSettings
            t // ÂÇ≥ÂÖ•ÁøªË≠ØÁâ©‰ª∂
          );

          if (notificationIds.length > 0) {
            // Store notification IDs in local state only (‰∏çÂ≠òÂà∞Ë≥áÊñôÂ∫´)
            newTask.notificationIds = notificationIds;
          }
        }

        const dayTasks = tasks[targetDate] || [];
        setTasks({ ...tasks, [targetDate]: [...dayTasks, newTask] });
      }

      setModalVisible(false);
      setEditingTask(null);
      setTaskText("");
      setTaskTime("");
      setTaskLink("");
      setTaskDate(selectedDate);
      setTaskNote("");
      setLinkInputFocused(false);
    } catch (error) {
      console.error("Error saving task:", error);
      Alert.alert("Error", "Failed to save task. Please try again.");
    }
  };

  const showDeleteConfirm = () => {
    console.log("showDeleteConfirm called, using Alert.alert");
    Alert.alert(
      t.deleteConfirm,
      "",
      [
        {
          text: t.cancel,
          onPress: () => console.log("Delete cancelled"),
          style: "cancel",
        },
        {
          text: t.delete,
          onPress: deleteTask,
          style: "destructive",
        },
      ],
      { cancelable: true }
    );
  };

  const deleteTask = async () => {
    if (!editingTask) return;

    try {
      // Cancel notification if exists (ÊîØÊè¥Êñ∞ËàäÊ†ºÂºè)
      if (editingTask.notificationIds) {
        await cancelTaskNotification(editingTask.notificationIds);
      } else if (editingTask.notificationId) {
        await cancelTaskNotification(editingTask.notificationId);
      }

      await TaskService.deleteTask(editingTask.id);

      // Update local state
      const day = editingTask.date;
      const dayTasks = tasks[day] ? [...tasks[day]] : [];
      const filteredTasks = dayTasks.filter((t) => t.id !== editingTask.id);
      const newTasks = { ...tasks, [day]: filteredTasks };
      setTasks(newTasks);

      setModalVisible(false);
      setEditingTask(null);
      setTaskText("");
      setTaskTime("");
      setTaskLink("");
      setTaskDate(selectedDate);
      setTaskNote("");
      setLinkInputFocused(false);
    } catch (error) {
      console.error("Error deleting task:", error);
      Alert.alert("Error", "Failed to delete task. Please try again.");
    }
  };

  const startMoveTask = (task) => {
    setMoveMode(true);
    setTaskToMove(task);
    Alert.alert(t.moveTask, t.moveTaskAlert);
  };

  const moveTaskToDate = async (task, toDate) => {
    if (task.date === toDate) return;
    if (task.date !== selectedDate) return;

    try {
      // Êõ¥Êñ∞‰ªªÂãôÁöÑÊó•ÊúüÂà∞Êï∏ÊìöÂ∫´
      await TaskService.updateTask(task.id, { date: toDate });

      // Êõ¥Êñ∞Êú¨Âú∞ÁãÄÊÖã
      const fromTasks = tasks[selectedDate] ? [...tasks[selectedDate]] : [];
      const toTasks = tasks[toDate] ? [...tasks[toDate]] : [];
      const filteredTasks = fromTasks.filter((t) => t.id !== task.id);
      const updatedTask = { ...task, date: toDate };
      toTasks.push(updatedTask);
      setTasks({ ...tasks, [selectedDate]: filteredTasks, [toDate]: toTasks });

      setMoveMode(false);
      setTaskToMove(null);
    } catch (error) {
      console.error("Error moving task:", error);
      Alert.alert("Error", "Failed to move task. Please try again.");
    }
  };

  const renderCalendar = () => {
    const weeks = []; // For calendar rendering
    const currentDate = new Date(visibleYear, visibleMonth, 1);

    // Get the first day of the month and the last day of the month
    const firstDayOfMonth = new Date(visibleYear, visibleMonth, 1);
    const lastDayOfMonth = new Date(visibleYear, visibleMonth + 1, 0);

    // Find the first Sunday on or before the first day of the month
    const firstDayOfWeek = firstDayOfMonth.getDay();
    const firstSunday = new Date(firstDayOfMonth);
    firstSunday.setDate(firstDayOfMonth.getDate() - firstDayOfWeek);

    // We want exactly 5 weeks (35 days)
    for (let week = 0; week < 5; week++) {
      const weekDates = [];

      // Generate all 7 days of the week
      for (let day = 0; day < 7; day++) {
        const dayDate = new Date(firstSunday);
        dayDate.setDate(firstSunday.getDate() + week * 7 + day);
        dayDate.setHours(12, 0, 0, 0);

        const dateStr = dayDate.toISOString().split("T")[0];
        weekDates.push(renderDate(dateStr));
      }

      weeks.push(
        <View key={`week-${week}`} style={styles.calendarWeekRow}>
          {weekDates}
        </View>
      );
    }

    return (
      <PanGestureHandler onHandlerStateChange={handleVerticalGesture}>
        <View>{weeks}</View>
      </PanGestureHandler>
    );
  };

  const renderDate = (date) => {
    const isSelected = date === selectedDate;
    const dateObj = new Date(date);

    const isCurrentMonth =
      dateObj.getMonth() === visibleMonth &&
      dateObj.getFullYear() === visibleYear;

    // Format the current date to match the date string format (YYYY-MM-DD)
    const today = new Date();
    const todayFormatted = `${today.getFullYear()}-${String(
      today.getMonth() + 1
    ).padStart(2, "0")}-${String(today.getDate()).padStart(2, "0")}`;
    const isToday = date === todayFormatted;
    const isInRange = true; // Always show the date number

    const renderDateContent = () => {
      return (
        <View style={styles.dateContainer}>
          <View
            style={[
              styles.dateTextContainer,
              isToday && styles.todayCircle,
              isSelected && styles.selectedDate,
            ]}
          >
            <Text
              style={[
                styles.calendarDayText,
                { color: theme.text },
                !isCurrentMonth && [
                  styles.otherMonthText,
                  { color: theme.textTertiary },
                ],
                isSelected && [
                  styles.selectedDayText,
                  { color: theme.primary },
                ],
                isToday && styles.todayText,
                !isInRange && styles.hiddenDate,
              ]}
            >
              {isInRange ? String(dateObj.getDate()) : ""}
            </Text>
          </View>
        </View>
      );
    };

    return (
      <TouchableOpacity
        key={date}
        onPress={() => {
          if (moveMode && taskToMove) {
            moveTaskToDate(taskToMove, date);
            setMoveMode(false);
            setTaskToMove(null);
          } else {
            setSelectedDate(date);
          }
        }}
        style={[
          styles.calendarDay,
          { backgroundColor: "transparent" },
          isSelected && [
            styles.selectedDay,
            { backgroundColor: theme.calendarSelected },
          ],
          moveMode && styles.calendarDayMoveTarget,
        ]}
      >
        {renderDateContent()}
        {tasks[date] && tasks[date].length > 0 && (
          <View style={[styles.taskDot, { backgroundColor: theme.primary }]} />
        )}
      </TouchableOpacity>
    );
  };

  const toggleTaskChecked = async (task) => {
    try {
      const newCompletedState = !(task.is_completed || task.checked);

      // If task is being marked as completed, cancel notification (ÊîØÊè¥Êñ∞ËàäÊ†ºÂºè)
      if (newCompletedState) {
        if (task.notificationIds) {
          await cancelTaskNotification(task.notificationIds);
        } else if (task.notificationId) {
          await cancelTaskNotification(task.notificationId);
        }
      }

      await TaskService.toggleTaskChecked(task.id, newCompletedState);

      // Update local state
      const dayTasks = tasks[task.date] ? [...tasks[task.date]] : [];
      const updatedTasks = dayTasks.map((t) =>
        t.id === task.id
          ? {
              ...t,
              checked: newCompletedState,
              is_completed: newCompletedState,
            }
          : t
      );
      setTasks({ ...tasks, [task.date]: updatedTasks });
    } catch (error) {
      console.error("Error toggling task:", error);
      Alert.alert("Error", "Failed to update task. Please try again.");
    }
  };

  const renderTask = ({ item }) => (
    <View style={styles.taskItemRow}>
      <TouchableOpacity
        style={styles.checkbox}
        onPress={() => toggleTaskChecked(item)}
        activeOpacity={0.7}
      >
        {item.is_completed || item.checked ? (
          <MaterialIcons name="check-box" size={24} color={theme.primary} />
        ) : (
          <MaterialIcons
            name="check-box-outline-blank"
            size={24}
            color={theme.textTertiary}
          />
        )}
      </TouchableOpacity>
      <TouchableOpacity
        style={[
          styles.taskItem,
          {
            flex: 1,
            flexDirection: "row",
            alignItems: "center",
            backgroundColor: theme.mode === "dark" ? "rgb(58, 58, 60)" : "#fff",
          },
        ]}
        onPress={() => openEditTask(item)}
        onLongPress={() => startMoveTask(item)}
        activeOpacity={0.7}
      >
        <View style={styles.taskTextContainer}>
          <Text
            style={[
              styles.taskText,
              {
                color:
                  item.is_completed || item.checked
                    ? theme.textTertiary
                    : theme.text,
              },
              (item.is_completed || item.checked) && styles.taskTextChecked,
            ]}
            numberOfLines={1}
            ellipsizeMode="tail"
          >
            {item.title}
          </Text>
        </View>
        <View style={styles.taskTimeContainer}>
          {item.time ? (
            <Text style={[styles.taskTimeRight, { color: theme.primary }]}>
              {formatTimeDisplay(item.time)}
            </Text>
          ) : null}
          {moveMode && taskToMove && taskToMove.id === item.id ? (
            <Text style={[styles.moveHint, { color: theme.primary }]}>
              {t.moveHint}
            </Text>
          ) : null}
        </View>
      </TouchableOpacity>
    </View>
  );

  // Helper to get previous/next day in YYYY-MM-DD
  const getAdjacentDate = (dateStr, diff) => {
    const date = new Date(dateStr);
    date.setDate(date.getDate() + diff);
    return date.toISOString().split("T")[0];
  };

  // Handler for horizontal swipe in task area
  const handleTaskAreaGesture = ({ nativeEvent }) => {
    const { translationX, translationY, state } = nativeEvent;
    // Only trigger on gesture end (state === 5 for END) and minimal vertical movement
    if (state === 5 && Math.abs(translationY) < 20) {
      if (translationX < -1) {
        // Swipe left, go to next day
        setSelectedDate(getAdjacentDate(selectedDate, 1));
      } else if (translationX > 1) {
        // Swipe right, go to previous day
        setSelectedDate(getAdjacentDate(selectedDate, -1));
      }
    }
  };

  const renderTaskArea = () => {
    const dayTasks = tasks[selectedDate] || [];

    const taskAreaContent = (
      <View
        style={[
          styles.taskArea,
          { flex: 1, backgroundColor: theme.backgroundSecondary },
        ]}
      >
        <View style={[styles.taskAreaContent, { flex: 1 }]}>
          <View
            style={[
              styles.tasksHeaderRow,
              {
                paddingLeft: 0,
                paddingHorizontal: 0,
                marginLeft: 4,
                backgroundColor: "transparent",
              },
            ]}
          >
            <Text
              style={[
                styles.tasksHeader,
                {
                  textAlign: "left",
                  paddingLeft: 0,
                  marginLeft: 4,
                  color: theme.text,
                },
              ]}
            >
              {selectedDate}
            </Text>
          </View>

          {/* Floating Add Button */}
          <TouchableOpacity
            style={[
              styles.fabAddButton,
              { backgroundColor: theme.primary, shadowColor: theme.primary },
            ]}
            onPress={() => openAddTask(selectedDate)}
            activeOpacity={0.7}
          >
            <View style={styles.addButtonIcon}>
              <Svg
                width={32}
                height={32}
                viewBox="0 0 32 32"
                style={{
                  display: "flex",
                  alignSelf: "center",
                  justifyContent: "center",
                }}
              >
                <Line
                  x1="16"
                  y1="6"
                  x2="16"
                  y2="26"
                  stroke="#fff"
                  strokeWidth="2.5"
                  strokeLinecap="round"
                />
                <Line
                  x1="6"
                  y1="16"
                  x2="26"
                  y2="16"
                  stroke="#fff"
                  strokeWidth="2.5"
                  strokeLinecap="round"
                />
              </Svg>
            </View>
          </TouchableOpacity>

          {dayTasks.length === 0 ? (
            <View style={styles.noTaskContainer}>
              <Svg
                width={64}
                height={64}
                viewBox="0 0 64 64"
                style={{ marginBottom: 12 }}
              >
                <Rect x="10" y="20" width="44" height="32" rx="8" fill="#eee" />
                <Line
                  x1="18"
                  y1="32"
                  x2="46"
                  y2="32"
                  stroke="#bbb"
                  strokeWidth="2"
                  strokeLinecap="round"
                />
                <Line
                  x1="18"
                  y1="40"
                  x2="38"
                  y2="40"
                  stroke="#ccc"
                  strokeWidth="2"
                  strokeLinecap="round"
                />
                <Circle cx="32" cy="16" r="6" fill="#e0e0e0" />
              </Svg>
              <Text style={[styles.noTaskText, { color: theme.textSecondary }]}>
                {t.noTasks}
              </Text>
            </View>
          ) : (
            <View style={{ flex: 1 }}>
              <FlatList
                data={dayTasks.slice().sort((a, b) => {
                  // Â∑≤ÂÆåÊàêÁöÑ‰ªªÂãôÊéíÂà∞ÊúÄÂ∫ï‰∏ã
                  const aCompleted = a.is_completed || a.checked;
                  const bCompleted = b.is_completed || b.checked;
                  if (aCompleted !== bCompleted) {
                    return aCompleted ? 1 : -1;
                  }
                  // Êú™ÂÆåÊàêÁöÑ‰ªªÂãôÊåâÊôÇÈñìÊéíÂ∫è
                  return (a.time || "").localeCompare(b.time || "");
                })}
                keyExtractor={(item) => item.id}
                renderItem={renderTask}
                contentContainerStyle={[
                  styles.tasksScrollContent,
                  { paddingBottom: 32 },
                ]}
                showsVerticalScrollIndicator={false}
              />
            </View>
          )}
        </View>
      </View>
    );

    // On web, return content directly without PanGestureHandler to avoid scroll issues
    if (Platform.OS === "web") {
      return taskAreaContent;
    }

    // On native, wrap with PanGestureHandler for swipe gestures
    return (
      <PanGestureHandler
        onHandlerStateChange={handleTaskAreaGesture}
        activeOffsetY={[-1000, 1000]}
        activeOffsetX={[-50, 50]}
      >
        {taskAreaContent}
      </PanGestureHandler>
    );
  };

  const renderModal = () => (
    <Modal
      animationType="slide"
      transparent={false}
      visible={modalVisible}
      onRequestClose={() => setModalVisible(false)}
      accessibilityViewIsModal={true}
      accessibilityLabel="Task Creation/Edit Modal"
    >
      <View
        style={[styles.modalOverlay, { backgroundColor: theme.modalOverlay }]}
      >
        <KeyboardAvoidingView
          behavior={Platform.OS === "ios" ? "padding" : "height"}
          style={{ flex: 1 }}
          keyboardVerticalOffset={0}
        >
          <View
            style={[
              styles.modalContent,
              { backgroundColor: theme.modalBackground },
            ]}
          >
            <View
              style={[
                styles.modalHeader,
                {
                  paddingTop: insets.top + 16,
                  backgroundColor:
                    theme.mode === "dark" ? theme.background : "#fff",
                  borderBottomColor:
                    theme.mode === "dark" ? "#2a2a2a" : theme.divider,
                },
              ]}
            >
              <TouchableOpacity
                style={styles.modalBackButton}
                onPress={() => setModalVisible(false)}
                accessibilityLabel="Go back"
                accessibilityHint="Close the task creation/editing modal"
              >
                <MaterialIcons name="arrow-back" size={24} color={theme.text} />
              </TouchableOpacity>
              <Text style={[styles.modalTitle, { color: theme.text }]}>
                {editingTask ? t.editTask : t.createTask}
              </Text>
              <View style={styles.modalHeaderSpacer} />
            </View>
            <ScrollView
              ref={modalScrollViewRef}
              style={styles.modalScrollView}
              keyboardShouldPersistTaps="handled"
              contentContainerStyle={{ paddingBottom: 100 }}
              nestedScrollEnabled={true}
              scrollEnabled={true}
            >
              <View style={{ marginBottom: 24, marginTop: 24 }}>
                {/* Task Text Input */}
                <View style={{ marginBottom: 20 }}>
                  <Text style={[styles.label, { color: theme.text }]}>
                    {t.taskLabel} <Text style={{ color: theme.error }}>*</Text>
                  </Text>
                  <TextInput
                    style={[
                      styles.input,
                      {
                        backgroundColor: theme.input,
                        borderColor: theme.inputBorder,
                        color: theme.text,
                      },
                    ]}
                    value={taskText}
                    onChangeText={setTaskText}
                    placeholder={t.addTask}
                    placeholderTextColor={theme.textPlaceholder}
                    autoFocus={false}
                    returnKeyType="done"
                    accessibilityLabel="Task title input"
                    accessibilityHint="Enter the task title"
                    onFocus={() => {
                      setTimeout(() => {
                        modalScrollViewRef.current?.scrollTo({
                          y: 0,
                          animated: true,
                        });
                      }, 100);
                    }}
                    onSubmitEditing={() => {
                      // Áï∂Áî®Êà∂Êåâ Enter ÊôÇÔºåÁõ¥Êé•ÂÑ≤Â≠ò‰ªªÂãôÔºàÊôÇÈñìÊòØÂèØÈÅ∏ÁöÑÔºâ
                      if (taskText.trim()) {
                        saveTask();
                      }
                    }}
                  />
                </View>

                {/* Link Input Field */}
                <View style={{ marginBottom: 20 }}>
                  <Text style={[styles.label, { color: theme.text }]}>
                    {t.link}
                  </Text>
                  <View
                    style={[
                      styles.linkInputContainer,
                      {
                        backgroundColor: theme.input,
                        borderColor: theme.inputBorder,
                      },
                      linkInputFocused && styles.linkInputContainerFocused,
                    ]}
                  >
                    <TextInput
                      style={[styles.linkInput, { color: theme.text }]}
                      value={taskLink}
                      onChangeText={setTaskLink}
                      placeholder={t.linkPlaceholder}
                      placeholderTextColor={theme.textPlaceholder}
                      keyboardType="url"
                      autoCapitalize="none"
                      autoCorrect={false}
                      accessibilityLabel="Task link input"
                      accessibilityHint="Enter a URL link for this task"
                      onFocus={() => {
                        setLinkInputFocused(true);
                        setTimeout(() => {
                          modalScrollViewRef.current?.scrollTo({
                            y: 50,
                            animated: true,
                          });
                        }, 100);
                      }}
                      onBlur={() => {
                        setLinkInputFocused(false);
                      }}
                    />
                    {taskLink && editingTask ? (
                      <TouchableOpacity
                        onPress={() => {
                          const url = taskLink.startsWith("http")
                            ? taskLink
                            : `https://${taskLink}`;
                          Linking.openURL(url).catch((err) =>
                            console.error("Failed to open URL:", err)
                          );
                        }}
                        style={styles.linkPreviewButton}
                      >
                        <MaterialIcons
                          name="open-in-new"
                          size={20}
                          color={theme.primary}
                        />
                      </TouchableOpacity>
                    ) : null}
                  </View>
                </View>

                {/* Date Input Field */}
                <View style={{ marginBottom: 20 }}>
                  <Text style={[styles.label, { color: theme.text }]}>
                    {t.date} <Text style={{ color: theme.error }}>*</Text>
                  </Text>
                  {Platform.OS === "web" ? (
                    <View
                      style={[
                        styles.linkInputContainer,
                        {
                          backgroundColor: theme.input,
                          borderColor: theme.inputBorder,
                        },
                      ]}
                    >
                      <style>
                        {`
                        #date-input-field::-webkit-calendar-picker-indicator {
                          position: absolute;
                          width: 100%;
                          height: 100%;
                          top: 0;
                          left: 0;
                          opacity: 0;
                          cursor: pointer;
                        }
                        #date-input-field::-webkit-date-and-time-value {
                          text-align: left;
                        }
                      `}
                      </style>
                      <input
                        id="date-input-field"
                        type="date"
                        value={taskDate}
                        onChange={(e) => setTaskDate(e.target.value)}
                        style={{
                          width: "100%",
                          fontSize: 16,
                          paddingLeft: 16,
                          paddingRight: 16,
                          border: "none",
                          backgroundColor: "transparent",
                          fontFamily: "inherit",
                          outline: "none",
                          height: 50,
                          color: theme.text,
                          cursor: "pointer",
                          position: "relative",
                          textAlign: "left",
                        }}
                      />
                    </View>
                  ) : (
                    <TouchableOpacity
                      onPress={() => {
                        Keyboard.dismiss(); // ÈóúÈñâÈçµÁõ§
                        setTempDate(taskDate ? new Date(taskDate) : new Date());
                        setDatePickerVisible(true);
                      }}
                      style={[
                        styles.linkInputContainer,
                        {
                          backgroundColor: theme.input,
                          borderColor: theme.inputBorder,
                        },
                      ]}
                      activeOpacity={0.7}
                    >
                      <Text
                        style={[
                          styles.dateTimeText,
                          { color: theme.text },
                          !taskDate && [
                            styles.placeholderText,
                            { color: theme.textPlaceholder },
                          ],
                        ]}
                      >
                        {taskDate || t.datePlaceholder}
                      </Text>
                      <View
                        style={styles.linkPreviewButton}
                        pointerEvents="none"
                      >
                        <MaterialIcons
                          name="event"
                          size={20}
                          color={theme.primary}
                        />
                      </View>
                    </TouchableOpacity>
                  )}
                </View>

                {/* Time Input Field */}
                <View style={{ marginBottom: 20 }}>
                  <Text style={[styles.label, { color: theme.text }]}>
                    {t.time}
                  </Text>
                  {Platform.OS === "web" ? (
                    <View
                      style={[
                        styles.linkInputContainer,
                        {
                          backgroundColor: theme.input,
                          borderColor: theme.inputBorder,
                        },
                      ]}
                    >
                      <style>
                        {`
                        #time-input-field::-webkit-calendar-picker-indicator {
                          position: absolute;
                          width: 100%;
                          height: 100%;
                          top: 0;
                          left: 0;
                          opacity: 0;
                          cursor: pointer;
                        }
                        #time-input-field::-webkit-date-and-time-value {
                          text-align: left;
                        }
                      `}
                      </style>
                      <input
                        id="time-input-field"
                        type="time"
                        step="60"
                        value={taskTime}
                        onChange={(e) => setTaskTime(e.target.value)}
                        style={{
                          width: "100%",
                          fontSize: 16,
                          paddingLeft: 16,
                          paddingRight: 16,
                          border: "none",
                          backgroundColor: "transparent",
                          fontFamily: "inherit",
                          outline: "none",
                          height: 50,
                          color: theme.text,
                          cursor: "pointer",
                          position: "relative",
                          textAlign: "left",
                        }}
                      />
                    </View>
                  ) : (
                    <TouchableOpacity
                      onPress={() => {
                        Keyboard.dismiss(); // ÈóúÈñâÈçµÁõ§
                        const now = new Date();
                        setTempTime(
                          taskTime
                            ? new Date(
                                2024,
                                0,
                                1,
                                parseInt(taskTime.split(":")[0]) || 0,
                                parseInt(taskTime.split(":")[1]) || 0
                              )
                            : now
                        );
                        setTimePickerVisible(true);
                      }}
                      style={[
                        styles.linkInputContainer,
                        {
                          backgroundColor: theme.input,
                          borderColor: theme.inputBorder,
                        },
                      ]}
                      activeOpacity={0.7}
                    >
                      <Text
                        style={[
                          styles.dateTimeText,
                          { color: theme.text },
                          !taskTime && [
                            styles.placeholderText,
                            { color: theme.textPlaceholder },
                          ],
                        ]}
                      >
                        {taskTime || t.timePlaceholder}
                      </Text>
                      <View
                        style={styles.linkPreviewButton}
                        pointerEvents="none"
                      >
                        <MaterialIcons
                          name="access-time"
                          size={20}
                          color={theme.primary}
                        />
                      </View>
                    </TouchableOpacity>
                  )}
                </View>

                {/* Note Input Field */}
                <View style={{ marginBottom: 20 }}>
                  <Text style={[styles.label, { color: theme.text }]}>
                    {t.note}
                  </Text>
                  <TextInput
                    style={[
                      styles.input,
                      styles.noteInput,
                      {
                        backgroundColor: theme.input,
                        borderColor: theme.inputBorder,
                        color: theme.text,
                      },
                    ]}
                    value={taskNote}
                    onChangeText={setTaskNote}
                    placeholder={t.notePlaceholder}
                    placeholderTextColor={theme.textPlaceholder}
                    multiline={true}
                    numberOfLines={4}
                    textAlignVertical="top"
                    accessibilityLabel="Task note input"
                    accessibilityHint="Enter additional notes for this task"
                    onFocus={() => {
                      setTimeout(() => {
                        modalScrollViewRef.current?.scrollToEnd({
                          animated: true,
                        });
                      }, 100);
                    }}
                  />
                </View>
              </View>
            </ScrollView>
            <View
              style={[
                styles.modalButtons,
                {
                  backgroundColor:
                    theme.mode === "dark" ? theme.background : "#fff",
                  borderTopColor: theme.mode === "dark" ? "#2a2a2a" : "#f0f0f0",
                },
              ]}
            >
              {editingTask ? (
                <>
                  <TouchableOpacity
                    style={[
                      styles.deleteButton,
                      { backgroundColor: theme.backgroundTertiary },
                    ]}
                    onPress={showDeleteConfirm}
                  >
                    <Text
                      style={[styles.deleteButtonText, { color: theme.error }]}
                    >
                      {t.delete}
                    </Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={[
                      styles.saveButton,
                      { backgroundColor: theme.primary },
                    ]}
                    onPress={saveTask}
                  >
                    <Text
                      style={[
                        styles.saveButtonText,
                        { color: theme.buttonText },
                      ]}
                    >
                      {t.update}
                    </Text>
                  </TouchableOpacity>
                </>
              ) : (
                <>
                  <View style={{ flex: 1 }} />
                  <TouchableOpacity
                    style={[
                      styles.saveButton,
                      { backgroundColor: theme.primary },
                    ]}
                    onPress={saveTask}
                  >
                    <Text
                      style={[
                        styles.saveButtonText,
                        { color: theme.buttonText },
                      ]}
                    >
                      {t.save}
                    </Text>
                  </TouchableOpacity>
                </>
              )}
            </View>
          </View>
        </KeyboardAvoidingView>
        {renderDatePickerOverlay()}
        {renderTimePickerOverlay()}
      </View>
    </Modal>
  );

  const renderDeleteConfirmModal = () => {
    console.log(
      "renderDeleteConfirmModal called, deleteConfirmVisible:",
      deleteConfirmVisible
    );

    if (!deleteConfirmVisible) return null;

    return (
      <Modal
        visible={deleteConfirmVisible}
        animationType="fade"
        transparent={true}
        onRequestClose={() => setDeleteConfirmVisible(false)}
        accessibilityViewIsModal={true}
        accessibilityLabel="Delete Confirmation Modal"
        statusBarTranslucent={true}
      >
        <TouchableOpacity
          style={{
            flex: 1,
            backgroundColor: theme.modalOverlay,
            justifyContent: "center",
            alignItems: "center",
          }}
          activeOpacity={1}
          onPress={() => setDeleteConfirmVisible(false)}
        >
          <View
            style={{
              backgroundColor: theme.modalBackground,
              borderRadius: 12,
              minWidth: 280,
              maxWidth: 320,
              alignItems: "center",
              overflow: "hidden",
            }}
          >
            <View style={{ padding: 24, paddingBottom: 16 }}>
              <Text
                style={{
                  fontSize: 18,
                  color: theme.text,
                  textAlign: "center",
                  fontWeight: "600",
                  lineHeight: 24,
                }}
              >
                {t.deleteConfirm}
              </Text>
            </View>

            <View
              style={{
                height: 1,
                backgroundColor: theme.divider,
                width: "100%",
              }}
            />

            <View
              style={{
                flexDirection: "row",
                width: "100%",
              }}
            >
              <TouchableOpacity
                onPress={() => setDeleteConfirmVisible(false)}
                style={{
                  flex: 1,
                  paddingVertical: 16,
                  alignItems: "center",
                  borderRightWidth: 1,
                  borderRightColor: theme.divider,
                }}
              >
                <Text
                  style={{
                    color: theme.primary,
                    fontSize: 17,
                    fontWeight: "400",
                  }}
                >
                  {t.cancel}
                </Text>
              </TouchableOpacity>

              <TouchableOpacity
                onPress={deleteTask}
                style={{
                  flex: 1,
                  paddingVertical: 16,
                  alignItems: "center",
                }}
              >
                <Text
                  style={{
                    color: theme.error,
                    fontSize: 17,
                    fontWeight: "600",
                  }}
                >
                  {t.delete}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </TouchableOpacity>
      </Modal>
    );
  };

  const renderDatePickerOverlay = () => {
    if (!datePickerVisible || Platform.OS === "web") return null;

    return (
      <View
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          zIndex: 1000,
        }}
      >
        <TouchableOpacity
          style={{
            flex: 1,
            backgroundColor: "rgba(0,0,0,0.5)",
            justifyContent: "flex-end",
          }}
          activeOpacity={1}
          onPress={() => setDatePickerVisible(false)}
        >
          <View
            style={{
              backgroundColor:
                theme.mode === "dark" ? theme.background : "#fff",
              borderTopLeftRadius: 16,
              borderTopRightRadius: 16,
              paddingBottom: insets.bottom,
            }}
            onStartShouldSetResponder={() => true}
          >
            <View
              style={{
                flexDirection: "row",
                justifyContent: "space-between",
                alignItems: "center",
                paddingHorizontal: 16,
                paddingVertical: 12,
                borderBottomWidth: 1,
                borderBottomColor:
                  theme.mode === "dark" ? "#2a2a2a" : "#f0f0f0",
              }}
            >
              <TouchableOpacity
                onPress={() => setDatePickerVisible(false)}
                style={{ paddingVertical: 8, paddingHorizontal: 8 }}
              >
                <Text style={{ color: theme.primary, fontSize: 17 }}>
                  {t.cancel}
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                onPress={() => {
                  if (tempDate) {
                    const year = tempDate.getFullYear();
                    const month = String(tempDate.getMonth() + 1).padStart(
                      2,
                      "0"
                    );
                    const day = String(tempDate.getDate()).padStart(2, "0");
                    setTaskDate(`${year}-${month}-${day}`);
                  }
                  setDatePickerVisible(false);
                }}
                style={{ paddingVertical: 8, paddingHorizontal: 8 }}
              >
                <Text
                  style={{
                    color: theme.primary,
                    fontSize: 17,
                    fontWeight: "600",
                  }}
                >
                  {t.confirm}
                </Text>
              </TouchableOpacity>
            </View>
            {tempDate && (
              <View style={{ alignItems: "center", width: "100%" }}>
                <DateTimePicker
                  value={tempDate}
                  mode="date"
                  display={Platform.OS === "ios" ? "inline" : "calendar"}
                  themeVariant={themeMode === "dark" ? "dark" : "light"}
                  accentColor={theme.primary}
                  onChange={(event, selectedDate) => {
                    if (selectedDate) {
                      setTempDate(selectedDate);
                    }
                  }}
                  style={{ width: "100%" }}
                />
              </View>
            )}
          </View>
        </TouchableOpacity>
      </View>
    );
  };

  const renderTimePickerOverlay = () => {
    if (!timePickerVisible || Platform.OS === "web") return null;

    return (
      <View
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          zIndex: 1000,
        }}
      >
        <TouchableOpacity
          style={{
            flex: 1,
            backgroundColor: "rgba(0,0,0,0.5)",
            justifyContent: "flex-end",
          }}
          activeOpacity={1}
          onPress={() => setTimePickerVisible(false)}
        >
          <View
            style={{
              backgroundColor:
                theme.mode === "dark" ? theme.background : "#fff",
              borderTopLeftRadius: 16,
              borderTopRightRadius: 16,
              paddingBottom: insets.bottom,
            }}
            onStartShouldSetResponder={() => true}
          >
            <View
              style={{
                flexDirection: "row",
                justifyContent: "space-between",
                alignItems: "center",
                paddingHorizontal: 16,
                paddingVertical: 12,
                borderBottomWidth: 1,
                borderBottomColor:
                  theme.mode === "dark" ? "#2a2a2a" : "#f0f0f0",
              }}
            >
              <TouchableOpacity
                onPress={() => setTimePickerVisible(false)}
                style={{ paddingVertical: 8, paddingHorizontal: 8 }}
              >
                <Text style={{ color: theme.primary, fontSize: 17 }}>
                  {t.cancel}
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                onPress={() => {
                  if (tempTime) {
                    const hours = String(tempTime.getHours()).padStart(2, "0");
                    const minutes = String(tempTime.getMinutes()).padStart(
                      2,
                      "0"
                    );
                    setTaskTime(`${hours}:${minutes}`);
                  }
                  setTimePickerVisible(false);
                }}
                style={{ paddingVertical: 8, paddingHorizontal: 8 }}
              >
                <Text
                  style={{
                    color: theme.primary,
                    fontSize: 17,
                    fontWeight: "600",
                  }}
                >
                  {t.confirm}
                </Text>
              </TouchableOpacity>
            </View>
            {tempTime && (
              <View style={{ alignItems: "center", width: "100%" }}>
                <DateTimePicker
                  value={tempTime}
                  mode="time"
                  display="spinner"
                  themeVariant={themeMode === "dark" ? "dark" : "light"}
                  accentColor={theme.primary}
                  onChange={(event, selectedTime) => {
                    if (selectedTime) {
                      setTempTime(selectedTime);
                    }
                  }}
                  style={{ width: "100%" }}
                />
              </View>
            )}
          </View>
        </TouchableOpacity>
      </View>
    );
  };

  // Calendar navigation functions
  // Handles vertical swipe gestures for month navigation
  const handleVerticalGesture = ({ nativeEvent }) => {
    const { translationY, state } = nativeEvent;
    // Only trigger on gesture end (state === 5 for END in react-native-gesture-handler)
    if (state === 5) {
      if (translationY < -50) {
        goToNextMonth(); // Swipe up
      } else if (translationY > 50) {
        goToPrevMonth(); // Swipe down
      }
    }
  };

  const goToNextMonth = () => {
    let newMonth = visibleMonth + 1;
    let newYear = visibleYear;
    if (newMonth > 11) {
      newMonth = 0;
      newYear += 1;
    }
    setVisibleMonth(newMonth);
    setVisibleYear(newYear);
  };

  const goToPrevMonth = () => {
    let newMonth = visibleMonth - 1;
    let newYear = visibleYear;
    if (newMonth < 0) {
      newMonth = 11;
      newYear -= 1;
    }
    setVisibleMonth(newMonth);
    setVisibleYear(newYear);
  };

  // Calendar header UI
  const monthNames = t.months;
  const header = (
    <View style={styles.fixedHeader}>
      <View style={styles.headerContainer}>
        <Text style={[styles.currentMonthTitle, { color: theme.text }]}>
          {visibleYear} {monthNames[visibleMonth]}
        </Text>
        <TouchableOpacity
          style={[
            styles.todayButton,
            {
              backgroundColor: theme.primary,
            },
          ]}
          onPress={() => {
            const today = getCurrentDate();
            setSelectedDate(today);
            setVisibleMonth(new Date(today).getMonth());
            setVisibleYear(new Date(today).getFullYear());
          }}
        >
          <Text style={[styles.todayButtonText, { color: "#ffffff" }]}>
            {t.today}
          </Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  const calendarContent = (
    <View style={[styles.container, { backgroundColor: theme.background }]}>
      <View
        style={[styles.calendarSection, { backgroundColor: theme.background }]}
      >
        {header}
        <View
          style={[styles.weekDaysHeader, { borderBottomColor: theme.divider }]}
        >
          {t.weekDays.map((d, i) => (
            <Text
              key={i}
              style={[styles.weekDayText, { color: theme.textSecondary }]}
            >
              {d}
            </Text>
          ))}
        </View>
        <View>
          {Platform.OS === "web" ? (
            <ScrollView
              ref={scrollViewRef}
              style={[
                styles.calendarScrollView,
                { backgroundColor: theme.background },
              ]}
              contentContainerStyle={styles.scrollContent}
            >
              {renderCalendar()}
            </ScrollView>
          ) : (
            <PanGestureHandler onHandlerStateChange={handleVerticalGesture}>
              <View>
                <ScrollView
                  ref={scrollViewRef}
                  style={[
                    styles.calendarScrollView,
                    { backgroundColor: theme.background },
                  ]}
                  contentContainerStyle={styles.scrollContent}
                >
                  {renderCalendar()}
                </ScrollView>
              </View>
            </PanGestureHandler>
          )}
        </View>
      </View>
      <View
        style={[
          styles.taskAreaContainer,
          { backgroundColor: theme.backgroundSecondary },
        ]}
      >
        {renderTaskArea()}
      </View>
      {renderModal()}
    </View>
  );

  return (
    <SafeAreaView
      style={{ flex: 1, backgroundColor: theme.background }}
      edges={["top"]}
    >
      {Platform.OS === "web" ? (
        calendarContent
      ) : (
        <GestureHandlerRootView
          style={[styles.container, { backgroundColor: theme.background }]}
        >
          {calendarContent}
        </GestureHandlerRootView>
      )}
    </SafeAreaView>
  );
}

export default function App() {
  // Load fonts
  const [fontsLoaded] = useFonts({
    Roboto_400Regular,
    Roboto_500Medium,
    Roboto_700Bold,
    NotoSansTC_400Regular,
    NotoSansTC_500Medium,
    NotoSansTC_700Bold,
  });

  // Version update state
  const [versionUpdateVisible, setVersionUpdateVisible] = useState(false);
  const [versionUpdateInfo, setVersionUpdateInfo] = useState(null);

  useEffect(() => {
    // Add Google Fonts for web only - keep it simple for native
    if (Platform.OS === "web" && typeof document !== "undefined") {
      // Add Google Fonts links
      const fontsLink = document.createElement("link");
      fontsLink.href =
        "https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Noto+Sans+TC:wght@400;500;700&display=swap";
      fontsLink.rel = "stylesheet";
      document.head.appendChild(fontsLink);

      // Apply fonts using more specific selectors to avoid icon interference
      const style = document.createElement("style");
      style.textContent = `
        /* Apply to all text content containers, but not icons */
        [dir] > * {
          font-family: 'Roboto', 'Noto Sans TC', -apple-system, BlinkMacSystemFont, 'Segoe UI', 
            Helvetica, Arial, sans-serif !important;
        }
        
        /* Exclude icons and SVG elements */
        [dir] > svg,
        [dir] > * > svg,
        [dir] [role="img"],
        [dir] [aria-label*="icon" i] {
          font-family: inherit !important;
        }
        
        /* Apply to input fields */
        input, textarea, select {
          font-family: 'Roboto', 'Noto Sans TC', -apple-system, BlinkMacSystemFont, 'Segoe UI', 
            Helvetica, Arial, sans-serif !important;
        }
      `;
      document.head.appendChild(style);
    }
  }, []);

  useEffect(() => {
    if (Platform.OS === "web") {
      const setTitle = () => {
        document.title = "To Do";
      };
      setTitle();
      const observer = new MutationObserver(() => {
        if (document.title !== "To Do") {
          document.title = "To Do";
        }
      });
      const titleTag = document.querySelector("title");
      if (titleTag) {
        observer.observe(titleTag, { childList: true });
      }

      return () => observer.disconnect();
    }
  }, []);
  // Always set browser tab title on web
  React.useEffect(() => {
    if (typeof document !== "undefined") {
      document.title = "Too Doo List";
    }
  }, []);
  const [language, setLanguageState] = useState("en");
  const [loadingLang, setLoadingLang] = useState(true);
  const [themeMode, setThemeModeState] = useState("light");
  const [loadingTheme, setLoadingTheme] = useState(true);

  // Request notification permissions on app start (native only)
  useEffect(() => {
    if (Platform.OS !== "web") {
      const requestNotificationPermissions = async () => {
        try {
          const granted = await registerForPushNotificationsAsync();
          if (granted) {
            console.log("‚úÖ Notification permissions granted");
          } else {
            console.log("‚ùå Notification permissions denied");
          }
        } catch (error) {
          console.error("Error requesting notification permissions:", error);
        }
      };
      requestNotificationPermissions();
    }
  }, []);

  // Check for version updates on app start (ÂÉÖÂú®ÂéüÁîüÂπ≥Âè∞)
  useEffect(() => {
    const checkVersionUpdate = async () => {
      // Web ÁâàÊú¨ÊúÉËá™ÂãïÊõ¥Êñ∞Ôºå‰∏çÈúÄË¶ÅÊ™¢Êü•ÁâàÊú¨
      if (Platform.OS === "web") {
        console.log("üåê [App] Web Âπ≥Âè∞ - Ë∑≥ÈÅéÁâàÊú¨Ê™¢Êü•ÔºàËá™ÂãïÊõ¥Êñ∞Ôºâ");
        return;
      }

      try {
        console.log("üîç [App] ÈñãÂßãÊ™¢Êü•ÁâàÊú¨Êõ¥Êñ∞...");
        console.log("üîç [App] Áï∂ÂâçÁí∞Â¢É:", process.env.EXPO_PUBLIC_APP_ENV);
        console.log("üîç [App] Áï∂ÂâçÂπ≥Âè∞:", Platform.OS);
        const updateInfo = await versionService.checkForUpdates();
        console.log("üîç [App] ÁâàÊú¨Ê™¢Êü•ÁµêÊûú:", updateInfo);

        if (updateInfo.hasUpdate) {
          console.log("üîÑ [App] ÁôºÁèæÊñ∞ÁâàÊú¨:", updateInfo.latestVersion);
          setVersionUpdateInfo(updateInfo);
          setVersionUpdateVisible(true);
        } else {
          console.log("‚úÖ [App] Áï∂ÂâçÁâàÊú¨Â∑≤ÊòØÊúÄÊñ∞ÁâàÊú¨");
        }
      } catch (error) {
        console.error("‚ùå [App] ÁâàÊú¨Ê™¢Êü•Â§±Êïó:", error);
      }
    };

    // Âª∂ÈÅ≤ 1 ÁßíÂæåÊ™¢Êü•ÁâàÊú¨ÔºåÈÅøÂÖçÂΩ±Èüø app ÂïüÂãïÈÄüÂ∫¶
    const timer = setTimeout(checkVersionUpdate, 1000);

    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    // Set browser tab title
    if (typeof document !== "undefined") {
      document.title = "Too Doo List";
    }
    ReactGA.initialize("G-NV40E1BDH3");

    if (
      Platform.OS === "web" &&
      typeof window !== "undefined" &&
      window.location
    ) {
      ReactGA.send({ hitType: "pageview", page: window.location.pathname });
    }
    // Load language from Supabase user settings
    const loadLanguage = async () => {
      try {
        console.log("üåê Loading language settings from Supabase...");
        const userSettings = await UserService.getUserSettings();
        console.log("üì¶ User settings received:", userSettings);

        if (
          userSettings.language &&
          (userSettings.language === "en" || userSettings.language === "zh")
        ) {
          console.log(`‚úÖ Language loaded: ${userSettings.language}`);
          setLanguageState(userSettings.language);
        } else {
          console.log("‚ö†Ô∏è No language setting found, using default: en");
        }
      } catch (error) {
        console.error("‚ùå Error loading language settings:", error);
        // Fallback to AsyncStorage if Supabase fails
        AsyncStorage.getItem(LANGUAGE_STORAGE_KEY).then((lang) => {
          if (lang && (lang === "en" || lang === "zh")) {
            console.log(`üì± Language loaded from AsyncStorage: ${lang}`);
            setLanguageState(lang);
          }
        });
      } finally {
        setLoadingLang(false);
      }
    };

    const loadTheme = async () => {
      try {
        console.log("üé® Loading theme settings from Supabase...");
        const userSettings = await UserService.getUserSettings();
        console.log("üì¶ Theme settings received:", userSettings);

        if (
          userSettings.theme &&
          (userSettings.theme === "light" || userSettings.theme === "dark")
        ) {
          console.log(`‚úÖ Theme loaded: ${userSettings.theme}`);
          setThemeModeState(userSettings.theme);
        } else {
          console.log("‚ö†Ô∏è No theme setting found, using default: light");
        }
      } catch (error) {
        console.error("‚ùå Error loading theme settings:", error);
      } finally {
        setLoadingTheme(false);
      }
    };

    // ÊØèÊ¨° App ÂïüÂãïÊôÇÈÉΩÊõ¥Êñ∞Âπ≥Âè∞Ë≥áË®ä
    const updatePlatformOnStart = async () => {
      try {
        const {
          data: { user },
        } = await supabase.auth.getUser();
        if (user) {
          await UserService.updatePlatformInfo();
          console.log("üì± Platform info updated on app start");
        }
      } catch (error) {
        console.error("Error updating platform on start:", error);
      }
    };

    loadLanguage();
    loadTheme();
    updatePlatformOnStart();
  }, []);

  const setLanguage = async (lang) => {
    console.log(`üåê Setting language to: ${lang}`);
    setLanguageState(lang);

    try {
      // Save to Supabase user settings (platform ÊúÉËá™ÂãïÊõ¥Êñ∞)
      const result = await UserService.updateUserSettings({
        language: lang,
      });
      console.log("‚úÖ Language saved to Supabase:", result);
    } catch (error) {
      console.error("‚ùå Error saving language to Supabase:", error);
      // Fallback to AsyncStorage
      AsyncStorage.setItem(LANGUAGE_STORAGE_KEY, lang);
    }
  };

  const setThemeMode = async (mode) => {
    console.log(`üé® Setting theme to: ${mode}`);
    setThemeModeState(mode);

    try {
      // Save to Supabase user settings (platform ÊúÉËá™ÂãïÊõ¥Êñ∞)
      const result = await UserService.updateUserSettings({
        theme: mode,
      });
      console.log("‚úÖ Theme saved to Supabase:", result);
    } catch (error) {
      console.error("‚ùå Error saving theme to Supabase:", error);
    }
  };

  const toggleTheme = () => {
    const newMode = themeMode === "light" ? "dark" : "light";
    setThemeMode(newMode);
  };

  const t = translations[language] || translations.en;
  const theme = getTheme(themeMode);

  // Wait for fonts and language to load
  // Add timeout fallback to prevent infinite white screen
  const [fontTimeout, setFontTimeout] = React.useState(false);
  React.useEffect(() => {
    const timer = setTimeout(() => {
      console.log("Font loading timeout - continuing anyway");
      setFontTimeout(true);
    }, 3000); // Reduced from 5s to 3s
    return () => clearTimeout(timer);
  }, []);

  // Log font loading status
  React.useEffect(() => {
    console.log("Font loading status:", {
      fontsLoaded,
      fontTimeout,
      loadingLang,
    });
  }, [fontsLoaded, fontTimeout, loadingLang]);

  // Allow app to start even if fonts aren't loaded (with fallback)
  if (!fontsLoaded && !fontTimeout) {
    console.log("Waiting for fonts...");
    return (
      <View
        style={{
          flex: 1,
          backgroundColor: "#fff",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <Text style={{ fontSize: 16, color: "#666" }}>Loading...</Text>
      </View>
    );
  }
  if (loadingLang && !fontTimeout) {
    console.log("Waiting for language...");
    return (
      <View
        style={{
          flex: 1,
          backgroundColor: "#fff",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <Text style={{ fontSize: 16, color: "#666" }}>Loading...</Text>
      </View>
    );
  }

  function MainTabs() {
    const { t } = useContext(LanguageContext);
    const { theme } = useContext(ThemeContext);
    React.useEffect(() => {
      if (typeof document !== "undefined") {
        setTimeout(() => {
          document.title = "To Do";
        }, 0);
      }
    });
    return (
      <Tab.Navigator
        initialRouteName="Calendar"
        screenOptions={({ route }) => ({
          headerShown: false,
          tabBarIcon: ({ color, size }) => {
            let iconName;
            if (route.name === "Calendar") {
              iconName = "calendar-today";
            } else if (route.name === "Setting") {
              iconName = "settings";
            }
            return <MaterialIcons name={iconName} size={size} color={color} />;
          },
          tabBarActiveTintColor: theme.mode === "dark" ? "#ffffff" : "#000000",
          tabBarInactiveTintColor: "#888888",
          tabBarShowLabel: false,
          tabBarStyle: {
            height: 80,
            paddingBottom: 8,
            paddingTop: 8,
            backgroundColor: theme.tabBarBackground,
            borderTopWidth: 1,
            borderTopColor: theme.divider,
          },
          tabBarIconStyle: {
            justifyContent: "center",
            alignItems: "center",
            marginTop: "auto",
            marginBottom: "auto",
          },
        })}
      >
        <Tab.Screen
          name="Calendar"
          component={CalendarScreen}
          options={{ title: t.calendar }}
        />
        <Tab.Screen
          name="Setting"
          component={SettingScreen}
          options={{ title: t.settings }}
        />
      </Tab.Navigator>
    );
  }

  return (
    <ThemeContext.Provider
      value={{ theme, themeMode, setThemeMode, toggleTheme }}
    >
      <LanguageContext.Provider value={{ language, setLanguage, t }}>
        <NavigationContainer
          linking={{
            prefixes: [
              getRedirectUrl(),
              "http://localhost:8081",
              "too-doo-list-staging://",
              "too-doo-list-dev://",
              "too-doo-list://",
            ],
            config: {
              screens: {
                Splash: "",
                MainTabs: "app",
                Terms: "terms",
                Privacy: "privacy",
                ComingSoon: "coming-soon",
              },
            },
          }}
          onStateChange={() => {
            if (typeof document !== "undefined") {
              document.title = "To Do";
            }
          }}
        >
          <Stack.Navigator
            screenOptions={{
              headerShown: false,
              gestureEnabled: true,
              gestureDirection: "horizontal",
            }}
            initialRouteName="Splash"
          >
            <Stack.Screen name="Splash" component={SplashScreen} />
            <Stack.Screen
              name="MainTabs"
              component={MainTabs}
              options={{
                headerShown: false,
                gestureEnabled: false,
                animationEnabled: false,
              }}
            />
            <Stack.Screen
              name="Terms"
              component={TermsScreen}
              options={{
                headerShown: false,
                presentation: "card",
                gestureEnabled: true,
                gestureDirection: "horizontal",
              }}
            />
            <Stack.Screen
              name="Privacy"
              component={PrivacyScreen}
              options={{
                headerShown: false,
                presentation: "card",
                gestureEnabled: true,
                gestureDirection: "horizontal",
              }}
            />
            <Stack.Screen
              name="ComingSoon"
              component={require("./ComingSoonScreen").default}
            />
          </Stack.Navigator>
        </NavigationContainer>

        {/* Version Update Modal */}
        <VersionUpdateModal
          visible={versionUpdateVisible}
          onClose={() => setVersionUpdateVisible(false)}
          updateInfo={versionUpdateInfo}
          forceUpdate={versionUpdateInfo?.forceUpdate || false}
        />
      </LanguageContext.Provider>
    </ThemeContext.Provider>
  );
}

// ...

// Helper function to get font family based on platform and language
const getFontFamily = (language = "en", weight = "regular") => {
  if (Platform.OS === "web") {
    // For web, use CSS font family with fallback
    const isChinese = language === "zh";
    if (weight === "bold") {
      return isChinese
        ? '"Noto Sans TC", "Roboto", -apple-system, system-ui, sans-serif'
        : '"Roboto", "Noto Sans TC", -apple-system, system-ui, sans-serif';
    }
    return isChinese
      ? '"Noto Sans TC", "Roboto", -apple-system, system-ui, sans-serif'
      : '"Roboto", "Noto Sans TC", -apple-system, system-ui, sans-serif';
  }

  // For native apps, use loaded fonts
  const isChinese = language === "zh";
  if (weight === "bold") {
    return isChinese ? "NotoSansTC_700Bold" : "Roboto_700Bold";
  } else if (weight === "medium") {
    return isChinese ? "NotoSansTC_500Medium" : "Roboto_500Medium";
  }
  return isChinese ? "NotoSansTC_400Regular" : "Roboto_400Regular";
};

const styles = StyleSheet.create({
  taskItemRow: {
    flexDirection: "row",
    alignItems: "center",
    width: "100%",
  },
  checkbox: {
    marginRight: 2,
    padding: 4,
    alignItems: "center",
    justifyContent: "center",
  },
  taskTextChecked: {
    textDecorationLine: "line-through",
    color: "#bbb",
  },
  fabAddButton: {
    position: "absolute",
    right: 20,
    bottom: 8,
    zIndex: 10,
    borderRadius: 32,
    backgroundColor: "#6c63ff",
    alignItems: "center",
    justifyContent: "center",
    width: 64,
    height: 64,
    shadowColor: "#6c63ff",
    shadowOffset: { width: 0, height: 3 },
    shadowOpacity: 0.35,
    shadowRadius: 8,
    elevation: 7,
  },
  // ...
  // Removed bottomMenuBar style, handled by Tab.Navigator now

  container: {
    flex: 1,
    flexDirection: "column",
    // backgroundColor moved to inline style to use theme
  },
  calendarSection: {
    flexShrink: 0,
    // backgroundColor moved to inline style to use theme
  },
  taskAreaContainer: {
    // backgroundColor moved to inline style to use theme
    width: "100%",
    flex: 1,
    paddingBottom: 60, // Add padding equal to bottom bar height
  },
  taskArea: {
    flex: 1,
    // backgroundColor moved to inline style to use theme
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 16,
  },
  currentMonthTitle: {
    fontSize: 16,
    fontWeight: "500",
    textAlign: "left",
  },
  weekDaysHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    paddingHorizontal: 8,
    paddingBottom: 8,
    borderBottomWidth: 1,
    borderBottomColor: "#bbbbbb",
  },
  // Scroll container
  calendarDivider: {
    height: 1,
    backgroundColor: "#bbbbbb",
    marginBottom: 4,
  },
  calendarScrollView: {
    flexGrow: 0,
    backgroundColor: "#fff",
  },
  scrollContent: {
    paddingBottom: 0,
  },
  scrollSpacer: {
    height: 10,
  },
  // Month container
  monthContainer: {
    marginBottom: 0,
  },
  customCalendar: {
    borderRadius: 16,
    overflow: "hidden",
    elevation: 2,
    backgroundColor: "#fff",
    padding: 6,
  },
  weekDayText: {
    flex: 1,
    textAlign: "center",
    color: "#666",
    fontSize: 14,
    fontWeight: "400",
    minWidth: 40,
    maxWidth: 40,
  },
  calendarWeekRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    height: 50,
    paddingHorizontal: 4,
  },
  emptyDate: {
    width: 40,
    height: 40,
    margin: 2,
  },
  hiddenDate: {
    opacity: 0,
  },
  calendarDay: {
    flex: 1,
    aspectRatio: 1,
    alignItems: "center",
    justifyContent: "center",
    margin: 1,
    borderRadius: 8,
    backgroundColor: "#fff",
    zIndex: 1,
    minWidth: 40,
    maxWidth: 40,
    minHeight: 40,
    maxHeight: 40,
  },
  calendarDayContent: {
    width: "100%",
    height: "100%",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
  },
  dateContainer: {
    width: "100%",
    height: "100%",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
  },
  calendarDayText: {
    fontSize: 16,
    color: "#333",
    fontWeight: "500",
    textAlign: "center",
    lineHeight: 16,
  },
  selectedDay: {
    backgroundColor: "#e8e7fc",
    zIndex: 3,
    elevation: 2,
    minWidth: 40,
    maxWidth: 40,
    minHeight: 40,
    maxHeight: 40,
  },
  selectedDayText: {
    color: "#6c63ff",
    fontWeight: "700",
    zIndex: 4,
  },
  otherMonthText: {
    color: "#999999",
  },
  calendarDayMoveTarget: {
    borderColor: "#ffb300",
    borderWidth: 2,
  },
  taskDot: {
    position: "absolute",
    bottom: 2,
    width: 6,
    height: 6,
    borderRadius: 3,
    backgroundColor: "#6c63ff",
  },
  todayCircle: {
    backgroundColor: "#6c63ff",
    width: 20,
    height: 20,
    borderRadius: 12,
    alignItems: "center",
    justifyContent: "center",
  },
  todayText: {
    color: "white", // White for better contrast
    fontWeight: "600",
    fontSize: 14,
  },
  dateTextContainer: {
    width: 32,
    height: 32,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 16,
  },
  noTaskContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  selectedDate: {
    // No background color, just text color change
  },
  selectedDayText: {
    color: "#6c63ff", // Same as add button color
    fontWeight: "600",
  },
  tasksContainer: {
    flex: 1,
    backgroundColor: "#f7f7fa",
  },
  taskAreaContainer: {
    flex: 1,
    backgroundColor: "#fff",
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: -2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 5,
    overflow: "hidden",
  },
  taskArea: {
    flex: 1,
    backgroundColor: "#f7f7fa",
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 16,
  },
  tasksHeaderRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginBottom: 16,
    paddingHorizontal: 12,
    width: "100%",
    backgroundColor: "#f7f7fa", // Match tasks container background
    paddingTop: 8,
  },
  tasksHeader: {
    fontSize: 16,
    fontWeight: "600",
    color: "#3d3d4e",
    flex: 1,
    lineHeight: 24,
    paddingHorizontal: 12,
  },
  addButton: {
    marginLeft: 12,
    borderRadius: 20,
    backgroundColor: "#6c63ff",
    alignItems: "center",
    justifyContent: "center",
    width: 40,
    height: 40,
    shadowColor: "#6c63ff",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
    elevation: 2,
  },
  addButtonIcon: {
    width: 48,
    height: 48,
    alignItems: "center",
    justifyContent: "center",
    display: "flex",
  },
  addButtonText: {
    fontSize: 20,
    lineHeight: 24,
    color: "#fff",
    textAlign: "center",
    fontWeight: "bold",
  },
  taskList: {
    width: "100%",
    paddingHorizontal: 12,
  },
  taskItem: {
    backgroundColor: "#fff",
    padding: 12,
    borderRadius: 8,
    elevation: 1,
    flexDirection: "row",
    alignItems: "center",
    minHeight: 40,
    marginTop: 8,
    marginBottom: 8,
    marginHorizontal: 12,
    borderWidth: 1,
    borderColor: "#e0e0e0",
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.05,
    shadowRadius: 4,
  },
  taskTextContainer: {
    flex: 1,
    marginLeft: 12,
    marginRight: 8,
    flexShrink: 1,
  },
  taskText: {
    fontSize: 16,
    color: "#333",
    textDecorationLine: "none",
    flexShrink: 1,
    maxWidth: "100%",
  },
  taskTimeContainer: {
    flexShrink: 0,
    alignItems: "flex-end",
    minWidth: 60,
  },
  moveHint: {
    color: "#ffb300",
    fontWeight: "700",
    marginLeft: 10,
  },
  label: {
    fontSize: 15,
    fontWeight: "600",
    marginBottom: 8,
    color: "#3d3d4e",
  },
  linkInputContainer: {
    flexDirection: "row",
    alignItems: "center",
    borderWidth: 1,
    borderColor: "#e0e0e0",
    backgroundColor: "#f9f9f9",
    borderRadius: 12,
    height: 50,
  },
  linkInputContainerFocused: {
    borderColor: "#6c63ff",
  },
  linkInput: {
    flex: 1,
    fontSize: 16,
    color: "#333",
    paddingHorizontal: 16,
    height: 50,
    backgroundColor: "transparent",
    textAlignVertical: "center",
    borderRadius: 12,
  },
  dateTimeText: {
    flex: 1,
    fontSize: 16,
    color: "#333",
    paddingHorizontal: 16,
    ...Platform.select({
      ios: {
        lineHeight: 50, // iOS: ‰ΩøÁî® lineHeight ÂØ¶ÁèæÂûÇÁõ¥ÁΩÆ‰∏≠
      },
      android: {
        textAlignVertical: "center",
      },
    }),
  },
  linkPreviewButton: {
    padding: 8,
    marginLeft: 8,
  },
  placeholderText: {
    color: "#888",
  },
  timeInput: {
    height: 50,
    justifyContent: "space-between",
    alignItems: "center",
    flexDirection: "row",
    borderWidth: 1,
    borderColor: "#e0e0e0",
    backgroundColor: "#f9f9f9",
    borderRadius: 12,
    paddingHorizontal: 16,
  },
  timeInputSelected: {
    borderColor: "#6c63ff",
    backgroundColor: "#f0f0ff",
  },
  timeInputText: {
    fontSize: 16,
    color: "#888",
    flex: 1,
  },
  timeInputTextFilled: {
    color: "#222",
    fontWeight: "500",
  },
  timePickerOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  timePickerContainer: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 20,
    width: "90%",
    maxWidth: 400,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.25,
    shadowRadius: 12,
    elevation: 8,
  },
  timePickerHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 20,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  timePickerTitle: {
    fontSize: 20,
    fontWeight: "700",
    color: "#333",
  },
  timePickerCloseButton: {
    padding: 8,
    borderRadius: 20,
    backgroundColor: "#f5f5f5",
  },
  timePickerBody: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
  },
  timeWheelContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
  },
  timeWheel: {
    alignItems: "center",
    marginHorizontal: 10,
  },
  timeWheelLabel: {
    fontSize: 14,
    fontWeight: "600",
    color: "#666",
    marginBottom: 8,
  },
  timeWheelList: {
    height: 200,
    width: 80,
  },
  timeWheelContent: {
    alignItems: "center",
    paddingVertical: 75,
  },
  timeSeparator: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#6c63ff",
    marginHorizontal: 10,
  },
  timeWheelItem: {
    height: 50,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    marginVertical: 2,
  },
  timeWheelItemSelected: {
    backgroundColor: "#6c63ff",
  },
  timeWheelText: {
    fontSize: 18,
    color: "#666",
    fontWeight: "500",
  },
  timeWheelTextSelected: {
    color: "#fff",
    fontWeight: "700",
  },
  timeWheelHighlight: {
    position: "absolute",
    top: 75,
    left: 0,
    right: 0,
    height: 50,
    backgroundColor: "rgba(108, 99, 255, 0.1)",
    borderRadius: 8,
    borderWidth: 2,
    borderColor: "#6c63ff",
  },
  timePickerActions: {
    flexDirection: "row",
    marginTop: 20,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: "#f0f0f0",
  },
  doneButton: {
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 8,
  },
  doneButtonText: {
    fontSize: 16,
    fontWeight: "600",
  },
  simpleTimePickerOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "flex-end",
  },
  simpleTimePickerContainer: {
    backgroundColor: "#fff",
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingTop: 20,
    paddingBottom: 40,
  },
  simpleTimePickerHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingBottom: 20,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  simpleTimePickerCancel: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  simpleTimePickerCancelText: {
    fontSize: 16,
    color: "#666",
  },
  simpleTimePickerTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
  },
  simpleTimePickerDone: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  simpleTimePickerDoneText: {
    fontSize: 16,
    color: "#6c63ff",
    fontWeight: "600",
  },
  simpleTimePickerBody: {
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  simpleTimeInputs: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
  },
  simpleTimeInput: {
    alignItems: "center",
    flex: 1,
  },
  simpleTimeLabel: {
    fontSize: 14,
    color: "#666",
    marginBottom: 8,
  },
  simpleTimeTextInput: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 18,
    textAlign: "center",
    width: 80,
    backgroundColor: "#f9f9f9",
  },
  simpleTimeSeparator: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#6c63ff",
    marginHorizontal: 20,
  },
  timeInputContainer: {
    padding: 20,
    alignItems: "center",
  },
  timeInputRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
  },
  timeNumberInput: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 18,
    width: 60,
    backgroundColor: "#f9f9f9",
  },
  timeColon: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#666",
    marginHorizontal: 10,
  },
  timePickerOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "flex-end",
  },
  timePickerContainer: {
    backgroundColor: "#fff",
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingTop: 20,
    paddingBottom: 40,
  },
  timePickerHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingBottom: 20,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  timePickerCancel: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  timePickerCancelText: {
    fontSize: 16,
    color: "#666",
  },
  timePickerTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
  },
  timePickerDone: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  timePickerDoneText: {
    fontSize: 16,
    color: "#6c63ff",
    fontWeight: "600",
  },
  timePickerBody: {
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  timeWheelContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
  },
  timeWheel: {
    alignItems: "center",
    marginHorizontal: 10,
  },
  timeWheelList: {
    height: 200,
    width: 80,
  },
  timeWheelContent: {
    alignItems: "center",
    paddingVertical: 75,
  },
  timeWheelItem: {
    height: 50,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    marginVertical: 2,
  },
  timeWheelItemSelected: {
    backgroundColor: "#6c63ff",
  },
  timeWheelText: {
    fontSize: 18,
    color: "#666",
    fontWeight: "500",
  },
  timeWheelTextSelected: {
    color: "#fff",
    fontWeight: "700",
  },
  timeWheelHighlight: {
    position: "absolute",
    top: 75,
    left: 0,
    right: 0,
    height: 50,
    backgroundColor: "rgba(108, 99, 255, 0.1)",
    borderRadius: 8,
    borderWidth: 2,
    borderColor: "#6c63ff",
  },
  timeSeparator: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#6c63ff",
    marginHorizontal: 10,
  },
  spinnerOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  spinnerContainer: {
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 20,
    width: 280,
    alignItems: "center",
  },
  spinnerTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
    marginBottom: 20,
  },
  spinnerRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 20,
  },
  spinnerColumn: {
    alignItems: "center",
    flex: 1,
  },
  spinnerLabel: {
    fontSize: 14,
    color: "#666",
    marginBottom: 8,
  },
  spinner: {
    height: 120,
    width: 60,
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    backgroundColor: "#f9f9f9",
  },
  spinnerList: {
    flex: 1,
  },
  spinnerContent: {
    paddingVertical: 40,
  },
  spinnerItem: {
    height: 40,
    justifyContent: "center",
    alignItems: "center",
  },
  spinnerText: {
    fontSize: 16,
    color: "#333",
  },
  spinnerColon: {
    fontSize: 20,
    fontWeight: "bold",
    color: "#666",
    marginHorizontal: 10,
  },
  spinnerButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    width: "100%",
  },
  spinnerCancel: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 20,
    marginRight: 8,
    borderRadius: 8,
    backgroundColor: "#f5f5f5",
    alignItems: "center",
  },
  spinnerCancelText: {
    fontSize: 16,
    color: "#666",
  },
  spinnerDone: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 20,
    marginLeft: 8,
    borderRadius: 8,
    backgroundColor: "#6c63ff",
    alignItems: "center",
  },
  spinnerDoneText: {
    fontSize: 16,
    color: "#fff",
    fontWeight: "600",
  },
  taskTimeRight: {
    fontSize: 14,
    color: "#6c63ff",
    fontWeight: "600",
    textAlign: "right",
  },
  timePickerModal: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
  },
  timeWheelContainer: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    width: "100%",
    paddingVertical: 10,
  },
  timeWheel: {
    height: 200,
    width: 80,
    position: "relative",
    overflow: "hidden",
  },
  timeWheelItem: {
    height: 40,
    justifyContent: "center",
    alignItems: "center",
  },
  timeWheelItemSelected: {
    backgroundColor: "rgba(108, 99, 255, 0.1)",
    borderRadius: 20,
  },
  timeWheelText: {
    fontSize: 20,
    color: "#888",
  },
  timeWheelTextSelected: {
    fontSize: 24,
    color: "#6c63ff",
    fontWeight: "600",
  },
  timeWheelHighlight: {
    position: "absolute",
    left: 0,
    right: 0,
    top: "50%",
    height: 40,
    marginTop: -20,
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: "#6c63ff",
    zIndex: -1,
  },
  timeSeparator: {
    fontSize: 28,
    marginHorizontal: 8,
    color: "#6c63ff",
    fontWeight: "600",
  },
  timePickerActions: {
    flexDirection: "row",
    justifyContent: "flex-end",
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: "#f0f0f0",
    marginTop: 10,
  },
  cancelButton: {
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: "#e0e0e0",
    backgroundColor: "#f8f9fa",
  },
  cancelButtonText: {
    color: "#666",
    fontSize: 15,
    fontWeight: "500",
  },
  timePickerContent: {
    width: "100%",
    height: "100%",
    justifyContent: "center",
    alignItems: "center",
  },
  timePickerHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 16,
    width: "100%",
    backgroundColor: "#fff",
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  timePickerTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#3d3d4e",
  },
  timePickerClose: {
    padding: 8,
  },
  timePickerBody: {
    backgroundColor: "#fff",
    width: "100%",
    borderRadius: 16,
    padding: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  timePicker: {
    width: "100%",
  },
  timePicker: {
    width: "100%",
  },
  doneButton: {
    padding: 12,
    alignItems: "center",
    borderTopWidth: 1,
    borderTopColor: "#f0f0f0",
    marginTop: 10,
  },
  doneButtonText: {
    color: "#6c63ff",
    fontSize: 16,
    fontWeight: "600",
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: "#fff",
  },
  modalContent: {
    flex: 1,
    backgroundColor: "#fff",
  },
  modalScrollView: {
    flex: 1,
    paddingHorizontal: 24,
    ...(Platform.OS === "web" && {
      overflowY: "auto",
      WebkitOverflowScrolling: "touch",
    }),
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "700",
    flex: 1,
    textAlign: "center",
  },
  input: {
    borderWidth: 1,
    borderColor: "#e0e0e0",
    borderRadius: 12,
    paddingHorizontal: 16,
    height: 50,
    fontSize: 16,
    backgroundColor: "#f9f9f9",
  },
  inputFilled: {
    borderColor: "#6c63ff",
  },
  noteInput: {
    height: 100,
    paddingTop: 12,
    paddingBottom: 12,
  },
  modalButtons: {
    height: 80,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 24,
    paddingTop: 16,
    paddingBottom: 16,
    gap: 12,
    borderTopWidth: 1,
    borderTopColor: "#f0f0f0",
    backgroundColor: "#fff",
  },
  buttonGroup: {
    flexDirection: "row",
    justifyContent: "flex-end",
    gap: 6,
  },
  saveButton: {
    backgroundColor: "#6c63ff",
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 24,
    minWidth: 80,
    alignItems: "center",
  },
  saveButtonText: {
    color: "#fff",
    fontWeight: "600",
    fontSize: 15,
  },
  modalHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 16,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
    backgroundColor: "#fff",
    zIndex: 10,
  },
  modalBackButton: {
    padding: 12,
    alignItems: "center",
    justifyContent: "center",
    width: 48,
    height: 48,
    zIndex: 999,
    backgroundColor: "transparent",
  },
  modalHeaderSpacer: {
    width: 48,
  },
  modalCloseButton: {
    padding: 4,
    alignItems: "center",
    justifyContent: "center",
  },
  deleteButton: {
    backgroundColor: "transparent",
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderWidth: 1,
    borderColor: "#e0e0e0",
    alignItems: "center",
  },
  deleteButtonText: {
    color: "#ff5a5f",
    fontWeight: "500",
    fontSize: 14,
  },
  taskContent: {
    flex: 1,
  },
  taskUserInfo: {
    flexDirection: "row",
    alignItems: "center",
    marginTop: 4,
  },
  userAvatar: {
    width: 16,
    height: 16,
    borderRadius: 8,
    marginRight: 6,
  },
  userDisplayName: {
    fontSize: 12,
    color: "#888",
    fontStyle: "italic",
  },
  // Á∞°ÂåñÊôÇÈñìÈÅ∏ÊìáÂô®Ê®£Âºè
  simpleTimePickerOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "flex-end",
  },
  simpleTimePickerContainer: {
    backgroundColor: "#fff",
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingTop: 20,
    paddingBottom: 40,
  },
  simpleTimePickerHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingBottom: 20,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  simpleTimePickerCancel: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  simpleTimePickerCancelText: {
    fontSize: 16,
    color: "#666",
  },
  simpleTimePickerTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
  },
  simpleTimePickerDone: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  simpleTimePickerDoneText: {
    fontSize: 16,
    color: "#6c63ff",
    fontWeight: "600",
  },
  simpleTimePickerBody: {
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  simpleTimeWheelContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
  },
  simpleTimeWheel: {
    height: 200,
    width: 80,
    marginHorizontal: 10,
  },
  simpleTimeWheelContent: {
    alignItems: "center",
    paddingVertical: 75,
  },
  simpleTimeWheelItem: {
    height: 50,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 8,
    marginVertical: 2,
  },
  simpleTimeWheelItemSelected: {
    backgroundColor: "#6c63ff",
  },
  simpleTimeWheelText: {
    fontSize: 18,
    color: "#666",
    fontWeight: "500",
  },
  simpleTimeWheelTextSelected: {
    color: "#fff",
    fontWeight: "700",
  },
  simpleTimeSeparator: {
    fontSize: 24,
    fontWeight: "bold",
    color: "#6c63ff",
    marginHorizontal: 10,
  },
  // ÂéüÁîüÊôÇÈñìÈÅ∏ÊìáÂô®Ê®£Âºè
  nativeTimePickerOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "flex-end",
  },
  nativeTimePickerContainer: {
    backgroundColor: "#fff",
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingTop: 20,
    paddingBottom: 40,
  },
  nativeTimePickerHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingBottom: 20,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  nativeTimePickerCancel: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  nativeTimePickerCancelText: {
    fontSize: 16,
    color: "#666",
  },
  nativeTimePickerTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
  },
  nativeTimePickerDone: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  nativeTimePickerDoneText: {
    fontSize: 16,
    color: "#6c63ff",
    fontWeight: "600",
  },
  nativeTimePickerBody: {
    paddingHorizontal: 20,
    paddingTop: 20,
    alignItems: "center",
  },
  nativeDateTimePicker: {
    width: 200,
    height: 200,
  },
  // Á∞°ÂåñÁöÑÊôÇÈñìÈÅ∏ÊìáÂô®Ê®£Âºè
  timePickerOverlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    justifyContent: "flex-end",
  },
  timePickerContainer: {
    backgroundColor: "#fff",
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingTop: 20,
    paddingBottom: 40,
  },
  timePickerHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingBottom: 20,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  timePickerCancel: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  timePickerCancelText: {
    fontSize: 16,
    color: "#666",
  },
  timePickerTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#333",
  },
  timePickerDone: {
    paddingVertical: 8,
    paddingHorizontal: 16,
  },
  timePickerDoneText: {
    fontSize: 16,
    color: "#6c63ff",
    fontWeight: "600",
  },
  timePickerBody: {
    paddingHorizontal: 20,
    paddingTop: 20,
    alignItems: "center",
  },
  dateTimePicker: {
    width: 200,
    height: 200,
  },
  // Web ÊôÇÈñìÈÅ∏ÊìáÂô®Ê®£Âºè
  webTimePicker: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 20,
  },
  webTimePickerRow: {
    alignItems: "center",
    marginHorizontal: 10,
  },
  webTimePickerLabel: {
    fontSize: 14,
    fontWeight: "600",
    color: "#666",
    marginBottom: 10,
  },
  webTimePickerColumn: {
    height: 200,
    width: 60,
    backgroundColor: "#f8f9fa",
    borderRadius: 8,
    borderWidth: 1,
    borderColor: "#e9ecef",
  },
  webTimePickerContent: {
    alignItems: "center",
    paddingVertical: 84, // ËÆìÁï∂ÂâçÊôÇÈñìÈ°ØÁ§∫Âú®‰∏≠Èñì
  },
  webTimePickerItem: {
    height: 30,
    justifyContent: "center",
    alignItems: "center",
    marginVertical: 1,
    borderRadius: 4,
  },
  webTimePickerItemSelected: {
    backgroundColor: "#6c63ff",
  },
  webTimePickerText: {
    fontSize: 16,
    color: "#666",
    fontWeight: "500",
  },
  webTimePickerTextSelected: {
    color: "#fff",
    fontWeight: "700",
  },
  webTimePickerContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 20,
  },
  webTimePickerColumn: {
    alignItems: "center",
    marginHorizontal: 15,
  },
  webTimePickerLabel: {
    fontSize: 14,
    fontWeight: "600",
    color: "#666",
    marginBottom: 10,
  },
  webTimePickerList: {
    height: 200,
    width: 80,
    backgroundColor: "#f8f9fa",
    borderRadius: 12,
    borderWidth: 1,
    borderColor: "#e9ecef",
  },
  webTimePickerContent: {
    paddingVertical: 85, // ËÆì‰∏≠ÈñìÁöÑÈ†ÖÁõÆÂ±Ö‰∏≠È°ØÁ§∫
  },
  webTimePickerItem: {
    height: 32,
    justifyContent: "center",
    alignItems: "center",
    marginVertical: 1,
    borderRadius: 6,
    marginHorizontal: 4,
  },
  webTimePickerItemSelected: {
    backgroundColor: "#6c63ff",
  },
  webTimePickerText: {
    fontSize: 16,
    color: "#666",
    fontWeight: "500",
  },
  webTimePickerTextSelected: {
    color: "#fff",
    fontWeight: "700",
  },
  webTimeSeparator: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#6c63ff",
    marginHorizontal: 10,
  },
  headerContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingHorizontal: 16,
    paddingVertical: 10,
  },
  todayButton: {
    backgroundColor: "#6c63ff",
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 8,
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.22,
    shadowRadius: 2.22,
  },
  todayButtonText: {
    color: "#fff",
    fontSize: 12,
    fontWeight: "500",
  },
  taskAreaContent: {
    flex: 1,
  },
  tasksScrollContent: {
    flexGrow: 1,
    paddingTop: 8,
  },
});
