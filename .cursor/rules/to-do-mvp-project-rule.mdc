---
alwaysApply: true
---

# Too-Doo-List 專案開發規則

## 版本管理 (Semantic Versioning)

在每次提交到 repository 之前，必須評估是否需要更新 app version。使用語義化版本控制（Semantic Versioning）：

### 版本號格式：MAJOR.MINOR.PATCH

#### 1. PATCH (修補版本) - 第三位數字 (例: 1.0.0 → 1.0.1)

**何時更新：**

- 錯誤修正（Bug fixes）
- 小型 UI 調整（不影響功能）
- 性能優化
- 文字修正、翻譯更新
- 樣式微調（顏色、間距等）
- 代碼重構（不改變外部行為）

**範例：**

- 修正任務無法刪除的問題
- 修正日期格式顯示錯誤
- 調整按鈕邊距
- 更新繁體中文翻譯

#### 2. MINOR (次要版本) - 第二位數字 (例: 1.0.0 → 1.1.0)

**何時更新：**

- 新增功能（向後相容）
- 新增 UI 元件
- 增加欄位或選項
- 改善現有功能
- 添加新的語言支援
- 性能大幅提升

**範例：**

- 新增「備註」欄位
- 新增日期/時間選擇器
- 添加任務過濾功能
- 新增深色模式

#### 3. MAJOR (主要版本) - 第一位數字 (例: 1.0.0 → 2.0.0)

**何時更新：**

- 破壞性變更（Breaking changes）
- 重大架構調整
- 資料庫結構變更（需要遷移）
- 移除現有功能
- 完全重新設計 UI/UX
- 不向後相容的 API 變更

**範例：**

- 重新設計整個應用架構
- 改變資料存儲方式
- 移除對舊版本的支援

### 版本更新檢查清單

每次 commit 前檢查：

```markdown
- [ ] 是否有程式碼變更？

  - 否 → 不需更新版本
  - 是 → 繼續評估

- [ ] 是否為錯誤修正或小型調整？

  - 是 → PATCH +1

- [ ] 是否新增功能或改善現有功能（向後相容）？

  - 是 → MINOR +1, PATCH 歸零

- [ ] 是否有破壞性變更或重大架構調整？
  - 是 → MAJOR +1, MINOR 和 PATCH 歸零
```

### 更新版本的位置

1. **app.config.js**

   ```javascript
   version: "1.0.0";
   ```

2. **package.json**

   ```json
   "version": "1.0.0"
   ```

3. **eas.json** (如果有設定)
   - iOS: `buildNumber`
   - Android: `versionCode`

---

## 多語系支援規範

### 核心原則

**絕對不允許硬編碼文字！** 所有前端顯示的文字都必須透過翻譯系統處理。

### 實作規則

#### 1. 使用翻譯 Hook

```javascript
const { t } = useContext(LanguageContext);
```

#### 2. 文字顯示範例

**❌ 錯誤做法：**

```jsx
<Text>Save</Text>
<Text>儲存</Text>
<TouchableOpacity><Text>Cancel</Text></TouchableOpacity>
<TextInput placeholder="Enter your task" />
```

**✅ 正確做法：**

```jsx
<Text>{t.save}</Text>
<TouchableOpacity><Text>{t.cancel}</Text></TouchableOpacity>
<TextInput placeholder={t.taskPlaceholder} />
```

#### 3. 新增翻譯文字

當需要新增文字時，必須同時在兩個語言物件中定義：

```javascript
// 英文
const translations_en = {
  // ... existing translations
  newFeature: "New Feature",
  newButton: "Click Me",
  newPlaceholder: "Enter something...",
};

// 繁體中文
const translations_zh = {
  // ... existing translations
  newFeature: "新功能",
  newButton: "點我",
  newPlaceholder: "輸入內容...",
};
```

#### 4. 翻譯文字命名規範

- 使用 camelCase
- 名稱要有意義且具描述性
- 相關的翻譯使用相同前綴

**範例：**

```javascript
// 按鈕相關
save: "Save" / "儲存"
cancel: "Cancel" / "取消"
delete: "Delete" / "刪除"

// 任務相關
taskLabel: "Task" / "任務"
taskPlaceholder: "Enter your task..." / "輸入您的任務..."

// 日期相關
date: "Date" / "日期"
datePlaceholder: "Enter date..." / "輸入日期..."
```

#### 5. 檢查清單

在每次 commit 前檢查：

```markdown
- [ ] 是否有新增或修改前端顯示文字？

  - [ ] 英文翻譯已添加到 translations_en
  - [ ] 繁體中文翻譯已添加到 translations_zh
  - [ ] 使用 {t.keyName} 而非硬編碼文字
  - [ ] placeholder、label、button 文字都已翻譯
  - [ ] Modal、Alert 的文字都已翻譯

- [ ] 測試語言切換功能
  - [ ] 切換到英文，檢查所有文字正確顯示
  - [ ] 切換到繁體中文，檢查所有文字正確顯示
```

#### 6. 常見需要翻譯的位置

- Button 文字
- Label 文字
- Placeholder 文字
- Modal/Alert 標題和內容
- 錯誤訊息
- 成功訊息
- 說明文字
- Navigation 標題
- Tab 標籤

### 例外情況

以下情況可以使用硬編碼：

- 開發用的 console.log 訊息
- 技術性錯誤訊息（僅用於 debug）
- accessibilityLabel/accessibilityHint（建議也翻譯）

---

## 程式碼品質規範

### 提交前檢查

```markdown
- [ ] 沒有 linter 錯誤
- [ ] 沒有 TypeScript/JavaScript 錯誤
- [ ] 測試基本功能運作正常
- [ ] 版本號已適當更新
- [ ] 所有文字都已多語系化
- [ ] Git commit message 清楚描述變更
```

### Commit Message 格式建議

```
[type] 簡短描述 (v版本號)

詳細說明（可選）

範例：
[feat] 新增日期時間選擇器功能 (v1.1.0)
[fix] 修正任務刪除錯誤 (v1.0.1)
[style] 調整按鈕樣式和間距 (v1.0.2)
[i18n] 更新繁體中文翻譯 (v1.0.3)
[refactor] 重構任務服務層 (v1.0.4)
```

Type 類型：

- `feat`: 新功能
- `fix`: 錯誤修正
- `style`: 樣式調整
- `refactor`: 代碼重構
- `i18n`: 多語系相關
- `docs`: 文檔更新
- `chore`: 其他雜項

---

## 快速參考

### 版本更新決策樹

```
有程式碼變更？
├─ 是 → 繼續
└─ 否 → 不更新版本

破壞性變更 / 重大架構調整？
├─ 是 → MAJOR +1
└─ 否 → 繼續

新增功能 / 改善功能（向後相容）？
├─ 是 → MINOR +1
└─ 否 → 繼續

錯誤修正 / 小型調整？
├─ 是 → PATCH +1
└─ 否 → 不更新版本
```

### 多語系檢查

```
新增/修改文字？
├─ 是 → 必須翻譯
│   ├─ 添加到 translations_en
│   ├─ 添加到 translations_zh
│   └─ 使用 {t.keyName}
└─ 否 → 完成
```

---

## Git 提交前檢查清單

在每次提交到 repository 之前，**必須**完成以下檢查：

### 1. 安全性檢查 (Security Check)

**檢查 .gitignore 是否需要更新：**

```markdown
- [ ] 檢查是否有新的敏感文件或目錄需要忽略

  - [ ] 環境變量文件 (.env, .env.local, .env.\*)
  - [ ] API 金鑰、密碼、憑證文件
  - [ ] 資料庫連接字串
  - [ ] 私密配置文件
  - [ ] 本地開發專用文件
  - [ ] IDE 生成的臨時文件 (.cursor/chat/, .cursor/prompts_history/)
  - [ ] 構建產出物 (build/, dist/, web-build/)
  - [ ] 依賴項 (node_modules/, ios/Pods/)
  - [ ] 日誌文件 (\*.log)
  - [ ] 臨時文件 (_.tmp, _.cache)

- [ ] 使用 git status 檢查未追蹤的文件
- [ ] 確認所有敏感資料已加入 .gitignore
- [ ] 檢查已暫存的文件中是否包含敏感資訊
```

**常見需要忽略的文件類型：**

- 環境變數：`.env*`
- 憑證：`*.pem`, `*.key`, `*.cert`, `*.p12`, `*.mobileprovision`
- 配置：包含密碼或 API 金鑰的配置文件
- 資料庫：`*.sql`（可能包含敏感結構或數據）
- 備份：`*.backup`, `*.bak`

### 2. 版本號更新檢查 (Version Check)

**根據語義化版本控制規則更新版本號：**

```markdown
- [ ] 評估本次變更的類型

  - [ ] MAJOR (x.0.0)：破壞性變更或重大架構調整
  - [ ] MINOR (1.x.0)：新增功能（向後相容）
  - [ ] PATCH (1.0.x)：錯誤修正或小型調整

- [ ] 更新版本號於以下位置：

  - [ ] app.config.js (version)
  - [ ] package.json (version)
  - [ ] eas.json (buildNumber, versionCode - 如果有設定)

- [ ] 版本號必須一致
```

**版本更新指南：**

- 任何程式碼變更都應更新至少 PATCH 版本
- 新增功能更新 MINOR 版本
- 破壞性變更更新 MAJOR 版本

### 3. 文檔更新檢查 (Documentation Check)

**檢查 README.md 是否需要更新：**

```markdown
- [ ] 是否有新功能需要在 README 中說明？
- [ ] 安裝步驟是否有變更？
- [ ] 配置說明是否需要更新？
- [ ] 環境變數是否有新增或修改？
- [ ] API 使用方式是否有變更？
- [ ] 依賴項是否有重大更新？
- [ ] 已知問題是否需要記錄？
- [ ] 截圖或範例是否需要更新？
```

**需要更新 README 的情況：**

- ✅ 新增功能或移除功能
- ✅ 修改環境變數或配置
- ✅ 更新依賴項版本
- ✅ 改變安裝或部署流程
- ✅ 新增 API 端點或修改現有 API
- ✅ 修改專案結構
- ❌ 純粹的錯誤修正（除非影響使用方式）
- ❌ 代碼重構（不改變外部行為）

### 4. 程式碼品質檢查 (Code Quality Check)

```markdown
- [ ] 沒有 linter 錯誤
- [ ] 沒有 TypeScript/JavaScript 錯誤
- [ ] 測試基本功能運作正常
- [ ] 所有文字都已多語系化（無硬編碼文字）
- [ ] 移除了 console.log 和調試代碼（開發用除外）
- [ ] 代碼格式化正確
```

### 5. Commit Message 格式

**標準格式：**

```
[type] 簡短描述 (v版本號)

詳細說明（可選）
- 變更點 1
- 變更點 2
- 變更點 3
```

**Type 類型：**

- `feat`: 新功能
- `fix`: 錯誤修正
- `style`: 樣式調整
- `refactor`: 代碼重構
- `i18n`: 多語系相關
- `docs`: 文檔更新
- `chore`: 其他雜項
- `security`: 安全性修正
- `perf`: 性能優化

**範例：**

```
[feat] 新增日期時間選擇器功能 (v1.1.0)

- 新增 Date 和 Time 欄位的雙重輸入方式
- 新增 Note 備註欄位支援
- 改善欄位樣式統一性
- 移除瀏覽器原生圖示
```

### 完整提交流程

```bash
# 1. 檢查未追蹤的文件
git status

# 2. 檢查 .gitignore 是否需要更新
# （檢查是否有敏感文件未被忽略）

# 3. 更新版本號
# - app.config.js
# - package.json

# 4. 檢查並更新 README.md（如需要）

# 5. 添加文件
git add -A

# 6. 再次確認暫存的文件
git status

# 7. 提交（使用標準格式）
git commit -m "[type] 描述 (v版本號)"

# 8. 推送到遠端
git push origin main
```

---

## 安全性最佳實踐

### 絕對不可提交的內容

❌ **禁止提交：**

- API 金鑰和密碼
- 資料庫連接字串
- OAuth 客戶端密鑰
- 私鑰和憑證
- 個人資料或用戶數據
- 包含敏感資訊的日誌文件

✅ **應該提交：**

- 範例配置文件（`.env.example`）
- 公開的配置模板
- 文檔和說明
- 開源代碼
- 專案規則和指南

### 檢查工具

建議使用以下命令檢查：

```bash
# 檢查暫存的文件內容
git diff --cached

# 搜尋可能的敏感資訊
git diff --cached | grep -i "password\|api_key\|secret\|token"
```
